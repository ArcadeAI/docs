import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StreamableHTTPClientTransport } from "@modelcontextprotocol/sdk/client/streamableHttp.js";
import {
  CallToolRequest,
  CallToolResultSchema,
  ListToolsRequest,
  ListToolsResultSchema,
} from "@modelcontextprotocol/sdk/types.js";

// Replace with your actual API key and user ID
const arcadeApiKey = "your_arcade_api_key";
const userId = "your_email@example.com";
const arcadeURL = "https://api.arcade.dev/v1";
const serverURL = `${arcadeURL}/mcp`;

// Exchange API key for user-scoped token
const tokenExchangeResponse = await fetch(`${arcadeURL}/tokens/exchange`, {
  method: "POST",
  headers: {
    Authorization: `Bearer ${arcadeApiKey}`,
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ user_id: userId }),
});

if (!tokenExchangeResponse.ok) {
  const errorText = await tokenExchangeResponse.text();
  console.error("Token exchange failed:", errorText);
  process.exit(1);
}

const tokenData = await tokenExchangeResponse.json();
const authToken = tokenData.token.trim();

// Create an MCP client
const client = new Client({ name: "my-mcp-client", version: "1.0.0" });
client.onerror = (error) => console.error("Client error:", error);

// Connect to the Arcade MCP server
const transport = new StreamableHTTPClientTransport(new URL(serverURL), {
  requestInit: {
    headers: {
      Authorization: `Bearer ${authToken}`,
    },
  },
});

await client.connect(transport);
console.log("Successfully connected to MCP server.");

// Get available tools from the server
const toolsRequest: ListToolsRequest = {
  method: "tools/list",
};
const toolsResult = await client.request(toolsRequest, ListToolsResultSchema);

// Display available tools
console.log(`Available tools (${toolsResult.tools.length} tools):`);
for (const tool of toolsResult.tools) {
  const firstLineOfDescription = tool.description?.split("\n")[0];
  console.log(`  - ${tool.name} (${firstLineOfDescription})`);
}

try {
  // Prepare the tool call request
  const callToolRequest: CallToolRequest = {
    method: "tools/call",
    params: {
      name: "Google_ListEmails",
      arguments: {
        n_emails: 5,
      },
    },
  };
  console.log("Calling tool...");

  // Call the tool
  async function callTool() {
    try {
      const result = await client.request(
        callToolRequest,
        CallToolResultSchema,
      );

      console.log("Tool result:");
      result.content.forEach((item) => {
        if (item.type === "text") {
          console.log(`  ${item.text}`);
        } else {
          console.log(`  ${item.type} content:`, item);
        }
      });
    } catch (error: any) {
      // Check if this is an interaction_required error
      if (error.code === -32003 && error.data && error.data.type === "url") {
        console.log("\n------------------------------------------");
        console.log(error.data.message.text);
        console.log(error.data.url);
        console.log("------------------------------------------\n");

        // Prompt user to press any key after authorization
        console.log(
          "After completing the authorization flow, press Enter to continue...",
        );
        await new Promise((resolve) => {
          process.stdin.once("data", () => {
            resolve(undefined);
          });
          process.stdin.resume();
        });

        console.log("Retrying tool call after authorization...");
        // Retry the tool call
        await callTool();
      } else {
        // Re-throw other errors
        throw error;
      }
    }
  }

  await callTool();
} catch (error) {
  console.log("Error calling tool:", error);
}

// Finally, close the connection to the MCP server
await transport.close();
process.exit(0);
