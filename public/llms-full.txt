# https://docs.arcade.dev/ llms-full.txt

## Automate with Arcade
# Welcome to Arcade!

What if AI could do more than suggest? Imagine instead of getting a to-do list, your AI couldtake action \- sending urgent emails, updating customer records, or kicking off complex workflows.

[Get Started](https://docs.arcade.dev/home/quickstart) [Build a tool](https://docs.arcade.dev/home/build-tools/create-a-toolkit)

## Start Building in Minutes

Everything you need to get started with Arcade.

[Quick Start Guide\\
\\
Start using Arcade in minutes with our quick start guide. We'll show you how to equip LLMs with the ability to take action.](https://docs.arcade.dev/home/quickstart)

[Browse Integrations\\
\\
Explore our library of integrations for popular services. Find the perfect integration for your needs.](https://docs.arcade.dev/toolkits)

[Start Building\\
\\
Learn how to build and deploy your own custom tools. Use Arcade's tool SDK to create custom capabilities for your agents.](https://docs.arcade.dev/home/custom-tools)

[Deploy Arcade\\
\\
Run Arcade locally, in Docker, or in the cloud. We'll show you how to get started with each option.](https://docs.arcade.dev/home/install/overview)

## Why Developers Choose Arcade

Arcade solves the fundamental challenges that have limited AI agents, empowering them to take meaningful actions in real-world applications.

Agents Can't Act on Users' Behalf

Challenge

Today's agents can't securely access user data or perform actions as the user, limiting them to generic tools like search engines and calculators.

* * *

Arcade Solution

Secure User Impersonation

Arcade lets agents securely access user-specific services like email, calendars, and documents through built-in OAuth and token management.

[Learn more](https://docs.arcade.dev/home/auth/how-arcade-helps)

Tools Can't Scale Independently

Challenge

Tools run on the same resources as your application, creating performance bottlenecks and limiting what agents can do as demand grows.

* * *

Arcade Solution

Tools That Scale Independently

Arcade separates tool execution from your application, allowing each tool to run on its optimal infrastructure and scale based on its specific needs.

[Learn more](https://docs.arcade.dev/home/use-tools/tools-overview)

Fragmented Tool Ecosystem

Challenge

Each LLM provider and orchestration framework requires different tool formats, forcing developers to maintain multiple versions of the same tool for different models.

* * *

Arcade Solution

Build Once, Run Anywhere

Define your tool once with Arcade's SDK and it works seamlessly across OpenAI, Anthropic, and frameworks like LangChain and CrewAI without any changes.

[Learn more](https://docs.arcade.dev/home/build-tools/create-a-toolkit)

Enterprise Requirements Aren't Met

Challenge

Existing solutions lack the security, compliance, and integration capabilities needed for enterprise adoption of AI agents.

* * *

Arcade Solution

Enterprise-Ready Platform

Arcade provides the authentication, compliance, and integration capabilities required for production deployment in enterprise environments.

[Learn more](https://docs.arcade.dev/toolkits)

## Arcade Overview

![arcade overview](https://docs.arcade.dev/_next/image?url=%2Fimages%2Foverview.png&w=3840&q=75)

[Arcade Gateway\\
\\
The Arcade gateway is your MCP Server and Agentic tool provider. It allows you to write your tools once and serve them across any LLM or orchestration framework, no matter the protocol. The gateway manages agent authentication, tool registration, and tool execution.](https://docs.arcade.dev/home#)

[Control Plane\\
\\
The Control Plane is how you manage your tools, users, and deployments from a single place. No matter how large your deployment or organization gets, the Control Plane will scale with you.](https://docs.arcade.dev/home#)

[Public and Private Tools\\
\\
Arcade makes it easy to develop custom tools that just work with Agents. Our SDKs and framework integrations make it easy to get started. When you are ready, it's easy to run your tools either on-prem or in our cloud.](https://docs.arcade.dev/home#)

[Tools and MCP Servers Together\\
\\
The Arcade Gateway is the only way to combine MCP servers with your Agentic tools. Regardless of where your tool is hosted, you can serve and manage access to it via the Gateway. You easily can mix our public tools with your own private tools in your agents.](https://docs.arcade.dev/home#)

## Sample Applications

Get started quickly with our pre-built templates and example applications.

[![Arcade Chat](https://docs.arcade.dev/_next/image?url=%2Fimages%2Fsample-apps%2Farcade-chat.png&w=3840&q=75)\\
\\
**Arcade Chat** \\
\\
A chatbot that can help you with your daily tasks.](https://chat.arcade.dev/)

[![Archer](https://docs.arcade.dev/_next/image?url=%2Fimages%2Flogo%2Farcade.png&w=3840&q=75)\\
\\
**Archer** \\
\\
A bot for Slack that can act on your behalf.](https://github.com/ArcadeAI/ArcadeSlackAgent)

[![Summarize YouTube Podcasts in Slack](https://docs.arcade.dev/_next/image?url=%2Fimages%2Fsample-apps%2Fslack-aipodcast-summaries.jpg&w=3840&q=75)\\
\\
**Summarize YouTube Podcasts in Slack** \\
\\
A Slack bot that extracts and summarizes YouTube transcripts in Weaviate, perfect for AI podcasts.](https://github.com/dforwardfeed/slack-AIpodcast-summaries)

[Contact us](https://docs.arcade.dev/home/contact-us "[object Object]")

## Arcade Toolkit Integrations
# Integrations

There are 4 designations for Arcade integrations:

## Arcade Toolkit

Official integrations developed and maintained by Arcade.

## Verified Toolkit

Community-created integrations, thoroughly tested and verified by Arcade.

## Community Toolkit

Created and maintained by the Arcade community, offering a wide range of integrations.

## Auth Integration

Auth integrations allow you to develop custom tools that connect your agent APIs and services.

## Build your own integration

Don't see what you need? Use Arcade's SDK to integrate with any service or API.

[Learn how to build a toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit)

96 result(s) found

All ToolsProductivity & DocsSocial & CommunicationDeveloper ToolsEntertainmentSearchPayments & FinanceSales

[![Code Runner logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fe2b.png&w=96&q=75)\\
\\
Code Runner\\
\\
Arcade Toolkit\\
\\
Execute and test code in a secure sandbox environment](https://docs.arcade.dev/toolkits/development/code-sandbox) [![Dropbox logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fdropbox.png&w=96&q=75)\\
\\
Dropbox\\
\\
Arcade Toolkit\\
\\
Manage Dropbox files and folders with your agents](https://docs.arcade.dev/toolkits/productivity/dropbox) [![GitHub logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgithub.png&w=96&q=75)\\
\\
GitHub\\
\\
Arcade Toolkit\\
\\
Interact with private and public GitHub repositories, issues, pull requests, and more](https://docs.arcade.dev/toolkits/development/github/github) [![Gmail logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgmail.png&w=96&q=75)\\
\\
Gmail\\
\\
Arcade Toolkit\\
\\
Send, write, draft, delete, trash, and search Gmail emails with your agents.](https://docs.arcade.dev/toolkits/productivity/google/gmail) [![Google Calendar logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_calendar.png&w=96&q=75)\\
\\
Google Calendar\\
\\
Arcade Toolkit\\
\\
Create, update, delete, and search events in Google Calendar with your agents.](https://docs.arcade.dev/toolkits/productivity/google/calendar) [![Google Contacts logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_contacts.png&w=96&q=75)\\
\\
Google Contacts\\
\\
Arcade Toolkit\\
\\
Create and search contacts in Google Contacts with your agents.](https://docs.arcade.dev/toolkits/productivity/google/contacts) [![Google Docs logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_docs.png&w=96&q=75)\\
\\
Google Docs\\
\\
Arcade Toolkit\\
\\
Create, edit, and get information about Google Docs documents with your agents.](https://docs.arcade.dev/toolkits/productivity/google/docs) [![Google Drive logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_drive.png&w=96&q=75)\\
\\
Google Drive\\
\\
Arcade Toolkit\\
\\
List documents in Google Drive with your agents.](https://docs.arcade.dev/toolkits/productivity/google/drive) [![Google Finance logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_finance.png&w=96&q=75)\\
\\
Google Finance\\
\\
Arcade Toolkit\\
\\
Get stock data from Google Finance](https://docs.arcade.dev/toolkits/search/google_finance) [![Google Flights logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_flights.png&w=96&q=75)\\
\\
Google Flights\\
\\
Arcade Toolkit\\
\\
Search for flights](https://docs.arcade.dev/toolkits/search/google_flights) [![Google Hotels logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_hotels.png&w=96&q=75)\\
\\
Google Hotels\\
\\
Arcade Toolkit\\
\\
Search for hotels](https://docs.arcade.dev/toolkits/search/google_hotels) [![Google Jobs logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_jobs.png&w=96&q=75)\\
\\
Google Jobs\\
\\
Arcade Toolkit\\
\\
Search for job openings with Google Jobs.](https://docs.arcade.dev/toolkits/search/google_jobs) [![Google Maps logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_maps.png&w=96&q=75)\\
\\
Google Maps\\
\\
Arcade Toolkit\\
\\
Get directions between two locations with Google Maps](https://docs.arcade.dev/toolkits/search/google_maps) [![Google News logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_news.png&w=96&q=75)\\
\\
Google News\\
\\
Arcade Toolkit\\
\\
Search for news articles with Google News](https://docs.arcade.dev/toolkits/search/google_news) [![Google Search logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_search.png&w=96&q=75)\\
\\
Google Search\\
\\
Arcade Toolkit\\
\\
Perform Google searches and retrieve relevant information](https://docs.arcade.dev/toolkits/search/google_search) [GO\\
\\
Google Sheets\\
\\
Arcade Toolkit\\
\\
Create, read, and update Google Sheets with your agents.](https://docs.arcade.dev/toolkits/productivity/google/sheets) [![Google Shopping logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fgoogle_shopping.png&w=96&q=75)\\
\\
Google Shopping\\
\\
Arcade Toolkit\\
\\
Search for products on Google Shopping.](https://docs.arcade.dev/toolkits/search/google_shopping) [![HubSpot logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fhubspot.png&w=96&q=75)\\
\\
HubSpot\\
\\
Arcade Toolkit\\
\\
Manage companies, contacts, deals, and more in HubSpot with your agents.](https://docs.arcade.dev/toolkits/sales/hubspot) [![LinkedIn logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Flinkedin.png&w=96&q=75)\\
\\
LinkedIn\\
\\
Arcade Toolkit\\
\\
Connect and interact with LinkedIn's professional network through your agents](https://docs.arcade.dev/toolkits/social-communication/linkedin) [![Notion logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fnotion.png&w=96&q=75)\\
\\
Notion\\
\\
Arcade Toolkit\\
\\
Create, read, and search Notion pages](https://docs.arcade.dev/toolkits/productivity/notion) [![Outlook Mail logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Foutlook_mail.png&w=96&q=75)\\
\\
Outlook Mail\\
\\
Arcade Toolkit\\
\\
Manage Outlook emails with your agents](https://docs.arcade.dev/toolkits/productivity/microsoft/outlook_mail) [![Reddit logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Freddit.png&w=96&q=75)\\
\\
Reddit\\
\\
Arcade Toolkit\\
\\
Interact with Reddit with your agents](https://docs.arcade.dev/toolkits/social-communication/reddit) [![Slack logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fslack.png&w=96&q=75)\\
\\
Slack\\
\\
Arcade Toolkit\\
\\
Send and receive messages to Slack channels and users with agents](https://docs.arcade.dev/toolkits/social-communication/slack) [![Spotify logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fspotify.png&w=96&q=75)\\
\\
Spotify\\
\\
Arcade Toolkit\\
\\
Control music playback and manage playlists on Spotify](https://docs.arcade.dev/toolkits/entertainment/spotify) [ST\\
\\
Stripe\\
\\
Arcade Toolkit\\
\\
Process payments and manage subscriptions with your agents.](https://docs.arcade.dev/toolkits/payments/stripe) [![Walmart Search logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fwalmart.png&w=96&q=75)\\
\\
Walmart Search\\
\\
Arcade Toolkit\\
\\
Search and get details about products listed on Walmart.](https://docs.arcade.dev/toolkits/search/walmart) [![Web logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fweb.png&w=96&q=75)\\
\\
Web\\
\\
Arcade Toolkit\\
\\
Browse and interact with web pages programmatically](https://docs.arcade.dev/toolkits/development/web/web) [![X logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Ftwitter.png&w=96&q=75)\\
\\
X\\
\\
Arcade Toolkit\\
\\
Integrate agents with X (Twitter), including tweets, users, and more](https://docs.arcade.dev/toolkits/social-communication/x) [![Youtube Search logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fyoutube.png&w=96&q=75)\\
\\
Youtube Search\\
\\
Arcade Toolkit\\
\\
Search and get details about YouTube videos.](https://docs.arcade.dev/toolkits/search/youtube) [![Zoom logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fzoom.png&w=96&q=75)\\
\\
Zoom\\
\\
Arcade Toolkit\\
\\
Join and manage Zoom meetings with your agents](https://docs.arcade.dev/toolkits/social-communication/zoom) [![Twilio logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Ftwilio.png&w=96&q=75)\\
\\
Twilio\\
\\
Verified Toolkit\\
\\
Send SMS and WhatsApp messages through Twilio's platform](https://docs.arcade.dev/toolkits/social-communication/twilio/readme) [![Close.io logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fcloseio.png&w=96&q=75)\\
\\
Close.io\\
\\
Community Toolkit\\
\\
Manage leads, contacts, and deals in Close.io CRM](https://docs.arcade.dev/toolkits/productivity/closeio) [![Confluence logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fatlassian.png&w=96&q=75)\\
\\
Confluence\\
\\
Auth Integration\\
\\
Manage Confluence pages and spaces with your agents](https://docs.arcade.dev/toolkits/productivity/confluence) [![Discord logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fdiscord.png&w=96&q=75)\\
\\
Discord\\
\\
Auth Integration\\
\\
Manage Discord servers, channels, and more with your agents](https://docs.arcade.dev/toolkits/social-communication/discord) [![Jira logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fatlassian.png&w=96&q=75)\\
\\
Jira\\
\\
Auth Integration\\
\\
Manage Jira projects, issues, and more with your agents](https://docs.arcade.dev/toolkits/productivity/jira) [![Obsidian logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fobsidian.png&w=96&q=75)\\
\\
Obsidian\\
\\
Community Toolkit\\
\\
Create, edit, and manage Obsidian notes](https://docs.arcade.dev/toolkits/productivity/obsidian) [![Twitch logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Ftwitch.png&w=96&q=75)\\
\\
Twitch\\
\\
Auth Integration\\
\\
Create clips, get videos, and more from Twitch with your agents](https://docs.arcade.dev/toolkits/entertainment/twitch)

![ADP Workforce Now logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fadp.png&w=96&q=75)

ADP Workforce Now

Arcade Toolkit

Coming Soon

Manage payroll, HR, and workforce data with your agents.

![Aha logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Faha.png&w=96&q=75)

Aha

Arcade Toolkit

Coming Soon

Manage product roadmaps and strategy with your agents.

AI

Airtable

Arcade Toolkit

Coming Soon

Create, edit, and manage Airtable bases with your agents.

![Amplitude logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Famplitude.png&w=96&q=75)

Amplitude

Arcade Toolkit

Coming Soon

Analyze user behavior and product analytics with your agents.

AS

Asana

Arcade Toolkit

Coming Soon

Manage projects, tasks, and more in Asana with your agents.

![Ashby logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fashby.png&w=96&q=75)

Ashby

Arcade Toolkit

Coming Soon

Manage recruiting and hiring processes with your agents.

AU

Auth0

Arcade Toolkit

Coming Soon

Manage authentication and authorization with your agents.

![BambooHR logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbamboohr.png&w=96&q=75)

BambooHR

Arcade Toolkit

Coming Soon

Manage employee data and HR processes with your agents.

![Basecamp logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbasecamp.png&w=96&q=75)

Basecamp

Arcade Toolkit

Coming Soon

Manage projects, tasks, and team communication with your agents.

![Bill.com logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbill.png&w=96&q=75)

Bill.com

Arcade Toolkit

Coming Soon

Manage invoices and payments with your agents.

![Bitbucket logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbitbucket.png&w=96&q=75)

Bitbucket

Arcade Toolkit

Coming Soon

Manage repositories, pull requests, and pipelines with your agents.

BL

Bluesky

Arcade Toolkit

Coming Soon

Interact with Bluesky with your agents.

BO

Box

Arcade Toolkit

Coming Soon

Manage files and folders in Box with your agents.

![Braze logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbraze.png&w=96&q=75)

Braze

Arcade Toolkit

Coming Soon

Manage customer engagement campaigns with your agents.

![Brex logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbrex.png&w=96&q=75)

Brex

Arcade Toolkit

Coming Soon

Manage business expenses and cards with your agents.

![Buffer logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fbuffer.png&w=96&q=75)

Buffer

Arcade Toolkit

Coming Soon

Schedule and manage social media posts with your agents.

CA

Calendly

Arcade Toolkit

Coming Soon

Manage scheduling and appointments with your agents.

CL

ClickUp

Arcade Toolkit

Coming Soon

Manage projects, tasks, and documents with your agents.

CO

Coinbase

Arcade Toolkit

Coming Soon

Manage cryptocurrency transactions and wallets with your agents.

DA

Datadog

Arcade Toolkit

Coming Soon

Monitor applications and infrastructure with your agents.

![DigitalOcean logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fdigitalocean.png&w=96&q=75)

DigitalOcean

Arcade Toolkit

Coming Soon

Manage cloud servers and infrastructure with your agents.

EB

eBay

Arcade Toolkit

Coming Soon

Manage listings, orders, and inventory on eBay with your agents.

![Evernote logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fevernote.png&w=96&q=75)

Evernote

Arcade Toolkit

Coming Soon

Create and manage notes with your agents.

![Factorial logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Ffactorial.png&w=96&q=75)

Factorial

Arcade Toolkit

Coming Soon

Manage HR processes and employee data with your agents.

FI

Figma

Arcade Toolkit

Coming Soon

Access design files and collaborate on designs with your agents.

GI

GitLab

Arcade Toolkit

Coming Soon

Manage repositories, issues, and merge requests with your agents.

HE

Heroku

Arcade Toolkit

Coming Soon

Deploy and manage applications on Heroku with your agents.

![Hootsuite logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fhootsuite.png&w=96&q=75)

Hootsuite

Arcade Toolkit

Coming Soon

Manage and schedule social media content with your agents.

![Intercom logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fintercom.png&w=96&q=75)

Intercom

Arcade Toolkit

Coming Soon

Manage customer communications and support with your agents.

LI

Linear

Arcade Toolkit

Coming Soon

Manage issues and projects with your agents.

![Mailchimp logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fmailchimp.png&w=96&q=75)

Mailchimp

Arcade Toolkit

Coming Soon

Manage email campaigns and subscribers with your agents.

![Microsoft Dynamics logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fmsft.png&w=96&q=75)

Microsoft Dynamics

Arcade Toolkit

Coming Soon

Manage CRM and ERP processes with your agents.

MI

Miro

Arcade Toolkit

Coming Soon

Create and collaborate on visual boards with your agents.

![Model Context Protocol (MCP) logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fmcp.png&w=96&q=75)

Model Context Protocol (MCP)

Arcade Toolkit

Coming Soon

Manage context and improve AI interactions with your agents.

![Monday logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fmonday.png&w=96&q=75)

Monday

Arcade Toolkit

Coming Soon

Manage projects and workflows with your agents.

NE

Netsuite

Arcade Toolkit

Coming Soon

Manage financial and business operations with your agents.

![Okta logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fokta.png&w=96&q=75)

Okta

Arcade Toolkit

Coming Soon

Manage identity and access with your agents.

![OneDrive logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fmsft.png&w=96&q=75)

OneDrive

Arcade Toolkit

Coming Soon

Manage OneDrive files and folders with your agents

![Outlook Calendar logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fmsft.png&w=96&q=75)

Outlook Calendar

Arcade Toolkit

Coming Soon

Manage Outlook calendar with your agents

![Pinecone logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fpinecone.png&w=96&q=75)

Pinecone

Arcade Toolkit

Coming Soon

Manage vector databases and similarity search with your agents.

PI

Pinterest

Arcade Toolkit

Coming Soon

Create and manage pins and boards with your agents.

![Pipedrive logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fpipedrive.png&w=96&q=75)

Pipedrive

Arcade Toolkit

Coming Soon

Manage sales pipelines and leads with your agents.

![Plaid logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fplaid.png&w=96&q=75)

Plaid

Arcade Toolkit

Coming Soon

Connect with financial accounts and manage financial data with your agents.

![QuickBooks logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fquickbooks.png&w=96&q=75)

QuickBooks

Arcade Toolkit

Coming Soon

Manage accounting and finances with your agents.

SA

Salesforce

Arcade Toolkit

Coming Soon

Manage customer relationships and sales with your agents.

SH

Shopify

Arcade Toolkit

Coming Soon

Manage e-commerce stores and products with your agents.

![SingleStore logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fsinglestore.png&w=96&q=75)

SingleStore

Arcade Toolkit

Coming Soon

Manage databases and data operations with your agents.

![Snowflake logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fsnowflake.png&w=96&q=75)

Snowflake

Arcade Toolkit

Coming Soon

Manage data warehouses and analytics with your agents.

![Splunk logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fsplunk.png&w=96&q=75)

Splunk

Arcade Toolkit

Coming Soon

Monitor and analyze machine data with your agents.

![Square logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fsquare.png&w=96&q=75)

Square

Arcade Toolkit

Coming Soon

Process payments and manage business operations with your agents.

![Squarespace logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fsquarespace.png&w=96&q=75)

Squarespace

Arcade Toolkit

Coming Soon

Manage websites and online presence with your agents.

TI

TikTok

Arcade Toolkit

Coming Soon

Create and manage TikTok content with your agents.

![Trello logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Ftrello.png&w=96&q=75)

Trello

Arcade Toolkit

Coming Soon

Manage boards, cards, and lists with your agents.

VE

Vercel

Arcade Toolkit

Coming Soon

Deploy and manage web applications with your agents.

![Weaviate logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fweaviate.png&w=96&q=75)

Weaviate

Arcade Toolkit

Coming Soon

Manage vector databases and semantic search with your agents.

![Workday logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fworkday.png&w=96&q=75)

Workday

Arcade Toolkit

Coming Soon

Manage HR, finance, and planning with your agents.

![Wrike logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fwrike.png&w=96&q=75)

Wrike

Arcade Toolkit

Coming Soon

Manage projects and collaborate with your agents.

XE

Xero

Arcade Toolkit

Coming Soon

Manage accounting and finances with your agents.

![Zendesk logo](https://docs.arcade.dev/_next/image?url=%2Fimages%2Ficons%2Fzendesk.png&w=96&q=75)

Zendesk

Arcade Toolkit

Coming Soon

Manage customer support and service with your agents.

[Calendar](https://docs.arcade.dev/toolkits/productivity/google/calendar "Calendar")

## Arcade Quickstart Guide
[Home](https://docs.arcade.dev/home "Home") Quickstart

# Let’s get started with Arcade

Arcade allows LLMs to call tools on behalf of users while taking care of the authorization flow using OAuth 2.0 or API key authentication.

An example of a tool is `Google.SendEmail`. With Arcade, a user interacting with an LLM in a chat interface could ask:

> send an email to [john@example.com](mailto:john@example.com) with the subject “Meeting” and the body “Let’s meet at 3pm tomorrow”

Our [tool catalog](https://docs.arcade.dev/toolkits) covers multiple services, such as Slack, Notion, X, Dropbox, GitHub, Drive, Calendar, and many more.

In the example above, the user may have previously analyzed a set of pages from Notion, for example. After chatting with the LLM, they would send an email to a colleague summarizing the analysis. All of our digital life can now be integrated with the reasoning power of LLMs. Arcade enables developers to easily integrate that power into any application, workflow, or AI Agent.

You can skim through the code below to see how it works. In order to run it, you’ll need to:

## Prerequisites [Permalink for this section](https://docs.arcade.dev/home/quickstart\#prerequisites)

1. Create an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=quickstart)
2. Get an [Arcade API key](https://docs.arcade.dev/home/api-keys) and take note, you’ll need it in the next steps.

## Install the OpenAI SDK: [Permalink for this section](https://docs.arcade.dev/home/quickstart\#install-the-openai-sdk)

PythonJavaScriptOther languages

```nextra-code
pip install openai arcadepy
```

```nextra-code
npm install openai
```

You can find the installation instructions for other languages in the [OpenAI libraries documentation](https://platform.openai.com/docs/libraries).

In the next steps, we will present Python and JavaScript examples. If you need any assistance implementing it in your preferred language, please [contact our engineering team](https://docs.arcade.dev/home/contact-us).

## Implement the tool call [Permalink for this section](https://docs.arcade.dev/home/quickstart\#implement-the-tool-call)

Create a new file, open it with your preferred editor and enter the code indicated in the next steps.

PythonJavaScript

```nextra-code
touch example_openai.py
```

```nextra-code
touch example_openai.js
```

Next we’ll edit that file and add some code. Open the file you just created in your preferred editor and add the following code:

PythonJavaScript

```nextra-code
# Import the OpenAI client
from openai import OpenAI

# Replace these values with your own:
ARCADE_API_KEY = "MY_ARCADE_API_KEY"  # Your Arcade API key from the previous step
RECIPIENT_EMAIL = "FRIEND@EMAIL.COM"  # The email address where you want to send the email
YOUR_EMAIL = "YOUR@EMAIL.COM"  # Your email address (used for authorization)

# Instantiate the OpenAI client pointing to Arcade's endpoint
client = OpenAI(base_url="https://api.arcade.dev/v1", api_key=ARCADE_API_KEY)

# Define the parameters for the request
prompt = f"""Send an email to {RECIPIENT_EMAIL} with the subject 'Arcade.dev' and the body
'I'm trying out Arcade.dev and it's awesome! You should check it out too:
https://api.arcade.dev/signup'"""
tools = ["Google.SendEmail"]  # The tools available to use for the request
model = "gpt-4o"
user_id = YOUR_EMAIL  # Identifies the user for Arcade to auth with

# Send the request to the LLM via Arcade's Gateway
response = client.chat.completions.create(
    model=model,
    messages=[{"role": "user", "content": prompt}],
    tools=tools,
    tool_choice="generate",  # Instructs Arcade to use its tools
    user=user_id,
)

# Print the response from the LLM
print(response.choices[0].message.content)
```

```nextra-code
// Import the OpenAI client
import { OpenAI } from "openai";

// Replace these values with your own:
const ARCADE_API_KEY = "MY_ARCADE_API_KEY"; // Your Arcade API key from the previous step
const RECIPIENT_EMAIL = "FRIEND@EMAIL.COM"; // The email address where you want to send the email
const YOUR_EMAIL = "YOUR@EMAIL.COM"; // Your email address (used for authorization)

// Instantiate the OpenAI client pointing to Arcade's endpoint
const client = new OpenAI({
  baseURL: "https://api.arcade.dev/v1",
  apiKey: ARCADE_API_KEY,
});

// Define the parameters for the request
const prompt = `Send an email to ${RECIPIENT_EMAIL} with the subject 'Arcade.dev' and the body
'I'm trying out Arcade.dev and it's awesome! You should check it out too:
https://api.arcade.dev/signup'`;
const tools = ["Google.SendEmail"]; // The tools available to use for the request
const model = "gpt-4o";
const user_id = YOUR_EMAIL; // Identifies the user for Arcade to auth with

// Send the request to the LLM via Arcade's Gateway
const response = await client.chat.completions.create({
  model: model,
  messages: [{ role: "user", content: prompt }],
  tools: tools,
  tool_choice: "generate", // Instructs Arcade to use its tools
  user: user_id,
});

// Print the response from the LLM
console.log(response.choices[0].message.content);
```

You’ll need to replace three key values in the code:

1. `ARCADE_API_KEY` \- Your Arcade API key from the previous step
2. `RECIPIENT_EMAIL` \- The email address where you want to send the test message
3. `YOUR_EMAIL` \- Your email address (used for authorization)

Arcade’s Gmail tool will send a message from your Gmail account, which you’ll be able to see in your Sent Items.

In a real application, the `prompt` would come from your user and the `user_id` would be a unique identifier for your application’s user (could be an email address, a UUID, etc.). In this example, use your own email address.

## Execute the code [Permalink for this section](https://docs.arcade.dev/home/quickstart\#execute-the-code)

PythonJavaScript

```nextra-code
python3 example_openai.py
```

```nextra-code
node example_openai.js
```

### Authorize the tool [Permalink for this section](https://docs.arcade.dev/home/quickstart\#authorize-the-tool)

The first time you run this, you will see a URL to authorize the tool to send the message on your behalf:

> `Please go to this URL and authorize the action: https://accounts.google.com/o/oauth2/v2/auth?...`

Once you’ve followed the URL and completed the authorization flow, run the script again. You should see a message like this:

> `The email with the subject "Arcade.dev" has been sent to friend@email.com.`

## Next steps [Permalink for this section](https://docs.arcade.dev/home/quickstart\#next-steps)

[Learn more about tools](https://docs.arcade.dev/home/use-tools/tools-overview) and how they work. Or follow other examples listed below:

- **Choosing among multiple tools**: In the example we followed above, only a single tool was used: `Google.SendEmail`. Check out [this guide](https://docs.arcade.dev/home/use-tools/call-tools-with-models) where we provide multiple tools for the LLM to choose from. It also features a simple multi-turn conversation loop.
- **Call tools directly, without LLM involvement**: In some cases, you may want full control of which tool is called and how. Check the [Call Tools Directly](https://docs.arcade.dev/home/use-tools/call-tools-directly) guide to learn how to call tools directly.
- **Create your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit)** to fit any specific use case needed in your application, workflow, or AI Agent.

[Contact us](https://docs.arcade.dev/home/contact-us "[object Object]") [Get an API key](https://docs.arcade.dev/home/api-keys "Get an API key")

## Model Providers Overview
[Home](https://docs.arcade.dev/home "Home") Model ProvidersOverview

# Model Providers

The following are the model providers available when using the Arcade Model API.

[![OpenAI logo](https://docs.arcade.dev/images/icons/openai.png)\\
\\
**OpenAI**\\
\\
**Language Model** \\
\\
Use OpenAI models with Arcade tools](https://docs.arcade.dev/home/supported-models/openai) [![Anthropic logo](https://docs.arcade.dev/images/icons/anthropic.png)\\
\\
**Anthropic**\\
\\
**Language Model** \\
\\
Use Anthropic models with Arcade tools](https://docs.arcade.dev/home/supported-models/anthropic) [![Ollama logo](https://docs.arcade.dev/images/icons/ollama.png)\\
\\
**Ollama**\\
\\
**Language Model** \\
\\
Use Ollama models with Arcade tools](https://docs.arcade.dev/home/supported-models/ollama) [![Groq logo](https://docs.arcade.dev/images/icons/groq.png)\\
\\
**Groq**\\
\\
**Language Model** \\
\\
Use Groq models with Arcade tools](https://docs.arcade.dev/home/supported-models/groq)

[Configuration Templates](https://docs.arcade.dev/home/configure/templates "Configuration Templates") [Anthropic](https://docs.arcade.dev/home/supported-models/anthropic "Anthropic")

## Contact Arcade Support
# Contact Us

We’re here to help you succeed with Arcade! Choose the support channel that best fits your needs.

### Discord Discord Community [Permalink for this section](https://docs.arcade.dev/home/contact-us\#-discord-community)

Our active Discord community is the fastest way to get help:

- Get real-time assistance from the Arcade team
- Connect with fellow developers
- Stay updated on latest features

[Join our Discord Server →](https://discord.gg/GUZEMpEZ9p)

### GitHub GitHub Issues [Permalink for this section](https://docs.arcade.dev/home/contact-us\#-github-issues)

For technical issues, feature requests, and contributions:

- Report bugs with detailed reproduction steps
- Request new features and enhancements
- Contribute to documentation improvements

[Open a GitHub Issue →](https://github.com/ArcadeAI/arcade-ai/issues/new/choose)

### Resources [Permalink for this section](https://docs.arcade.dev/home/contact-us\#-resources)

Before reaching out, you might find your answer in our resources:

- [Documentation](https://docs.arcade.dev/) \- Comprehensive guides and API references
- [Blog](https://blog.arcade.dev/) \- Latest updates and technical articles
- [Examples](https://github.com/ArcadeAI/arcade-ai/tree/main/examples) \- Examples and guides for using arcade-ai

### Email [Permalink for this section](https://docs.arcade.dev/home/contact-us\#-email)

For general inquiries and support:

- [Contact us via email](mailto:support@arcade.dev)

Email responses are not guaranteed within a specific timeframe. For faster assistance, we recommend joining our Discord community.

## Auth Providers Overview
[Home](https://docs.arcade.dev/home "Home") Auth ProvidersOverview

# Auth Providers

Auth providers enable users to seamlessly and securely allow Arcade tools to access their data.

[![Atlassian logo](https://docs.arcade.dev/images/icons/atlassian.png)\\
\\
**Atlassian**\\
\\
**Auth** \\
\\
Authorize tools and agents with Atlassian](https://docs.arcade.dev/home/auth-providers/atlassian) [![Discord logo](https://docs.arcade.dev/images/icons/discord.png)\\
\\
**Discord**\\
\\
**Auth** \\
\\
Authorize tools and agents with Discord in a user's context](https://docs.arcade.dev/home/auth-providers/discord) [![Dropbox logo](https://docs.arcade.dev/images/icons/dropbox.png)\\
\\
**Dropbox**\\
\\
**Auth** \\
\\
Authorize tools and agents with Dropbox in a user's context](https://docs.arcade.dev/home/auth-providers/dropbox) [![GitHub logo](https://docs.arcade.dev/images/icons/github.png)\\
\\
**GitHub**\\
\\
**Auth** \\
\\
Authorize tools and agents with GitHub, including private repositories](https://docs.arcade.dev/home/auth-providers/github) [![Google logo](https://docs.arcade.dev/images/icons/google.png)\\
\\
**Google**\\
\\
**Auth** \\
\\
Authorize tools and agents with Google: Gmail, Calendar, YouTube, Drive, and more](https://docs.arcade.dev/home/auth-providers/google) [![LinkedIn logo](https://docs.arcade.dev/images/icons/linkedin.png)\\
\\
**LinkedIn**\\
\\
**Auth** \\
\\
Authorize tools and agents with LinkedIn](https://docs.arcade.dev/home/auth-providers/linkedin) [![Microsoft logo](https://docs.arcade.dev/images/icons/msft.png)\\
\\
**Microsoft**\\
\\
**Auth** \\
\\
Authorize tools and agents with Microsoft Graph](https://docs.arcade.dev/home/auth-providers/microsoft) [![Notion logo](https://docs.arcade.dev/images/icons/notion.png)\\
\\
**Notion**\\
\\
**Auth** \\
\\
Authorize tools and agents with Notion](https://docs.arcade.dev/home/auth-providers/notion) [![Reddit logo](https://docs.arcade.dev/images/icons/reddit.png)\\
\\
**Reddit**\\
\\
**Auth** \\
\\
Authorize tools and agents with Reddit](https://docs.arcade.dev/home/auth-providers/reddit) [![Slack logo](https://docs.arcade.dev/images/icons/slack.png)\\
\\
**Slack**\\
\\
**Auth** \\
\\
Authorize tools and agents with Slack](https://docs.arcade.dev/home/auth-providers/slack) [![Spotify logo](https://docs.arcade.dev/images/icons/spotify.png)\\
\\
**Spotify**\\
\\
**Auth** \\
\\
Authorize tools and agents with Spotify](https://docs.arcade.dev/home/auth-providers/spotify) [![Twitch logo](https://docs.arcade.dev/images/icons/twitch.png)\\
\\
**Twitch**\\
\\
**Auth** \\
\\
Authorize tools and agents with Twitch](https://docs.arcade.dev/home/auth-providers/twitch) [![X logo](https://docs.arcade.dev/images/icons/twitter.png)\\
\\
**X**\\
\\
**Auth** \\
\\
Authorize tools and agents with X (Twitter)](https://docs.arcade.dev/home/auth-providers/x) [![Zoom logo](https://docs.arcade.dev/images/icons/zoom_fav.svg)\\
\\
**Zoom**\\
\\
**Auth** \\
\\
Authorize tools and agents with Zoom](https://docs.arcade.dev/home/auth-providers/zoom) [![OAuth 2.0 logo](https://docs.arcade.dev/images/icons/oauth2.png)\\
\\
**OAuth 2.0**\\
\\
**Auth** \\
\\
Authorize tools and agents with any OAuth 2.0-compatible provider](https://docs.arcade.dev/home/auth-providers/oauth2)

If the auth provider you need is not listed, try the [OAuth 2.0](https://docs.arcade.dev/home/auth-providers/oauth2) provider, or [get in touch](mailto:contact@arcade.dev) with us!

[OpenAI](https://docs.arcade.dev/home/supported-models/openai "OpenAI") [Atlassian](https://docs.arcade.dev/home/auth-providers/atlassian "Atlassian")

## Close.io Productivity
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Close.io

# Close.io

Coming Soon

[Dropbox](https://docs.arcade.dev/toolkits/productivity/dropbox "Dropbox") [Notion](https://docs.arcade.dev/toolkits/productivity/notion "Notion")

## API Key Management
[Home](https://docs.arcade.dev/home "Home") Get an API key

# Getting Your API Key

Before you begin, you’ll need an Arcade account - if you haven’t created one yet, you can [sign up here](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=get-api-key). Once you have an account, you can generate API keys through either our dashboard or CLI.

DashboardCLI

### Using the Dashboard

### Navigate to API Keys page [Permalink for this section](https://docs.arcade.dev/home/api-keys\#navigate-to-api-keys-page)

Visit the [API Keys page](https://api.arcade.dev/dashboard/api-keys) in Arcade Dashboard.

### Create a new API key [Permalink for this section](https://docs.arcade.dev/home/api-keys\#create-a-new-api-key)

1. Click the `Create API Key` button in the top right
2. Enter a descriptive name to help identify your key
3. Click `Create API Key` to generate your key

### Save your API key securely [Permalink for this section](https://docs.arcade.dev/home/api-keys\#save-your-api-key-securely)

1. Copy your API key immediately - it will only be shown once
2. Store it securely
3. You can always generate new keys if needed

### Using the CLI

### Install and login [Permalink for this section](https://docs.arcade.dev/home/api-keys\#install-and-login)

1. Install the Arcade CLI:

```nextra-code
pip install arcade-ai
```

2. Start the login process:

```nextra-code
arcade login
```

### Complete setup [Permalink for this section](https://docs.arcade.dev/home/api-keys\#complete-setup)

The CLI will automatically:

- Print your API key to the console
- Save your credentials to `~/.arcade/credentials.yaml`

API keys are administrator credentials. Anyone who has your API key can make requests to Arcade as you. Always store your API keys in a safe place, such as system environment variables, and never commit them to version control, share them publicly, or use them in browser or frontend code.

## Next Steps [Permalink for this section](https://docs.arcade.dev/home/api-keys\#next-steps)

Once you have your API key, you can:

- [Start using tools](https://docs.arcade.dev/home/use-tools/call-tools-directly)
- [Call tools with LLMs](https://docs.arcade.dev/home/use-tools/call-tools-with-models)
- [Create custom tools](https://docs.arcade.dev/home/custom-tools)

[Quickstart](https://docs.arcade.dev/home/quickstart "Quickstart") [Introduction](https://docs.arcade.dev/home/use-tools/tools-overview "Introduction")

## Arcade Deploy Guide
[Home](https://docs.arcade.dev/home "Home") [Configure](https://docs.arcade.dev/home/configure/overview "Configure") Arcade Deploy

# Configuring Arcade Deploy

The `arcade deploy` command deploys your worker to the cloud.

## Requirements [Permalink for this section](https://docs.arcade.dev/home/configure/arcade-deploy\#requirements)

- **Python 3.10** or higher

Verify your Python version by running `python --version` or `python3 --version` in your terminal.
- **Arcade Account**: Sign up for an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=custom-tools) if you haven’t already.
- **Arcade CLI**: Install the Arcade CLI with `pip install arcade-ai`.

## Deployment Config [Permalink for this section](https://docs.arcade.dev/home/configure/arcade-deploy\#deployment-config)

The `worker.toml` file is used to configure your worker. Running `arcade deploy` will use the `worker.toml` file in the current directory or you can
specify a different file with the `-d` flag.

Running `arcade new` will automatically create an example `worker.toml` file for the created toolkit.

```nextra-code
# worker.toml

# Arcade Deploy supports configuring multiple workers in a single file.
# Configurations below each [[worker]] block will be deployed as a separate worker.
[[worker]]

# (Required) The worker configuration
[worker.config]

# (Required) The unique identifier for the worker.
id = "my-example-worker"
# (Optional) Whether the worker is enabled.
enabled = true
# (Optional) The timeout for the worker for requests to the worker.
timeout = 30
# (Optional) The number of times to retry a connection to the worker before giving up.
retries = 3
# (Required) The secret for the worker.
# The default "dev" secret or empty string is not allowed.
secret = <your secret>

# (Optional) Localy packages to deploy with the worker.
# You can specify a list of directories that contain a toolkit.
# The directory must contain a pyproject.toml file or a setup.py file.
[worker.local_source]
packages = [ "./my_toolkit1", "./my_toolkit2"]

# (Optional) Pypi packages to install for the worker.
[worker.pypi_source]
packages = [ "arcade-math", "my-pypi-package"]
```

## Secrets [Permalink for this section](https://docs.arcade.dev/home/configure/arcade-deploy\#secrets)

You can use a secret from the environment to configure the worker with the `${env: MY_SECRET}` syntax.

```nextra-code
[[worker]]

[worker.config]
secret = "${env: MY_ENVIRONMENT_SECRET}"
```

## Using with a local engine [Permalink for this section](https://docs.arcade.dev/home/configure/arcade-deploy\#using-with-a-local-engine)

To register the worker with your local engine, you can use the host and port flags.

```nextra-code
arcade deploy -h localhost -p 9099 --no-tls
```

## Logs [Permalink for this section](https://docs.arcade.dev/home/configure/arcade-deploy\#logs)

To see the logs for the worker, you can use the `arcade logs` command.

```nextra-code
arcade logs my-example-worker
```

[Overview](https://docs.arcade.dev/home/configure/overview "Overview") [Engine](https://docs.arcade.dev/home/configure/engine "Engine")

## OAuth 2.0 Integration
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") OAuth 2.0

# OAuth 2.0 auth provider

The OAuth 2.0 auth provider enables tools and agents to authorize with any OAuth 2.0-compatible API on behalf of a user. Behind the scenes, the Arcade Engine and this auth provider seamlessly manage OAuth 2.0 authorization for your users.

Arcade has [pre-built integrations](https://docs.arcade.dev/home/auth-providers) with many popular
OAuth 2.0 providers. Use this OAuth 2.0 provider to connect to other systems
that aren’t pre-built.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#whats-documented-here)

This page describes how to configure OAuth 2.0 with Arcade, and use it in:

- Your [app code](https://docs.arcade.dev/home/auth-providers/oauth2#using-oauth-20-in-app-code) that needs to call APIs protected by OAuth 2.0
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/oauth2#using-oauth-20-in-custom-tools) that need to call APIs protected by OAuth 2.0

### Supported OAuth 2.0 flows [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#supported-oauth-20-flows)

The only supported OAuth 2.0 flow is the authorization code grant flow (with or without PKCE).

## Configuring OAuth 2.0 [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#configuring-oauth-20)

How you configure the OAuth 2.0 provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview). If you use the Cloud Engine, you must configure your provider in the Dashboard.

When configuring your app in the OAuth 2.0 enabled service, you must use `https://cloud.arcade.dev/api/v1/oauth/callback` as the redirect URL (sometimes called callback URL).

### Using the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#using-the-arcade-dashboard)

When using the Arcade Cloud, the Dashboard is available at [`https://api.arcade.dev/dashboard`](https://api.arcade.dev/dashboard). If you are [self-hosting Arcade](https://docs.arcade.dev/home/install/overview), by default the Dashboard is available at [`http://localhost:9099/dashboard`](http://localhost:9099/dashboard). Adjust the host and port, if necessary, to match your environment.

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **OAuth 2.0** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-oauth2-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your OAuth 2.0 provider.
5. Click **Save**.

When you use tools that require OAuth 2.0 authorization using your Arcade account credentials, the Arcade Engine will automatically use this OAuth 2.0 provider.

### Using the `engine.yaml` configuration file [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#using-the-engineyaml-configuration-file)

This method is only available when you are [self-hosting the engine](https://docs.arcade.dev/home/install/overview)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#set-environment-variables)

Set the following environment variables. Replace `HOOLI` with the name of the OAuth 2.0 provider you are configuring:

```nextra-code
export HOOLI_CLIENT_ID="<your client ID>"
export HOOLI_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
HOOLI_CLIENT_ID="<your client ID>"
HOOLI_CLIENT_SECRET="<your client secret>"
```

See [configuration](https://docs.arcade.dev/home/configure/engine) for more information on how to set
environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#edit-the-engine-configuration)

To locate the `engine.yaml` file in your OS after installing the Arcade Engine, check the [Engine configuration file](https://docs.arcade.dev/home/configure/overview#engine-configuration-file) documentation.

Edit the `engine.yaml` file and add a new item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-github
      description: The default GitHub provider
      enabled: true
      type: oauth2
      provider_id: github
      client_id: ${env:GITHUB_CLIENT_ID}
      client_secret: ${env:GITHUB_CLIENT_SECRET}

    - id: hooli
      description: Hooli OAuth 2.0 provider
      enabled: true
      type: oauth2
      client_id: ${env:HOOLI_CLIENT_ID}
      client_secret: ${env:HOOLI_CLIENT_SECRET}
      oauth2:
        # For a custom OAuth 2.0 provider, specify the full OAuth configuration:
```

The ID of the provider ( `hooli` in this example) can be any string. It’s used to reference the provider in your app code and must be unique.

Each service expects a slightly different set of values in the `oauth2` section. Refer to the configuration reference below, and to your service’s documentation to understand what values are required.

If you need help configuring a specific provider, [get in touch with\\
us](mailto:contact@arcade.dev)!

### Configuration reference [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#configuration-reference)

For a full example, see the [full configuration example](https://docs.arcade.dev/home/auth-providers/oauth2#full-configuration-example) below.

`scope_delimiter` _(optional, defaults to the space character)_: The delimiter to use between scopes.

`pkce` _(optional)_:

- `enabled` _(optional, default `false`)_: If `true`, PKCE will be used.
- `code_challenge_method` _(optional, default `S256`)_: The code challenge method to use. The only supported method is `S256`. This parameter is ignored if PKCE is not enabled.

#### `authorize_request` [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#authorize_request)

This section configures the initial authorization request.

- `endpoint`: The authorization endpoint for your OAuth 2.0 server, e.g. `/oauth2/authorize`
- `params`: A map of parameter keys and values to include in the authorization request.

These placeholders are available in `params`:

- `{{client_id}}`: The configured client ID.
- `{{redirect_uri}}`: The redirect URI managed by Arcade.
- `{{scopes}}`: The scopes to request, if any
- `{{existing_scopes}}`: The scopes that the user has already granted, if any.

The `state` parameter is automatically added to the request, and does not need
to be included in `params`. If PKCE is enabled, `code_challenge` and
`code_challenge_method` are also added automatically.

For most providers, `oauth2.authorize_request` will look like:

```nextra-code
authorize_request:
  endpoint: 'https://example.com/oauth2/authorize'
  params:
    response_type: code
    client_id: '{{client_id}}'
    redirect_uri: '{{redirect_uri}}'
    scope: '{{scopes}} {{existing_scopes}}'
```

Some providers support additional parameters in the authorization request. These can be added to `params` as well. For example:

```nextra-code
authorize_request:
  endpoint: 'https://example.com/oauth2/authorize'
  params:
    response_type: code
    client_id: '{{client_id}}'
    redirect_uri: '{{redirect_uri}}'
    scope: '{{scopes}} {{existing_scopes}}'
    prompt: consent
    access_type: offline
```

#### `token_request` [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#token_request)

This section configures the code/token exchange request, after the user has approved access to your app.

- `endpoint`: The token endpoint for your OAuth 2.0 server, e.g. `/oauth2/token`
- `auth_method` _(optional, default none)_: The authentication method to use. Supported values are none (omitted) and `client_secret_basic`.
- `params`: A map of parameter keys and values to include in the token request.

These placeholders are available in `params`:

- `{{client_id}}`: The configured client ID.
- `{{client_secret}}`: The configured client secret.
- `{{redirect_uri}}`: The redirect URI managed by Arcade.

The `code` parameter is automatically added to the request, and does not need
to be included in `params`. If PKCE is enabled, the `code_verifier` parameter
is also added to the request automatically.

For most providers, `oauth2.token_request.params` will look like:

```nextra-code
token_request:
  endpoint: 'https://example.com/oauth2/token'
  params:
    grant_type: authorization_code
    redirect_uri: '{{redirect_uri}}'
    client_id: '{{client_id}}'
    client_secret: '{{client_secret}}' # Omit if using PKCE
```

- `response_content_type` _(optional, default `application/json`)_: The expected content type of the response. Supported values are `application/json` and `application/x-www-form-urlencoded`.
- `response_map` _(optional)_: A map of keys and values to extract from the response. Supports simple JSONPath expressions. Only applicable if `response_content_type` is `application/json`. See the [JSONPath reference](https://docs.arcade.dev/home/auth-providers/oauth2#jsonpath-expressions-in-response_map) for details on extracting values using JSONPath.

#### `refresh_request` [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#refresh_request)

This section configures the refresh token request, if your OAuth 2.0 server supports refresh tokens. If not provided, refresh tokens will not be used.

- `endpoint`: The refresh token endpoint for your OAuth 2.0 server, e.g. `/oauth2/token`
- `auth_method` _(optional, default none)_: The authentication method to use. Supported values are none (omitted), `client_secret_basic`, and `bearer_access_token`.
- `params`: A map of parameter keys and values to include in the refresh token request.

These placeholders are available in `params`:

- `{{refresh_token}}`: The refresh token to use.
- `{{client_id}}`: The configured client ID.
- `{{client_secret}}`: The configured client secret.

For most providers, `oauth2.refresh_request.params` will look like:

```nextra-code
refresh_request:
  endpoint: 'https://example.com/oauth2/token'
  params:
    grant_type: refresh_token
    client_id: '{{client_id}}'
    client_secret: '{{client_secret}}'
```

- `response_content_type` _(optional, default `application/json`)_: The expected content type of the response. Supported values are `application/json` and `application/x-www-form-urlencoded`.
- `response_map` _(optional)_: A map of keys and values to extract from the response. Supports simple JSONPath expressions. Only applicable if `response_content_type` is `application/json`. See the [JSONPath reference](https://docs.arcade.dev/home/auth-providers/oauth2#jsonpath-expressions-in-response_map) for details on extracting values using JSONPath.

#### `user_info_request` [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#user_info_request)

Some OAuth 2.0 APIs provide a user info endpoint that returns information about the user. Arcade Engine can automatically request user info from servers that support it. If the `user_info_request` section is omitted, user info will not be requested.

- `endpoint`: The user info endpoint for your OAuth 2.0 server, e.g. `/oauth2/userinfo`
- `auth_method` _(optional, default `bearer_access_token`)_: The authentication method to use. The only supported value is `bearer_access_token`.
- `response_content_type` _(optional, default `application/json`)_: The expected content type of the response. The only supported value is `application/json`.
- `triggers`: Controls when the user info request is made.
  - `on_token_grant`: If `true`, the user info request will be made when a token is granted. This is typically only once for each user, unless new scopes are granted.
  - `on_token_refresh`: If `true`, the user info request will be made every time a token is refreshed.

#### `token_introspection_request` [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#token_introspection_request)

Some OAuth 2.0 APIs provide a token introspection endpoint that can be used to check the validity of a token and retrieve additional information such as token expiration time.

An example of a token introspection request configuration:

```nextra-code
auth:
  providers:
    - id: custom-provider
      description: "Custom provider"
      enabled: true
      type: oauth2
      client_id: ${env:CUSTOM_CLIENT_ID}
      client_secret: ${env:CUSTOM_CLIENT_SECRET}
      oauth2:
        token_introspection_request:
          enabled: true
          endpoint: 'https://example.oauth.com/services/oauth2/introspect'
          method: POST
          params:
            token: '{{access_token}}'
          auth_method: 'client_secret_basic'
          request_content_type: application/x-www-form-urlencoded
          response_content_type: application/json
          response_map:
            expires_in: '$.exp'
            scope: '$.scope'
          expiration_format: absolute_unix_timestamp
          triggers:
            on_token_grant: true
            on_token_refresh: true
```

- `enabled` _(optional, default `false`)_: If `true`, the token introspection request will be made.
- `endpoint` _(required)_: The endpoint to use for the token introspection request.
- `method` _(optional, default `GET`)_: The HTTP method to use for the token introspection request.
- `params` _(optional)_: A map of parameter keys and values to include in the token introspection request. Currently, only mapping a field to the internal `access_token` field is supported.
- `auth_method` _(optional, default `client_secret_basic`)_: The authentication method to use for the token introspection request. Supported values are `client_secret_basic` and `bearer_access_token`.
- `request_content_type` _(optional, default `application/x-www-form-urlencoded`)_: The content type of the request body.
- `response_content_type` _(optional, default `application/json`)_: The content type of the response body.
- `response_map` _(required)_: A map of keys and values to extract from the response. Supports simple JSONPath expressions. Supported keys are `access_token`, `expires_in`, `refresh_token`, `scope`, and `token_type`.
- `expiration_format` _(optional, default `absolute_unix_timestamp`)_: The format of the expiration time. Supported values are `absolute_unix_timestamp` and `relative_seconds`.
- `triggers` _(required)_: Controls when the token introspection request is made.
  - `on_token_grant`: If `true`, the token introspection request will be made when a token is granted. This is typically only once for each user, unless new scopes are granted.
  - `on_token_refresh`: If `true`, the token introspection request will be made every time a token is refreshed.

#### JSONPath expressions in `response_map` [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#jsonpath-expressions-in-response_map)

In the `token_request` and `refresh_request` sections, you can optionally configure a `response_map`. Configuring a response map is useful if your OAuth 2.0 server returns a JSON object with nested properties, or properties with non-standard names.

The typical JSON payload that most OAuth 2.0 servers return looks like this:

```nextra-code
{
  "access_token": "...",
  "refresh_token": "...",
  "expires_in": 3600,
  "scope": "scope1 scope2"
}
```

If your server returns a payload that looks like this, you don’t need `response_map`.

But if your server returns:

```nextra-code
{
  "data": {
    "access_token": "...",
    "expires_in": 3600,
    "refresh_token": "...",
    "scope": "scope1 scope2"
  }
}
```

Then you need to configure `response_map` to extract the properties from inside the `data` object. Use [JSONPath](https://en.wikipedia.org/wiki/JSONPath) expressions to select the properties you need:

```nextra-code
token_request: # or refresh_request
  response_map:
    access_token: "$.data.access_token"
    expires_in: "$.data.expires_in"
    refresh_token: "$.data.refresh_token" # Only needed if refresh tokens are used
    scope: "$.data.scope" # Only needed if scopes are used
```

Not all OAuth 2.0 servers support refresh tokens, or use scopes. The only required properties are `access_token` and `expires_in`.

#### Handling scope arrays [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#handling-scope-arrays)

Most OAuth 2.0 servers return scopes as a delimited string, such as `scope1 scope2` or `scope1,scope2`. If your server follows this convention, configuring the top-level `scope_delimiter` property in the `oauth2` section is all you need to do.

Some OAuth 2.0 servers return an array of scopes instead of a delimited string. For example:

```nextra-code
{
  "access_token": "...",
  "expires_in": 3600,
  "scope": ["scope1", "scope2"]
}
```

In this case, you need to use the `join()` function in `response_map` to join the scopes into a delimited string:

```nextra-code
token_request:
  response_map:
    access_token: "$.access_token"
    expires_in: "$.expires_in"
    scope: "join('$.scope', ' ')"
```

`join()` takes two arguments:

- `path`: The JSONPath expression to select the array to join.
- `delimiter`: The delimiter to use between array elements. Make sure this matches the `scope_delimiter` setting in the `oauth2` section.

#### Extracting values from JWTs [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#extracting-values-from-jwts)

Some OAuth 2.0 servers return JWT tokens that contain claims you might need to extract. For example, the token might contain scopes or other information about the user. You can use the `jwt_decode()` function in `response_map` to extract values from JWT tokens:

```nextra-code
token_request:
  response_map:
    access_token: "$.access_token"
    expires_in: "$.expires_in"
    scope: "jwt_decode('$.access_token', '$.scope')"
```

`jwt_decode()` takes two arguments:

- `token_path`: The JSONPath expression to select the JWT token.
- `claim_path`: The JSONPath expression to select the claim within the decoded JWT payload.

If the claim is an array (like scopes often are), you can combine `jwt_decode()` with `join()` to extract and format the values:

```nextra-code
token_request:
  response_map:
    access_token: "$.access_token"
    expires_in: "$.expires_in"
    scope: "join(jwt_decode('$.access_token', '$.scp'), ' ')"
```

This is particularly useful when the JWT token contains scopes in an array format (like `scp: ["scope1", "scope2"]`) and you need to convert them to a space-delimited string.

You can also extract nested claims from the JWT payload using dot notation in the claim path:

```nextra-code
token_request:
  response_map:
    access_token: "$.access_token"
    expires_in: "$.expires_in"
    scope: "jwt_decode('$.access_token', '$.nested.scopes')"
```

#### Full configuration example [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#full-configuration-example)

Here’s a full example of the YAML configuration for a custom OAuth 2.0 provider:

Click to view example

## Using OAuth 2.0 in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#using-oauth-20-in-app-code)

Use the OAuth 2.0 auth provider in your own agents and AI apps to get a user token for any OAuth 2.0-compatible APIs. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get an access token:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable


user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="hooli",
    scopes=["scope1", "scope2"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# TODO: Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "hooli", [\
  "scope1",\
  "scope2",\
]);

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// TODO: Do something interesting with the token...
```

## Using OAuth 2.0 in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/oauth2\#using-oauth-20-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with any OAuth 2.0-compatible APIs.

Use the `OAuth2()` auth class to specify that a tool requires OAuth 2.0 authorization. In your tool function, `context.authorization` will be automatically populated with the following properties:

- `context.authorization.token` contains the user’s access token.
- If `oauth2.user_info_request` is configured, the user info will be fetched and placed in `context.authorization.user_info`. The data payload is specific to each provider.

```nextra-code
from typing import Annotated

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import OAuth2


@tool(
    requires_auth=OAuth2(
        provider_id="hooli",
        scopes=["scope1", "scope2"],
    )
)
async def reticulate_splines(
    context: ToolContext,
    num_splines: Annotated[int, "The number of splines to reticulate"],
):
    """Reticulate the specified number of splines."""

    # Get an access token to call an API
    token = context.authorization.token

    # Get user info (if configured and supported by the OAuth 2.0 server):
    user_id = context.authorization.user_info.get("sub")
```

[Notion](https://docs.arcade.dev/home/auth-providers/notion "Notion") [Reddit](https://docs.arcade.dev/home/auth-providers/reddit "Reddit")

## Arcade Registry Early Access
[Home](https://docs.arcade.dev/home "Home") Registry Early Access

# The Arcade Registry

The **Arcade Registry** is how agentic tool developers share their work with the world. Arcade.dev is collecting all the integrations that agents will ever need in one place - think HuggingFace or Pypi but for LLM tools. A powerful community of open source and for-profit developers building out robust and evaluated workflows is how agents can be elevated to being _truly_ useful.

![The Arcade Registry diagram](https://docs.arcade.dev/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fregistry.05f61f45.png&w=3840&q=75&dpl=dpl_D6eKaVVpjpx7cRFtYAQxfWwECDu4)

Unlike traditional read-only tool libraries, Arcade.dev couples the runtime with the registry. This way we can collect real metrics and usage information about your tools, sharing meaningful information and feedback back to the developers. You’ll get error reports and statistics about how your tools are getting used. Arcade.dev also makes it possible for developers to optionally choose to sell their tools with a markup on top of the Arcade platform fees.

Thanks to the Arcade Gateway, your toolkits will be available via all the protocols Arcade supports - be that MCP for locally-running applications, OXP for server applications, and whatever comes next. Use the open-source Arcade SDKs to future-proof your tools.

We are seeking beta testers who are interested in building, maintaining, and sharing toolkits with the world in either a free-to-use or for-profit manner. Sign up today to join the Arcade Registry Beta.

## Early Access Registry Survey

Question 1 of 617%

What is your name?

BackNext

[Zoom](https://docs.arcade.dev/home/auth-providers/zoom "Zoom")

![The Arcade Registry diagram](https://docs.arcade.dev/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fregistry.05f61f45.png&w=3840&q=75&dpl=dpl_D6eKaVVpjpx7cRFtYAQxfWwECDu4)

## Authorized Tool Calling
[Home](https://docs.arcade.dev/home "Home") [Authorization](https://docs.arcade.dev/home/auth/how-arcade-helps "Authorization") Authorized Tool Calling

# Authorized Tool Calling

Arcade provides an authorization system that handles OAuth 2.0, API keys, and user tokens needed by AI agents to access external services through tools. This means your AI agents can now act on behalf of users securely and privately.

With Arcade, developers can now create agents that can as _as the end user of their application_ to perform tasks like:

- Creating a new Zoom meeting
- Sending or reading email
- Answering questions about files in Google Drive.

Arcade also allows for actions (tools) to be authorized directly. For example, to access a user’s Gmail account, you can utilize the following guide.

### Initialize the client [Permalink for this section](https://docs.arcade.dev/home/auth/auth-tool-calling\#initialize-the-client)

Import the Arcade client in a Python/Javascript script. The client automatically finds API keys set by `arcade login`.

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade() # Automatically finds the `ARCADE_API_KEY` env variable
```

```nextra-code
import Arcade from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable
```

### Authorize a tool directly [Permalink for this section](https://docs.arcade.dev/home/auth/auth-tool-calling\#authorize-a-tool-directly)

Many tools require authorization. For example, the `Google.ListEmails` tool requires authorization with Google.

This authorization must be approved by the user. By approving, the user allows your agent or app to access only the data they’ve approved.

PythonJavaScript

```nextra-code
# As the developer, you must identify the user you're authorizing
# and pass a unique identifier for them (e.g. an email or user ID) to Arcade:
USER_ID = "you@example.com"

# Request access to the user's Gmail account
auth_response = client.tools.authorize(
  tool_name="Google.ListEmails",
  user_id=USER_ID,
)

if auth_response.status != "completed":
    print(f"Click this link to authorize: {auth_response.url}")
```

```nextra-code
// As the developer, you must identify the user you're authorizing
// and pass a unique identifier for them (e.g. an email or user ID) to Arcade:
const userId = "you@example.com";

// Request access to the user's Gmail account
const authResponse = await client.tools.authorize({
  tool_name: "Google.ListEmails",
  user_id: userId,
});

if (authResponse.status !== "completed") {
  console.log(`Click this link to authorize: ${authResponse.url}`);
}
```

This will print a URL that the user must visit to approve the authorization.

### Check for authorization status [Permalink for this section](https://docs.arcade.dev/home/auth/auth-tool-calling\#check-for-authorization-status)

You can wait for the authorization to complete using the following methods:

PythonJavaScript

```nextra-code
client.auth.wait_for_completion(auth_response)
```

```nextra-code
await client.auth.waitForCompletion(authResponse);
```

### Call the tool with authorization [Permalink for this section](https://docs.arcade.dev/home/auth/auth-tool-calling\#call-the-tool-with-authorization)

Once the user has approved the action, you can run the tool. You only need to pass the `user_id`:

PythonJavaScript

```nextra-code
emails_response = client.tools.execute(
    tool_name="Google.ListEmails",
    user_id=USER_ID,
)
print(emails_response)
```

```nextra-code
const emailsResponse = await client.tools.execute({
  tool_name: "Google.ListEmails",
  user_id: userId,
});

console.log(emailsResponse.output.value);
```

Arcade remembers the user’s authorization tokens, so you don’t have to! Next time the user runs the same tool, they won’t have to go through the authorization process again until the auth expires or is revoked.

### How it works [Permalink for this section](https://docs.arcade.dev/home/auth/auth-tool-calling\#how-it-works)

When you call a tool with `client.tools.execute()`, Arcade:

1. Checks for authorization.
2. Routes the request to the tool’s provider.
3. Returns the tool’s response.

With `client.tools.authorize()`, you can also authorize tools for later use.

These APIs give you programmatic control over tool calling. If you just want to integrate tools into a language model workflow, see [Call tools with models](https://docs.arcade.dev/home/use-tools/call-tools-with-models).

### Next steps [Permalink for this section](https://docs.arcade.dev/home/auth/auth-tool-calling\#next-steps)

Arcade also allows you to [build your own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) to integrate any custom functionality or API to your Agent or AI workflows.

Your tools can use the [service providers supported by Arcade](https://docs.arcade.dev/home/auth-providers) or you can integrate with any [OAuth2-compatible service](https://docs.arcade.dev/home/auth-providers/oauth2).

[How Arcade Helps](https://docs.arcade.dev/home/auth/how-arcade-helps "How Arcade Helps") [Direct Third-Party API Call](https://docs.arcade.dev/home/auth/call-third-party-apis-directly "Direct Third-Party API Call")

## Run Evaluations
[Home](https://docs.arcade.dev/home "Home") [Evaluate tools](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools "Evaluate tools") Run evaluations

# Run evaluations with the Arcade CLI

The Arcade Evaluation Framework allows you to run evaluations of your tool-enabled language models conveniently using the command-line interface (CLI). This enables you to execute your evaluation suites, gather results, and analyze the performance of your models in an efficient and streamlined manner.

### Using the `arcade evals` Command [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#using-the-arcade-evals-command)

To run evaluations, use the `arcade evals` command provided by the Arcade CLI. This command searches for evaluation files in the specified directory, executes any functions decorated with `@tool_eval`, and displays the results.

#### Basic Usage [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#basic-usage)

```nextra-code
arcade evals <directory>
```

- `<directory>`: The directory containing your evaluation files. By default, it searches the current directory ( `.`).

For example, to run evaluations in the current directory:

```nextra-code
arcade evals .
```

The Arcade Evaluation Framework also supports running a single evaluation file:

```nextra-code
arcade evals <eval_your_file.py>
```

#### Evaluation File Naming Convention [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#evaluation-file-naming-convention)

The `arcade evals` command looks for Python files that start with `eval_` and end with `.py` (e.g., `eval_math_tools.py`, `eval_slack_messaging.py`). These files should contain your evaluation suites.

#### Command Options [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#command-options)

The `arcade evals` command supports several options to customize the evaluation process:

- `--details`, `-d`: Show detailed results for each evaluation case, including critic feedback.

Example:



```nextra-code
arcade evals . --details
```

- `--models`, `-m`: Specify the models to use for evaluation. Provide a comma-separated list of model names.

Example:



```nextra-code
arcade evals . --models gpt-4o,gpt-3.5
```

- `--max-concurrent`, `-c`: Set the maximum number of concurrent evaluations to run in parallel.

Example:



```nextra-code
arcade evals . --max-concurrent 4
```

- `--host`, `-h`: Specify the Arcade Engine address to send evaluation requests to.

- `--port`, `-p`: Specify the port of the Arcade Engine.

- `--tls`: Force TLS for the connection to the Arcade Engine.

- `--no-tls`: Disable TLS for the connection to the Arcade Engine.


#### Example Command [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#example-command)

Running evaluations in the `toolkits/math/evals` directory, showing detailed results, using the `gpt-4o` model:

```nextra-code
arcade evals toolkits/math/evals --details --models gpt-4o
```

### Execution Process [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#execution-process)

When you run the `arcade evals` command, the following steps occur:

1. **Preparation**: The CLI loads the evaluation suites from the specified directory, looking for files that match the naming convention.

2. **Execution**: The evaluation suites are executed asynchronously. Each suite’s evaluation function, decorated with `@tool_eval`, is called with the appropriate configuration, including the model and concurrency settings.

3. **Concurrency**: Evaluations can run concurrently based on the `--max-concurrent` setting, improving efficiency.

4. **Result Aggregation**: Results from all evaluation cases and models are collected and aggregated.


### Displaying Results [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#displaying-results)

After the evaluations are complete, the results are displayed in a concise and informative format, similar to testing frameworks like `pytest`. The output includes:

- **Summary**: Shows the total number of cases, how many passed, failed, or issued warnings.

Example:



```nextra-code
Summary -- Total: 5 -- Passed: 4 -- Failed: 1
```

- **Detailed Case Results**: For each evaluation case, the status (PASSED, FAILED, WARNED), the case name, and the score are displayed.

Example:



```nextra-code
PASSED Add two large numbers -- Score: 1.00
FAILED Send DM with ambiguous username -- Score: 0.75
```

- **Critic Feedback**: If the `--details` flag is used, detailed feedback from each critic is provided, highlighting matches, mismatches, and scores for each evaluated field.

Example:



```nextra-code
Details:
user_name:
    Match: False, Score: 0.00/0.50
    Expected: johndoe
    Actual: john_doe
message:
    Match: True, Score: 0.50/0.50
```


### Interpreting the Results [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#interpreting-the-results)

- **Passed**: The evaluation case met or exceeded the fail threshold specified in the rubric.

- **Failed**: The evaluation case did not meet the fail threshold.

- **Warnings**: If the score is between the warn threshold and the fail threshold, a warning is issued.


Use the detailed feedback to understand where the model’s performance can be improved, particularly focusing on mismatches identified by critics.

### Customizing Evaluations [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#customizing-evaluations)

You can customize the evaluation process by adjusting:

- **Rubrics**: Modify fail and warn thresholds, and adjust weights to emphasize different aspects of evaluation.

- **Critics**: Add or modify critics in your evaluation cases to target specific arguments or behaviors.

- **Concurrency**: Adjust the `--max-concurrent` option to optimize performance based on your environment.


### Handling Multiple Models [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#handling-multiple-models)

You can evaluate multiple models in a single run by specifying them in the `--models` option as a comma-separated list. This allows you to compare the performance of different models across the same evaluation suites.

Example:

```nextra-code
arcade evals . --models gpt-4o,gpt-3.5
```

### Considerations [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#considerations)

- **Engine Availability**: Ensure the Arcade Engine is running and accessible. You can specify the host and port if running the engine locally or on a different server.

- **Authentication**: Make sure you are logged in and have the necessary API keys configured.

- **Evaluation Files**: Ensure your evaluation files are correctly named and contain the evaluation suites decorated with `@tool_eval`.


## Conclusion [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/run-evaluations\#conclusion)

Running evaluations using the Arcade CLI provides a powerful and convenient way to assess the tool-calling capabilities of your language models. By leveraging the `arcade evals` command, you can efficiently execute your evaluation suites, analyze results, and iterate on your models and toolkits.

Integrating this evaluation process into your development workflow helps ensure that your models interact with tools as expected, enhances reliability, and builds confidence in deploying actionable language models in production environments.

[Create an evaluation suite](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite "Create an evaluation suite") [Arcade Deploy](https://docs.arcade.dev/home/serve-tools/arcade-deploy "Arcade Deploy")

## Custom Auth Flow
[Home](https://docs.arcade.dev/home "Home") [CrewAI](https://docs.arcade.dev/home/crewai/use-arcade-tools "CrewAI") Custom auth flow

## Custom Auth Flow with CrewAI [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#custom-auth-flow-with-crewai)

In this guide, we will explore how to create a custom auth flow that will be performed before executing Arcade tools within your CrewAI agent team.

The `ArcadeToolManager`’s built-in authorization and tool execution flows work well for many typical use cases. However, some scenarios call for a tailored approach. By implementing a custom auth flow, you gain flexibility in handling tool authorization. If your use case calls for a unique interface, additional approval steps, or specialized error handling, then this guide is for you.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#prerequisites)

- [Obtain an Arcade API key](https://docs.arcade.dev/home/api-keys)

### Set up your environment [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#set-up-your-environment)

Install the required package, and ensure your environment variables are set with your Arcade and OpenAI API keys:

```nextra-code
pip install crewai-arcade
```

### Configure API keys [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#configure-api-keys)

Provide your Arcade and OpenAI API keys. You can store them in environment variables like so:

```nextra-code
export ARCADE_API_KEY="your_arcade_api_key"
export OPENAI_API_KEY="your_openai_api_key"
```

### Define your custom auth flow [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#define-your-custom-auth-flow)

The custom auth flow defined in the following code snippet is a function that will be called whenever CrewAI needs to call a tool.

```nextra-code
from typing import Any

from crewai_arcade import ArcadeToolManager

USER_ID = "user@example.com"

def custom_auth_flow(
    manager: ArcadeToolManager, tool_name: str, **tool_input: dict[str, Any]
) -> Any:
    """Custom auth flow for the ArcadeToolManager

    This function is called when CrewAI needs to call a tool that requires authorization.
    Authorization is handled before executing the tool.
    This function overrides the ArcadeToolManager's default auth flow performed by ArcadeToolManager.authorize_tool
    """
    # Get authorization status
    auth_response = manager.authorize(tool_name, USER_ID)

    # If the user is not authorized for the tool,
    # then we need to handle the authorization before executing the tool
    if not manager.is_authorized(auth_response.id):
        print(f"Authorization required for tool: '{tool_name}' with inputs:")
        for input_name, input_value in tool_input.items():
            print(f"  {input_name}: {input_value}")
        # Handle authorization
        print(f"\nTo authorize, visit: {auth_response.url}")
        # Block until the user has completed the authorization
        auth_response = manager.wait_for_auth(auth_response)

        # Ensure authorization completed successfully
        if not manager.is_authorized(auth_response.id):
            raise ValueError(f"Authorization failed for {tool_name}. URL: {auth_response.url}")
    else:
        print(f"Authorization already granted for tool: '{tool_name}' with inputs:")
        for input_name, input_value in tool_input.items():
            print(f"  {input_name}: {input_value}")


def tool_manager_callback(tool_manager: ArcadeToolManager, tool_name: str, **tool_input: dict[str, Any]) -> Any:
    """Tool executor callback with custom auth flow for the ArcadeToolManager

    ArcadeToolManager's default executor handles authorization and tool execution.
    This function overrides the default executor to handle authorization in a custom way and then executes the tool.
    """
    custom_auth_flow(tool_manager, tool_name, **tool_input)
    return tool_manager.execute_tool(USER_ID, tool_name, **tool_input)
```

### Get Arcade tools [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#get-arcade-tools)

You can now provide the tool manager callback to the `ArcadeToolManager` upon initialization:

```nextra-code
# Provide the tool manager callback to the ArcadeToolManager
manager = ArcadeToolManager(executor=tool_manager_callback)

# Retrieve the provided tools and/or toolkits as CrewAI StructuredTools.
tools = manager.get_tools(tools=["Google.ListEmails"], toolkits=["Slack"])
```

### Use tools in your CrewAI agent team [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#use-tools-in-your-crewai-agent-team)

Create a Crew that uses your tools with the custom auth flow. When the tool is called, your tool manager callback will be called to handle the authorization and then the tool will be executed.

```nextra-code
from crewai import Agent, Crew, Task
from crewai.llm import LLM

crew_agent = Agent(
    role="Main Agent",
    backstory="You are a helpful assistant",
    goal="Help the user with their requests",
    tools=tools,
    allow_delegation=False,
    verbose=True,
    llm=LLM(model="gpt-4o"),
)

task = Task(
    description="Get the 5 most recent emails from the user's inbox and summarize them and recommend a response for each.",
    expected_output="A bulleted list with a one sentence summary of each email and a recommended response to the email.",
    agent=crew_agent,
    tools=crew_agent.tools,
)

crew = Crew(
    agents=[crew_agent],
    tasks=[task],
    verbose=True,
    memory=True,
)

result = crew.kickoff()

print("\n\n\n ------------ Result ------------ \n\n\n")
print(result)
```

Click to view a full example

## Next steps [Permalink for this section](https://docs.arcade.dev/home/crewai/custom-auth-flow\#next-steps)

Now you’re ready to integrate Arcade tools with a custom auth flow into your own CrewAI agent team.

[Using Arcade tools](https://docs.arcade.dev/home/crewai/use-arcade-tools "Using Arcade tools") [Overview](https://docs.arcade.dev/home/mastra/overview "Overview")

## Authorize LangChain Tools
[Home](https://docs.arcade.dev/home "Home") [LangChain](https://docs.arcade.dev/home/langchain/use-arcade-tools "LangChain") Authorizing existing tools

## Authorize Existing Tools [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#authorize-existing-tools)

In this guide, we’ll show you how to authorize LangChain tools like the `GmailToolkit` using Arcade. You may already have tools you want to use, and this guide will show you how to authorize them. Arcade handles retrieving, authorizing, and managing tokens so you don’t have to.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#prerequisites)

- [Obtain an Arcade API key](https://docs.arcade.dev/home/api-keys)

### Install the required packages [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#install-the-required-packages)

Instead of the `langchain_arcade` package, you only need the `arcadepy` package to authorize existing tools since Arcade tools are not being used.

```nextra-code
pip install langchain-openai langgraph arcadepy langchain-google-community
```

### Import the necessary packages [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#import-the-necessary-packages)

```nextra-code
import os
from arcadepy import Arcade
from google.oauth2.credentials import Credentials
from langchain_google_community import GmailToolkit
from langchain_google_community.gmail.utils import build_resource_service
from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent
```

### Initialize the Arcade client [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#initialize-the-arcade-client)

```nextra-code
api_key = os.getenv("ARCADE_API_KEY")
client = Arcade(api_key=api_key)
```

### Start the authorization process for Gmail [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#start-the-authorization-process-for-gmail)

```nextra-code
user_id = "user@example.com"
auth_response = client.auth.start(
    user_id=user_id,
    provider="google",
    scopes=["https://www.googleapis.com/auth/gmail.readonly"],
)
```

### Prompt the user to authorize [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#prompt-the-user-to-authorize)

```nextra-code
if auth_response.status != "completed":
    print("Please authorize the application in your browser:")
    print(auth_response.url)
```

The `auth_response.status` will be `"completed"` if the user has already authorized the application, so they won’t be prompted to authorize again.

### Wait for authorization completion [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#wait-for-authorization-completion)

```nextra-code
auth_response = client.auth.wait_for_completion(auth_response)
```

The `wait_for_completion` method will do nothing if the user has already authorized the application.

### Use the token to initialize the Gmail toolkit [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#use-the-token-to-initialize-the-gmail-toolkit)

```nextra-code
creds = Credentials(auth_response.context.token)
api_resource = build_resource_service(credentials=creds)
toolkit = GmailToolkit(api_resource=api_resource)
tools = toolkit.get_tools()
```

### Initialize the agent [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#initialize-the-agent)

```nextra-code
model = ChatOpenAI(model="gpt-4o")
agent_executor = create_react_agent(model, tools)
```

### Execute the agent [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#execute-the-agent)

```nextra-code
example_query = "Read my latest emails and summarize them."

events = agent_executor.stream(
    {"messages": [("user", example_query)]},
    stream_mode="values",
)
for event in events:
    event["messages"][-1].pretty_print()
```

### Next Steps [Permalink for this section](https://docs.arcade.dev/home/langchain/auth-langchain-tools\#next-steps)

Now you’re ready to explore more LangChain tools with Arcade. Try integrating additional toolkits and crafting more complex queries to enhance your AI workflows.

[User authorization](https://docs.arcade.dev/home/langchain/user-auth-interrupts "User authorization") [Overview](https://docs.arcade.dev/home/oai-agents/overview "Overview")

## User Authorization Workflow
[Home](https://docs.arcade.dev/home "Home") [LangChain](https://docs.arcade.dev/home/langchain/use-arcade-tools "LangChain") User authorization

## User Authorization in LangGraph [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#user-authorization-in-langgraph)

In this guide, you will create a LangGraph workflow that requires user authorization before running certain Arcade tools. When a tool needs authorization, the graph displays an authorization URL and waits for the user’s approval. This ensures that only the tools you explicitly authorize are available to the language model.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#prerequisites)

- [Obtain an Arcade API key](https://docs.arcade.dev/home/api-keys)

### Install the required packages [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#install-the-required-packages)

Set up your environment with the following installations:

```nextra-code
pip install langchain-arcade langchain-openai langgraph
```

### Configure your Arcade environment [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#configure-your-arcade-environment)

Make sure you have set your Arcade API key (and any other relevant keys) in the environment, or assign them directly in the code:

> Need an Arcade API key? Visit the [Get an API key](https://docs.arcade.dev/home/api-keys) page to create one.

```nextra-code
import os

# Import necessary classes and modules
from langchain_arcade import ArcadeToolManager
from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, START, MessagesState, StateGraph
from langgraph.prebuilt import ToolNode

arcade_api_key = os.environ["ARCADE_API_KEY"]

# Initialize the tool manager and fetch tools compatible with langgraph
tool_manager = ArcadeToolManager(api_key=arcade_api_key)
tools = tool_manager.get_tools(toolkits=["Google"])
tool_node = ToolNode(tools)

# Create a language model instance and bind it with the tools
model = ChatOpenAI(model="gpt-4o")
model_with_tools = model.bind_tools(tools)
```

Here are the main code elements:

- arcade\_api\_key is your Arcade key.
- tool\_manager fetches your Arcade tools, for example the “Google” toolkit.
- tool\_node encapsulates these tools for usage in LangGraph.
- model\_with\_tools binds your tools to the “gpt-4o” language model, enabling tool calls.

### Define the workflow steps [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#define-the-workflow-steps)

You will create three primary functions to handle AI interaction, tool authorization, and flow control.

```nextra-code
# Function to invoke the model and get a response
def call_agent(state: MessagesState):
    messages = state["messages"]
    response = model_with_tools.invoke(messages)
    # Return the updated message history
    return {"messages": [response]}


# Function to determine the next step in the workflow based on the last message
def should_continue(state: MessagesState):
    if state["messages"][-1].tool_calls:
        for tool_call in state["messages"][-1].tool_calls:
            if tool_manager.requires_auth(tool_call["name"]):
                return "authorization"
        return "tools"  # Proceed to tool execution if no authorization is needed
    return END  # End the workflow if no tool calls are present


# Function to handle authorization for tools that require it
def authorize(state: MessagesState, config: dict):
    user_id = config["configurable"].get("user_id")
    for tool_call in state["messages"][-1].tool_calls:
        tool_name = tool_call["name"]
        if not tool_manager.requires_auth(tool_name):
            continue
        auth_response = tool_manager.authorize(tool_name, user_id)
        if auth_response.status != "completed":
            # Prompt the user to visit the authorization URL
            print(f"Visit the following URL to authorize: {auth_response.url}")

            # Wait for the user to complete the authorization
            # and then check the authorization status again
            tool_manager.wait_for_auth(auth_response.id)
            if not tool_manager.is_authorized(auth_response.id):
                # This stops execution if authorization fails
                raise ValueError("Authorization failed")

    return {"messages": []}
```

Explanations for these functions:

- call\_agent: Invokes the language model using the latest conversation state.
- should\_continue: Checks the last AI message for any tool calls. If a tool requires authorization, the flow transitions to authorization. Otherwise, it goes straight to tool execution or ends if no tools are called.
- authorize: Prompts the user to authorize any required tools, blocking until authorization is completed successfully or fails.

### Build and compile your LangGraph workflow [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#build-and-compile-your-langgraph-workflow)

Use StateGraph to assemble the nodes and edges, then compile the graph with a MemorySaver.

```nextra-code
if __name__ == "__main__":
    # Build the workflow graph using StateGraph
    workflow = StateGraph(MessagesState)

    # Add nodes (steps) to the graph
    workflow.add_node("agent", call_agent)
    workflow.add_node("tools", tool_node)
    workflow.add_node("authorization", authorize)

    # Define the edges and control flow between nodes
    workflow.add_edge(START, "agent")
    workflow.add_conditional_edges("agent", should_continue, ["authorization", "tools", END])
    workflow.add_edge("authorization", "tools")
    workflow.add_edge("tools", "agent")

    # Set up memory for checkpointing the state
    memory = MemorySaver()

    # Compile the graph with the checkpointer
    graph = workflow.compile(checkpointer=memory)
```

### Provide inputs and run the graph [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#provide-inputs-and-run-the-graph)

Finally, define user-supplied messages, authorization config, and stream the outputs. The graph will pause for any required tool authorization.

```nextra-code
    # Define the input messages from the user
    inputs = {
        "messages": [\
            {\
                "role": "user",\
                "content": "Check and see if I have any important emails in my inbox",\
            }\
        ],
    }

    # Configuration with thread and user IDs for authorization purposes
    config = {"configurable": {"thread_id": "4", "user_id": "user@example.com"}}

    # Run the graph and stream the outputs
    for chunk in graph.stream(inputs, config=config, stream_mode="values"):
        # Pretty-print the last message in the chunk
        chunk["messages"][-1].pretty_print()
```

In this example:

- The user prompts the agent to check emails.
- The message triggers a potential need for the “Google” tools.
- If authorization is required, the code prints a URL and waits until you permit the tool call.

## Next steps [Permalink for this section](https://docs.arcade.dev/home/langchain/user-auth-interrupts\#next-steps)

- Experiment with more Arcade toolkits for expanded capabilities.
- Explore advanced authorization logic, such as multi-user or role-based checks.
- Integrate additional nodes to handle more complex flows or multi-step tasks in your LangGraph.

By combining Arcade’s authorization features with stateful management in LangGraph, you can build AI-driven workflows that respect user permissions at every step. Have fun exploring Arcade!

[Using Arcade tools](https://docs.arcade.dev/home/langchain/use-arcade-tools "Using Arcade tools") [Authorizing existing tools](https://docs.arcade.dev/home/langchain/auth-langchain-tools "Authorizing existing tools")

## Custom Docker Worker Guide
[Home](https://docs.arcade.dev/home "Home") [Serve tools](https://docs.arcade.dev/home/serve-tools/arcade-deploy "Serve tools") Docker

# Build custom worker images with docker

This guide shows you how to build a custom Worker image using Arcade’s base Worker image. It takes you through creating a Dockerfile, installing toolkits, and running the resulting container.

### Requirements [Permalink for this section](https://docs.arcade.dev/home/serve-tools/docker-worker\#requirements)

- Docker installed on your machine

### Create your Dockerfile [Permalink for this section](https://docs.arcade.dev/home/serve-tools/docker-worker\#create-your-dockerfile)

Create a Dockerfile in your project directory:

```nextra-code
ARG VERSION=latest

FROM ghcr.io/arcadeai/worker-base:${VERSION}

# Copy the file that lists all your desired toolkits
COPY toolkits.txt ./

# Install these toolkits
RUN pip install -r toolkits.txt
```

With this Dockerfile, we start from the Arcade worker base image, copy in a file named toolkits.txt, and install each toolkit listed there.

* * *

## List Your Toolkits [Permalink for this section](https://docs.arcade.dev/home/serve-tools/docker-worker\#list-your-toolkits)

Create a file named toolkits.txt in the same directory. Add the toolkits you want installed:

```nextra-code
arcade-google
arcade-web
arcade-zoom
```

Adjust this file as needed. Each line in toolkits.txt should specify a Python package name and version.

* * *

## 3\. Build the Image [Permalink for this section](https://docs.arcade.dev/home/serve-tools/docker-worker\#3-build-the-image)

From the directory containing the Dockerfile and toolkits.txt, run:

```nextra-code
docker build -t custom-worker:0.1.0 .
```

This command creates a Docker image named custom-worker with the tag 0.1.0 using the instructions in your Dockerfile.

* * *

## Run the Worker [Permalink for this section](https://docs.arcade.dev/home/serve-tools/docker-worker\#run-the-worker)

To start the worker container:

```nextra-code
docker run -p 8002:8002 \
  -e ARCADE_WORKER_SECRET="your_secret_here" \
  custom-worker:0.1.0
```

Replace “your\_secret\_here” with a secret of your choice. Your engine will need access to this secret to call your worker. The worker will be accessible on port 8002 of your local machine.

* * *

## Next Steps [Permalink for this section](https://docs.arcade.dev/home/serve-tools/docker-worker\#next-steps)

- Set environment variables (like ARCADE\_WORKER\_SECRET) securely for production use.
- Deploy your container to a suitable environment (Docker Swarm, Kubernetes, or another container orchestration platform).

Happy coding with Arcade!

[Arcade Deploy](https://docs.arcade.dev/home/serve-tools/arcade-deploy "Arcade Deploy") [Modal](https://docs.arcade.dev/home/serve-tools/modal-worker "Modal")

## 404 Error Page
# 404

## This page could not be found.

## Arcade Deploy Guide
[Home](https://docs.arcade.dev/home "Home") Serve toolsArcade Deploy

# Deploying to the cloud with Arcade Deploy

This guide shows you how to deploy a worker with a local toolkit with Arcade Deploy.

## Requirements [Permalink for this section](https://docs.arcade.dev/home/serve-tools/arcade-deploy\#requirements)

- **Python 3.10** or higher

Verify your Python version by running `python --version` or `python3 --version` in your terminal.
- **Arcade Account**: Sign up for an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=custom-tools) if you haven’t already.
- **Arcade CLI**: Install the Arcade CLI with `pip install arcade-ai`.

## Create your deployment config [Permalink for this section](https://docs.arcade.dev/home/serve-tools/arcade-deploy\#create-your-deployment-config)

Create a `worker.toml` file in your project directory:

```nextra-code
### Worker 1
[[worker]]

[worker.config]
id = "my-worker"
secret = <your secret> # Replace with your own secret

[worker.local_source]
packages = ["./<your-toolkit-directory>"] # Replace with the path to your toolkit directory
```

For more information on the `worker.toml` file, see the [Arcade Deploy documentation](https://docs.arcade.dev/home/configure/arcade-deploy).

* * *

## Deploy your worker [Permalink for this section](https://docs.arcade.dev/home/serve-tools/arcade-deploy\#deploy-your-worker)

Run the deploy command in the directory containing your `worker.toml` file:

```nextra-code
arcade deploy
```

You should see output like the following:

```nextra-code
Deploying 'my-worker...'                                                                                                                                                                                                                                                                                                                 main.py:589
⠏ Deploying 1 workers
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┓
┃         Added   ┃ Removed ┃ Updated ┃ No Changes ┃
┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━┩
│  custom-toolkit │         │         │            │
└─────────────────┴─────────┴─────────┴────────────┘
✅ Worker 'my-worker' deployed successfully.
```

* * *

## List your workers [Permalink for this section](https://docs.arcade.dev/home/serve-tools/arcade-deploy\#list-your-workers)

Run the following command to list your workers:

```nextra-code
arcade worker list
```

You should see output like the following:

```nextra-code
                                                     Workers
┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ ID        ┃ Cloud Deployed ┃ Engine Registered ┃ Enabled ┃ Host                                                ┃ Toolkits      ┃
┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ my-worker │ True           │ True              │ True    │ https://4bdfrgfdgftlu0ahyko56gdsr.server.arcade.dev │ CustomToolkit │
└───────────┴────────────────┴───────────────────┴─────────┴─────────────────────────────────────────────────────┴───────────────┘
```

Your worker and toolkits are now deployed and registered with the engine and ready to use!

You can go to the [dashboard](https://api.arcade.dev/dashboard/workers) to see your worker and its details.

[Run evaluations](https://docs.arcade.dev/home/evaluate-tools/run-evaluations "Run evaluations") [Docker](https://docs.arcade.dev/home/serve-tools/docker-worker "Docker")

## Control Tool Choice
[Home](https://docs.arcade.dev/home "Home") [Tool Calling](https://docs.arcade.dev/home/use-tools/tools-overview "Tool Calling") Tool Choice

# Control Tool Choice

Applies to:

- [Calling Tools With LLMs](https://docs.arcade.dev/home/use-tools/call-tools-with-models)

When you use a language model with Arcade, you can control how it calls and returns the output of the available tools with the `tool_choice` parameter:

PythonJavaScript

```nextra-code
response = client.chat.completions.create(
    messages=[\
        {"role": "system", "content": "You are a helpful assistant."},\
        {\
            "role": "user",\
            "content": "Star the ArcadeAI/arcade-ai repo on GitHub",\
        },\
    ],
    model="gpt-4o",
    user=user_id,
    tools=[\
        "GitHub.SetStarred",\
        "GitHub.CountStargazers",\
    ],
    tool_choice="generate",
)
```

```nextra-code
const response = await client.chat.completions.create({
  messages: [\
    { role: "system", content: "You are a helpful assistant." },\
    {\
      role: "user",\
      content: "Star the ArcadeAI/arcade-ai repo on GitHub",\
    },\
  ],
  model: "gpt-4o",
  user: userId,
  tools: ["GitHub.SetStarred", "GitHub.CountStargazers"],
  tool_choice: "generate",
});
```

Arcade extends the OpenAI `tool_choice` parameter to accept these options:

- `execute`: The model executes the tool and returns the raw output directly (usually a JSON object), without generating any natural language response.
- `generate`: The model runs the tool and, instead of returning the tool’s raw output, it interprets the output and generates a natural language response, which may contain some information extracted from the tool’s output, depending on what the user asked for.

## Tool calling patterns with Arcade [Permalink for this section](https://docs.arcade.dev/home/use-tools/tool-choice\#tool-calling-patterns-with-arcade)

Whether to use `execute` or `generate` depends on how you want to use the tool’s output.

We will refer to **Engine** and **Worker** below. The **Engine** is responsible for authorizing and coordinating requests between users, LLMs, and tools. The **Worker** is the service that hosts tools and executes them, when requested by the Engine.

### `tool_choice: execute` [Permalink for this section](https://docs.arcade.dev/home/use-tools/tool-choice\#tool_choice-execute)

The `execute` option empowers the model to run tools as if it were executing them directly. Arcade handles the tool execution behind the scenes and returns the results to the client.

**Flow Overview**:

1. **Client Request**: The client calls the AI model via the Arcade Engine.
2. **Tool Definition**: The Engine adds tool definitions to the request.
3. **Model Prediction**: The model predicts which tool to use and its arguments.
4. **Tool Execution**: The Engine sends the arguments to the appropriate Worker.
5. **Result Return**: The Worker executes the tool and returns results to the Engine.
6. **Client Response**: The Engine sends the results back to the client.

**Example**: Sending a Slack Message

Imagine a user wants to send a Slack message:

- **User Input**: “Send a Slack message to John saying ‘Meeting at 3 PM’”
- **Model Prediction**: Use the `Slack.SendDmToUser` tool with arguments:
  - `user_name: "john"`
  - `message: "Meeting at 3 PM"`
- **Tool Execution**: The Engine forwards these arguments to the Worker that hosts the Slack toolkit. The worker then sends the message.
- **Response**: The client receives the return value from the tool

This process happens seamlessly, with the client only seeing the initial request and final response.

### `tool_choice: generate` [Permalink for this section](https://docs.arcade.dev/home/use-tools/tool-choice\#tool_choice-generate)

The `generate` option works like `execute` but adds a step where the Engine asks the model to create a response based on the tool’s results. This provides more refined output that incorporates the tool’s data.

**Flow Overview**:

1. **Client Request**: The client calls the AI model via the Arcade Engine.
2. **Tool Definition**: The Engine adds tool definitions to the request.
3. **Model Prediction**: The model predicts which tool to use and its arguments.
4. **Tool Execution**: The Engine sends the arguments to the appropriate Worker.
5. **Intermediate Results**: The Worker executes the tool and returns results to the Engine.
6. **Response Generation**: The Engine sends a second request to the model with the tool’s results.
7. **Final Response**: The model generates a response incorporating the tool’s output, and the Engine returns it to the client.

**Example**: Checking Calendar Availability

Suppose a user wants to know their availability for the next day:

- **User Input**: “What’s my availability for tomorrow?”

- **Model Prediction**: Use the `Google.ListEvents` tool for the specified date.

- **Tool Execution**: The Engine requests the Worker hosting the Calendar toolkit to retrieve events for tomorrow.

- **Results**: The Worker returns calendar data (e.g., three meetings scheduled).

- **LLM Response Generation**: The Engine provides the calendar data to the LLM.

- **Response**: The model generates: “You have 3 meetings tomorrow. You’re free from 9-10 AM, 12-2 PM, and after 4 PM.”

- **Client Receives**: The summarized availability information.


By leveraging `generate`, you receive responses that are both informative and contextually rich.

## Alternative values for `tool_choice` [Permalink for this section](https://docs.arcade.dev/home/use-tools/tool-choice\#alternative-values-for-tool_choice)

Additionally, these options from OpenAI’s `tool_choice` parameter are supported, but are not commonly used:

- `none`: Prevent the model from calling any tools and instead generates a message
- `auto`: Let the model pick between generating a message or calling one or more tools, but does not execute the tool
- `required`: Ensure the model selects at least one tool, but does not execute the tool

For backwards compatibility, `auto` and `required` only predict the tool
choice, but do not run the tool. These options behave the same with or without
Arcade.

[Call Tools Directly](https://docs.arcade.dev/home/use-tools/call-tools-directly "Call Tools Directly") [Tool formats](https://docs.arcade.dev/home/use-tools/get-tool-definitions "Tool formats")

## Arcade Tools Integration
[Home](https://docs.arcade.dev/home "Home") LangChainUsing Arcade tools

## Use LangGraph with Arcade [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#use-langgraph-with-arcade)

In this guide, let’s explore how to integrate Arcade tools into your LangGraph application. Follow the step-by-step instructions below.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#prerequisites)

- [Obtain an Arcade API key](https://docs.arcade.dev/home/api-keys)

### Set up your environment [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#set-up-your-environment)

Install the required packages, and ensure your environment variables are set with your Arcade and OpenAI API keys:

```nextra-code
pip install langchain-arcade langchain-openai langgraph
```

### Configure API keys [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#configure-api-keys)

Provide your Arcade and OpenAI API keys. You can store them in environment variables or directly in your code:

> Need an Arcade API key? Visit the [Get an API key](https://docs.arcade.dev/home/api-keys) page to create one.

```nextra-code
import os

arcade_api_key = os.environ.get("ARCADE_API_KEY", "YOUR_ARCADE_API_KEY")
openai_api_key = os.environ.get("OPENAI_API_KEY", "YOUR_OPENAI_API_KEY")
```

### Create and manage Arcade tools [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#create-and-manage-arcade-tools)

Use the ArcadeToolManager to retrieve specific tools or entire toolkits:

```nextra-code
from langchain_arcade import ArcadeToolManager

manager = ArcadeToolManager(api_key=arcade_api_key)

# Fetch the "ScrapeUrl" tool from the "Web" toolkit
tools = manager.get_tools(tools=["Web.ScrapeUrl"])
print(manager.tools)

# Get all tools from the "Google" toolkit
tools = manager.get_tools(toolkits=["Google"])
print(manager.tools)
```

### Set up the language model and memory [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#set-up-the-language-model-and-memory)

Create an AI model and bind your tools. Use MemorySaver for checkpointing:

```nextra-code
from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver

model = ChatOpenAI(model="gpt-4o", api_key=openai_api_key)
bound_model = model.bind_tools(tools)

memory = MemorySaver()
```

### Create a ReAct-style agent [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#create-a-react-style-agent)

Use the prebuilt ReAct agent from LangGraph to handle your Arcade tools:

```nextra-code
from langgraph.prebuilt import create_react_agent

graph = create_react_agent(model=bound_model, tools=tools, checkpointer=memory)
```

### Provide configuration and user query [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#provide-configuration-and-user-query)

Supply a basic config dictionary and a user query. Notice that user\_id is required for tool authorization:

```nextra-code
config = {
    "configurable": {
        "thread_id": "1",
        "user_id": "user@example.coom"
    }
}
user_input = {
    "messages": [\
        ("user", "List any new and important emails in my inbox.")\
    ]
}
```

### Stream the response [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#stream-the-response)

Stream the assistant’s output. If the tool requires authorization, the agent may raise a NodeInterrupt:

```nextra-code
from langgraph.errors import NodeInterrupt

try:
    for chunk in graph.stream(user_input, config, stream_mode="values"):
        chunk["messages"][-1].pretty_print()
except NodeInterrupt as exc:
    print(f"\nNodeInterrupt occurred: {exc}")
    print("Please authorize the tool or update the request, then re-run.")
```

## Tips for selecting tools [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#tips-for-selecting-tools)

- **Relevance**: Pick only the tools you need. Avoid using all tools at once.
- **Avoid conflicts**: Be mindful of duplicate or overlapping functionality.

## Next steps [Permalink for this section](https://docs.arcade.dev/home/langchain/use-arcade-tools\#next-steps)

Now that you have integrated Arcade tools into your LangGraph agent, you can:

- Experiment with different toolkits, such as “Math” or “Search.”
- Customize the agent’s prompts for specific tasks.
- Try out other language models and compare their performance.

Enjoy exploring Arcade and building powerful AI-enabled Python applications!

[Arcade with Claude Desktop](https://docs.arcade.dev/home/mcp/claude-desktop-client "Arcade with Claude Desktop") [User authorization](https://docs.arcade.dev/home/langchain/user-auth-interrupts "User authorization")

## Deploy Arcade Worker
[Home](https://docs.arcade.dev/home "Home") [Serve tools](https://docs.arcade.dev/home/serve-tools/arcade-deploy "Serve tools") Modal

# Deploy a custom worker on Modal

This guide shows you how to deploy a custom Arcade Worker using Modal. It takes you through setting up the environment, deploying the worker, and connecting it to the Arcade Engine.

### Requirements [Permalink for this section](https://docs.arcade.dev/home/serve-tools/modal-worker\#requirements)

- Python 3.10+
- Modal CLI ( `pip install modal`)

### Deploy [Permalink for this section](https://docs.arcade.dev/home/serve-tools/modal-worker\#deploy)

Navigate to the directory containing your worker script and deploy it using Modal:

```nextra-code
cd examples/serving-tools
modal deploy run-arcade-worker.py
```

### Changing the Toolkits [Permalink for this section](https://docs.arcade.dev/home/serve-tools/modal-worker\#changing-the-toolkits)

To change the toolkits, edit the `toolkits` list in the `run-arcade-worker.py` file.

### Example `run-arcade-worker.py` [Permalink for this section](https://docs.arcade.dev/home/serve-tools/modal-worker\#example-run-arcade-workerpy)

```nextra-code
import os
from modal import App, Image, asgi_app

# Define the FastAPI app
app = App("arcade-worker")

toolkits = ["arcade-google", "arcade-slack"]

image = (
    Image.debian_slim()
    .pip_install("arcade-ai")
    .pip_install(toolkits)
)

@app.function(image=image)
@asgi_app()
def fastapi_app():
    from fastapi import FastAPI
    from arcade.sdk import Toolkit
    from arcade.worker.fastapi.worker import FastAPIWorker

    web_app = FastAPI()

    # Initialize app and Arcade FastAPIWorker
    worker_secret = os.environ.get("ARCADE_WORKER_SECRET", "dev")
    worker = FastAPIWorker(web_app, secret=worker_secret)

    # Register toolkits we've installed
    installed_toolkits = Toolkit.find_all_arcade_toolkits()
    for toolkit in toolkits:
        if toolkit in installed_toolkits:
            worker.register_toolkit(toolkit)

    return web_app
```

### Connect to Arcade Engine [Permalink for this section](https://docs.arcade.dev/home/serve-tools/modal-worker\#connect-to-arcade-engine)

To connect the Arcade Engine to your worker, configure the worker URL in the engine’s configuration file. Start the engine with the appropriate configuration.

For more details, refer to the [Arcade Engine configuration documentation](https://docs.arcade.dev/home/configure/engine).

* * *

## Next Steps [Permalink for this section](https://docs.arcade.dev/home/serve-tools/modal-worker\#next-steps)

- Ensure your environment variables (like `ARCADE_WORKER_SECRET`) are set securely for production use.
- Explore deploying your worker in different environments supported by Modal.

[Docker](https://docs.arcade.dev/home/serve-tools/docker-worker "Docker") [Overview](https://docs.arcade.dev/home/install/overview "Overview")

## AI Tool Calling Overview
[Home](https://docs.arcade.dev/home "Home") Tool CallingIntroduction

# What are tools?

Language models excel at text generation but struggle with tasks like calculations, data retrieval, or interacting with external systems. To make an analogy, these models have impressive _brains_ or reasoning capabilities, but lack the _hands_ to interact with the digital world.

To solve this, many AI models support tool calling (sometimes referred to as ‘function calling’).

## The use case for tool-calling [Permalink for this section](https://docs.arcade.dev/home/use-tools/tools-overview\#the-use-case-for-tool-calling)

Say a colleague shares a document with you on Google Drive, and you’d like an LLM to help you analyze it.

You could go to your Drive, open the document, copy its contents, and paste it into your chat. But what if the LLM could do this for you? The Arcade Drive toolkit provides a [`SearchAndRetrieveDocuments`](https://docs.arcade.dev/toolkits/productivity/google/drive#searchandretrievedocuments) tool. By calling it, the LLM can find and read the document without you having to do anything.

After analyzing the document, you decide that a meeting is needed with your colleague. You can ask the LLM to schedule a meeting and it will use the [Calendar toolkit](https://docs.arcade.dev/toolkits/productivity/google/calendar) to do it without you needing to leave the chat.

Or you could ask the LLM to send a summary of the analysis to your colleague by email and it would use the [Gmail toolkit](https://docs.arcade.dev/toolkits/productivity/google/gmail) for that.

## Possibilities for Application and AI Agent developers [Permalink for this section](https://docs.arcade.dev/home/use-tools/tools-overview\#possibilities-for-application-and-ai-agent-developers)

Tool-calling combines the reasoning power of LLMs with virtually any action available through APIs or code execution.

With the Arcade SDKs, it is easy to build applications and AI Agents that can leverage tool-calling in order to provide an LLM-powered experience to users in a secure and privacy-forward way.

## How tool calling works [Permalink for this section](https://docs.arcade.dev/home/use-tools/tools-overview\#how-tool-calling-works)

AI models that support tool calling can determine when and how to use specific tools to fulfill a user’s request. The developer decides which tools to make available to the model, whether existing tools or tools they’ve built themselves.

In the example above, when the user asks: “ _help me analyze the ‘Project XYZ’ document shared by John on Google Drive_”, the LLM can use its reasoning capabilities to:

1. Recognize that it needs to access external data;
2. Evaluate that the `Drive.SearchAndRetrieveDocuments` tool is the best way to get that data;
3. Call the tool with the appropriate parameters;
4. Read the document content and use it to answer the user’s questions.

## The authorization problem [Permalink for this section](https://docs.arcade.dev/home/use-tools/tools-overview\#the-authorization-problem)

One challenge to make all that happen is authorization. How do you give the LLM permission to access someone’s Google Drive and Gmail in a secure and convenient way?

Arcade solves this problem by providing a standardized [interface for authorization](https://docs.arcade.dev/home/auth/how-arcade-helps), as well as pre-built integrations with [popular services](https://docs.arcade.dev/home/auth-providers) such as Google, Dropbox, GitHub, Notion, and many more.

Our SDK also [allows you to integrate](https://docs.arcade.dev/home/auth-providers/oauth2) LLMs with any OAuth 2.0-compliant API.

## Tool Augmented Generation (TAG) [Permalink for this section](https://docs.arcade.dev/home/use-tools/tools-overview\#tool-augmented-generation-tag)

Similar to Retrieval Augmented Generation (RAG), tool calling allows the AI to use external data to answer questions. Unlike RAG, tool calling is more flexible and allows the AI to use tools that are much more diverse than text or vector search alone.

The following is a diagram of how tool calling is used to provide context to a language model similar to RAG.

![Tool calling diagram 1](https://docs.arcade.dev/images/tool-call-diagrams/tool-call-1.png)

First, a language model is given a user’s request. The model then determines if it needs to use a tool to fulfill the request. If so, the model selects the appropriate tool from the tools listed in the request.

The model then predicts the parameters of that tool and passes these parameters back to the client application.

![Tool calling diagram 2](https://docs.arcade.dev/images/tool-call-diagrams/tool-call-2.png)

Now that the tool has been executed, the model can use the output to generate a response.

![Tool calling diagram 3](https://docs.arcade.dev/images/tool-call-diagrams/tool-call-3.png)

This process shows the general outline of the Tool Augmented Generation (TAG) process at a high level.

### Next steps [Permalink for this section](https://docs.arcade.dev/home/use-tools/tools-overview\#next-steps)

- Learn how to call tools [directly](https://docs.arcade.dev/home/use-tools/call-tools-directly) or to let the LLM [choose a tool](https://docs.arcade.dev/home/use-tools/tool-choice)
- Explore the [Toolkits](https://docs.arcade.dev/toolkits) available on Arcade
- Build your own [custom toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit)

[Get an API key](https://docs.arcade.dev/home/api-keys "Get an API key") [Call Tools with LLMs](https://docs.arcade.dev/home/use-tools/call-tools-with-models "Call Tools with LLMs")

## Using Arcade Tools
[Home](https://docs.arcade.dev/home "Home") CrewAIUsing Arcade tools

## Use CrewAI with Arcade [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#use-crewai-with-arcade)

In this guide, we will explore how to integrate Arcade tools into your CrewAI application. Follow the step-by-step instructions below. If a tool requires authorization, an authorization URL will appear in the console, waiting for your approval. This process ensures that only the tools you choose to authorize are executed.

To tailor the tool authorization flow to meet your application’s specific needs, check out the [Custom Auth Flow with CrewAI](https://docs.arcade.dev/home/crewai/custom-auth-flow) guide.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#prerequisites)

- [Obtain an Arcade API key](https://docs.arcade.dev/home/api-keys)

### Set up your environment [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#set-up-your-environment)

Install the required package, and ensure your environment variables are set with your Arcade and OpenAI API keys:

```nextra-code
pip install crewai-arcade
```

### Configure API keys [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#configure-api-keys)

Provide your Arcade and OpenAI API keys. You can store them in environment variables like so:

```nextra-code
export ARCADE_API_KEY="your_arcade_api_key"
export OPENAI_API_KEY="your_openai_api_key"
```

### Get Arcade tools [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#get-arcade-tools)

Use the `ArcadeToolManager` to initialize, add, and get Arcade tools:

```nextra-code
from crewai_arcade import ArcadeToolManager

manager = ArcadeToolManager(default_user_id="user@example.com")

"""
Retrieves the provided tools and/or toolkits as CrewAI StructuredTools.
"""
tools = manager.get_tools(tools=["Google.ListEmails"], toolkits=["Slack"])
```

### Use tools in your CrewAI agent team [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#use-tools-in-your-crewai-agent-team)

Create a Crew that uses your tools. When the tool is called, you will be prompted to go visit an authorization page to authorize the tool before it executes.

```nextra-code
from crewai import Agent, Crew, Task
from crewai.llm import LLM

crew_agent = Agent(
    role="Main Agent",
    backstory="You are a helpful assistant",
    goal="Help the user with their requests",
    tools=tools,
    allow_delegation=False,
    verbose=True,
    llm=LLM(model="gpt-4o"),
)

task = Task(
    description="Get the 5 most recent emails from the user's inbox and summarize them and recommend a response for each.",
    expected_output="A bulleted list with a one sentence summary of each email and a recommended response to the email.",
    agent=crew_agent,
    tools=crew_agent.tools,
)

crew = Crew(
    agents=[crew_agent],
    tasks=[task],
    verbose=True,
    memory=True,
)

result = crew.kickoff()

print("\n\n\n ------------ Result ------------ \n\n\n")
print(result)
```

Click to view a full example

## Tips for selecting tools [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#tips-for-selecting-tools)

- **Relevance**: Pick only the tools you need. Avoid using all tools at once.
- **Avoid conflicts**: Be mindful of duplicate or overlapping functionality.

## Next steps [Permalink for this section](https://docs.arcade.dev/home/crewai/use-arcade-tools\#next-steps)

Now that you have integrated Arcade tools into your CrewAI agent team, you can:

- Experiment with different toolkits, such as “Math” or “Search.”
- Customize the agent’s prompts for specific tasks.
- Customize the tool authorization and execution flow to meet your application’s requirements.

[Managing user authorization](https://docs.arcade.dev/home/oai-agents/user-auth-interrupts "Managing user authorization") [Custom auth flow](https://docs.arcade.dev/home/crewai/custom-auth-flow "Custom auth flow")

## ToolContext Overview
[Home](https://docs.arcade.dev/home "Home") [Build tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit "Build tools") Tool Context

# Understanding ToolContext

## What is ToolContext? [Permalink for this section](https://docs.arcade.dev/home/build-tools/tool-context\#what-is-toolcontext)

`ToolContext` is a crucial component in Arcade that manages authorization and user information for tools requiring authentication. Let’s explore how it works and how you can use it in your projects.

`ToolContext` is a class that holds two main pieces of information:

1. Authorization context: This includes a token for making authenticated requests to external APIs as well as structured user information for providers that support retrieving user information.
2. User ID: This identifies the user invoking the tool.

Some authorization providers may also include additional structured user information in the `ToolContext`.

## How ToolContext Works [Permalink for this section](https://docs.arcade.dev/home/build-tools/tool-context\#how-toolcontext-works)

When you invoke a tool that requires authorization, Arcade’s Tool SDK automatically:

1. Creates a `ToolContext` object
2. Passes this object to your tool

You can then use the `ToolContext` object to make authenticated requests to external APIs.

## Next Steps [Permalink for this section](https://docs.arcade.dev/home/build-tools/tool-context\#next-steps)

Now that you understand the basics of `ToolContext`, you’re ready to apply this knowledge in creating your own authorized tools. To learn how to build a custom tool that requires user authorization, check out our guide on [adding user authorization to your tools](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth) or [adding secrets to your tools](https://docs.arcade.dev/home/build-tools/create-a-tool-with-secrets).

[Create a toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit "Create a toolkit") [Create a tool with auth](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth "Create a tool with auth")

## Agent Authorization Simplified
[Home](https://docs.arcade.dev/home "Home") AuthorizationHow Arcade Helps

# How Arcade helps with Agent Authorization

### The challenges that Arcade solves [Permalink for this section](https://docs.arcade.dev/home/auth/how-arcade-helps\#the-challenges-that-arcade-solves)

Applications that use models to perform tasks ( _agentic applications_) commonly require access to sensitive data and services. Authentication complexities often hinder AI from performing tasks that require user-specific information, like what emails you recently received or what’s coming up on your calendar.

To retrieve this information, agentic applications need to be able to authenticate and authorize access to external services you use like Gmail or Google Calendar.

Authenticating to retrieve information, however, is not the only challenge. Agentic applications also need to authenticate in order to **act** on your behalf - like sending an email or updating your calendar.

Without auth, AI agents are severely limited in what they can do.

### How Arcade solves this [Permalink for this section](https://docs.arcade.dev/home/auth/how-arcade-helps\#how-arcade-solves-this)

Arcade provides an authorization system that handles OAuth 2.0, API keys, and user tokens needed by AI agents to access external services through tools. This means your AI agents can now act on behalf of users securely and privately.

With Arcade, developers can now create agents that can _act as the end users of their application_ to perform tasks like:

- Creating a new Zoom meeting
- Sending or reading email
- Answering questions about files in Google Drive.

### Auth permissions and scopes [Permalink for this section](https://docs.arcade.dev/home/auth/how-arcade-helps\#auth-permissions-and-scopes)

Each tool in Arcade’s toolkits has a set of required permissions - or, more commonly referred to in OAuth2, **scopes**. For example, the [`Google.SendEmail`](https://docs.arcade.dev/toolkits/productivity/google/gmail#sendemail) tool requires the [`https://www.googleapis.com/auth/gmail.send`](https://developers.google.com/identity/protocols/oauth2/scopes#gmail) scope.

A scope is what the user has authorized someone else (in this case, the AI agent) to do on their behalf. In any OAuth2-compatible service, each kind of action requires a different set of permissions. This gives the user fine-grained control over what data third-party services can access and what actions can be executed in their accounts.

When a tool is called, the Arcade Engine will check if the user has granted the required permissions. If not, it will automatically prompt the user to authorize the tool, coordinating the OAuth2 flow with the service provider.

### How to implement OAuth2-authorized tool calling [Permalink for this section](https://docs.arcade.dev/home/auth/how-arcade-helps\#how-to-implement-oauth2-authorized-tool-calling)

To learn how Arcade allows for actions (tools) to be authorized through OAuth2 and how to implement it, check out [Authorized Tool Calling](https://docs.arcade.dev/home/auth/auth-tool-calling).

### Tools that don’t require authorization [Permalink for this section](https://docs.arcade.dev/home/auth/how-arcade-helps\#tools-that-dont-require-authorization)

Some tools, like [`Search.SearchGoogle`](https://docs.arcade.dev/toolkits/search/google_search#searchgoogle), allow AI agents to retrieve information or perform actions without needing user-specific authorization.

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade(api_key="arcade_api_key")  # or set the ARCADE_API_KEY env var

# Use the Search.SearchGoogle tool to perform a web search
response = await client.tools.execute(
    tool_name="Search.SearchGoogle",
    input={"query": "Latest AI advancements"},
)
print(response.output.value)
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(api_key="arcade_api_key");  // or set the ARCADE_API_KEY env var

// Use the Search.SearchGoogle tool to perform a web search
const response = await client.tools.execute({
  tool_name: "Search.SearchGoogle",
  input: { query: "Latest AI advancements" },
});
console.log(response.output.value);
```

[Tool formats](https://docs.arcade.dev/home/use-tools/get-tool-definitions "Tool formats") [Authorized Tool Calling](https://docs.arcade.dev/home/auth/auth-tool-calling "Authorized Tool Calling")

## Direct Tool Calling
[Home](https://docs.arcade.dev/home "Home") [Tool Calling](https://docs.arcade.dev/home/use-tools/tools-overview "Tool Calling") Call Tools Directly

# Call Tools Directly

In this guide, you’ll learn how to call tools directly, instead of having the [LLM choosing](https://docs.arcade.dev/home/use-tools/call-tools-with-models) which tool to call.

Direct tool calling is useful in situations where you already know what tool is needed or when there is no prompt for an LLM to interpret and decide on the tool calling. It also gives you full control over what is executed by the Arcade Engine and how.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#prerequisites)

1. Create an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=call-tools-directly)
2. Get an [Arcade API key](https://docs.arcade.dev/home/api-keys) and take note, you’ll need it in the next steps.

### Install the Arcade client [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#install-the-arcade-client)

PythonJavaScript

```nextra-code
pip install arcadepy
```

```nextra-code
npm install @arcadeai/arcadejs
```

### Instantiate the client [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#instantiate-the-client)

PythonJavaScript

Create a new script called `call_tools_directly.py` and instantiate the Arcade client:

```nextra-code
from arcadepy import Arcade

client = Arcade(api_key="arcade_api_key")
```

Create a new script called `call_tools_directly.js` and instantiate the Arcade client:

```nextra-code
import Arcade from "@arcadeai/arcadejs";

const client = new Arcade();
```

You can also set the `ARCADE_API_KEY` environment variable instead of passing it as a parameter.

### Set the user ID [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#set-the-user-id)

Arcade needs a unique identifier for your application user (this could be an email address, a UUID, etc). In this example, simply use your email address as the user ID:

PythonJavaScript

```nextra-code
user_id = "user@example.com"
```

```nextra-code
let userId = "you@example.com";
```

### Call a tool [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#call-a-tool)

Let’s use the `Math.Sqrt` tool from the Arcade Math toolkit to get the square root of a number.

PythonJavaScript

```nextra-code
response = client.tools.execute(
    tool_name="Math.Sqrt",
    input={"a": 625},
    user_id=user_id,
)

print(response.output.value)

```

```nextra-code
const response = await client.tools.execute({
  tool_name: "Math.Sqrt",
  input: { a: "625" },
  user_id: userId,
});

console.log(response.output.value);

```

### Run the code [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#run-the-code)

PythonJavaScript

```nextra-code
python3 example.py
> 25
```

```nextra-code
node example.js
> 25
```

## Next Steps [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-directly\#next-steps)

This was a very simple tool call. Try executing a [tool with user authorization](https://docs.arcade.dev/home/auth/auth-tool-calling) next.

[Call Tools with LLMs](https://docs.arcade.dev/home/use-tools/call-tools-with-models "Call Tools with LLMs") [Tool Choice](https://docs.arcade.dev/home/use-tools/tool-choice "Tool Choice")

## Formatted Tool Definitions
[Home](https://docs.arcade.dev/home "Home") [Tool Calling](https://docs.arcade.dev/home/use-tools/tools-overview "Tool Calling") Tool formats

# Get Formatted Tool Definitions

When calling tools directly, it can be useful to get tool definitions in a specific model provider’s format. The Arcade Client provides methods for getting a tool’s definition and also for listing the definitions of multiple tools in a specific model provider’s format.

For a complete list of supported model providers, see the [Model Providers page](https://docs.arcade.dev/home/supported-models).

## Get a single tool definition formatted for a model [Permalink for this section](https://docs.arcade.dev/home/use-tools/get-tool-definitions\#get-a-single-tool-definition-formatted-for-a-model)

It can be useful to get a tool’s definition in a specific model provider’s format. For example, you may want to get the `Github.SetStarred` tool’s definition in OpenAI’s format.

To do this, you can use the `client.tools.formatted.get` method and specify the tool name and format.

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()

# Get a specific tool formatted for OpenAI
github_star_repo = client.tools.formatted.get(name="Github.SetStarred", format="openai")

print(github_star_repo)
```

```nextra-code
import Arcade from "@arcadeai/arcadejs";

const client = new Arcade();

// Get a specific tool formatted for OpenAI
const githubStarRepo = await client.tools.formatted.get("Github.SetStarred", {
  format: "openai",
});

console.log(githubStarRepo);
```

See output

## Get all tool definitions in a toolkit formatted for a model [Permalink for this section](https://docs.arcade.dev/home/use-tools/get-tool-definitions\#get-all-tool-definitions-in-a-toolkit-formatted-for-a-model)

It can be useful to list tool definitions for a toolkit in a specific model provider’s format. For example, you may want to get the definitions of tools in the `Github` toolkit in OpenAI’s format.

To do this, you can use the `client.tools.formatted.list` method and specify the toolkit and format. Since this method returns an iterator of pages, you can cast to a list to get all the tools.

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()

# Get all tools in the Github toolkit formatted for OpenAI
github_tools = list(client.tools.formatted.list(format="openai", toolkit="github"))

# Print the number of tools in the Github toolkit
print(len(github_tools))
```

```nextra-code
import Arcade from "@arcadeai/arcadejs";

const client = new Arcade();

// Get all tools in the Github toolkit formatted for OpenAI
const githubTools = await client.tools.formatted.list({
  format: "openai",
  toolkit: "github",
});

// Print the number of tools in the Github toolkit
console.log(githubTools.total_count);
```

## Get all tool definitions formatted for a model [Permalink for this section](https://docs.arcade.dev/home/use-tools/get-tool-definitions\#get-all-tool-definitions-formatted-for-a-model)

To get all tools formatted for OpenAI, you can use the `client.tools.formatted.list` method without specifying a toolkit.

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()

# Get all tools formatted for OpenAI
all_tools = list(client.tools.formatted.list(format="openai"))

# Print the number of tools
print(len(all_tools))
```

```nextra-code
import Arcade from "@arcadeai/arcadejs";

const client = new Arcade();

// Get all tools formatted for OpenAI
const allTools = await client.tools.formatted.list({ format: "openai" });

// Print the number of tools
console.log(allTools.total_count);
```

[Tool Choice](https://docs.arcade.dev/home/use-tools/tool-choice "Tool Choice") [How Arcade Helps](https://docs.arcade.dev/home/auth/how-arcade-helps "How Arcade Helps")

## Evaluate Tool Calling
[Home](https://docs.arcade.dev/home "Home") Evaluate toolsWhy evaluate tools?

# Why evaluate tools?

When deploying language models with tool-calling capabilities in production environments, it’s essential to ensure their effectiveness and reliability. This evaluation process goes beyond traditional testing and focuses on two key aspects:

1. **Tool Utilization**: Assessing how efficiently the language model uses the available tools.
2. **Intent Understanding**: Evaluating the language model’s ability to comprehend user intents and select the appropriate tools to fulfill those intents.

Arcade’s Evaluation Framework provides a comprehensive approach to assess and validate the tool-calling capabilities of language models, ensuring they meet the high standards required for real-world applications.

## Why Evaluate Tool Calling by Task? [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#why-evaluate-tool-calling-by-task)

Language models augmented with tool-use capabilities can perform complex tasks by invoking external tools or APIs. However, without proper evaluation, these models might:

- **Misinterpret user intents**, leading to incorrect tool selection.
- **Provide incorrect arguments** to tools, causing failures or undesired outcomes.
- **Fail to execute the necessary sequence of tool calls**, especially in tasks requiring multiple steps.

Evaluating tool calling by task ensures that the language model can handle specific scenarios reliably, providing confidence in its performance in production settings.

## Evaluation Scoring [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#evaluation-scoring)

Scoring in the evaluation framework is based on comparing the model’s actual tool calls with the expected ones for each evaluation case. The total score for a case depends on:

1. **Tool Selection**: Whether the model selected the correct tools for the task.
2. **Tool Call Arguments**: The correctness of the arguments provided to the tools, evaluated by critics.
3. **Evaluation Rubric**: Each aspect of the evaluation is weighted according to the rubric, affecting its impact on the final score.

The evaluation result includes:

- **Score**: A normalized value between 0.0 and 1.0.
- **Result**:
  - _Passed_: Score is above the fail threshold.
  - _Failed_: Score is below the fail threshold.
  - _Warned_: Score is between the warning and fail thresholds.

## Critics: Types and Usage [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#critics-types-and-usage)

Critics are essential for evaluating the correctness of tool call arguments. Different types of critics serve various evaluation needs:

### BinaryCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#binarycritic)

`BinaryCritic` s check for exact matches between expected and actual values after casting.

- **Use Case**: When exact values are required (e.g., specific numeric parameters).
- **Example**: Ensuring the model provides the exact user ID in a function call.

### NumericCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#numericcritic)

`NumericCritic` evaluates numeric values within a specified range, allowing for acceptable deviations.

- **Use Case**: When values can be approximate but should be within a certain threshold.
- **Example**: Accepting approximate results in mathematical computations due to floating-point precision.

### SimilarityCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#similaritycritic)

`SimilarityCritic` measures the similarity between expected and actual string values using metrics like cosine similarity.

- **Use Case**: When the exact wording isn’t critical, but the content should be similar.
- **Example**: Evaluating if the message content in a communication tool is similar to the expected message.

### DatetimeCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#datetimecritic)

`DatetimeCritic` evaluates the closeness of datetime values within a specified tolerance.

- **Use Case**: When datetime values should be within a certain range of the expected time.
- **Example**: Verifying if a scheduled event time is close enough to the intended time.

### Choosing the Right Critic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#choosing-the-right-critic)

- **Exact Matches Needed**: Use **BinaryCritic** for strict equality.
- **Numeric Ranges**: Use **NumericCritic** when a tolerance is acceptable.
- **Textual Similarity**: Use **SimilarityCritic** for comparing messages or descriptions.
- **Datetime Tolerance**: Use **DatetimeCritic** when a tolerance is acceptable for datetime comparisons.

Critics are defined with fields such as `critic_field`, `weight`, and parameters specific to their types (e.g., `similarity_threshold` for `SimilarityCritic`).

## Rubrics and Setting Thresholds [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#rubrics-and-setting-thresholds)

An **EvalRubric** defines the evaluation criteria and thresholds for determining pass/fail outcomes. Key components include:

- **Fail Threshold**: The minimum score required to pass the evaluation.
- **Warn Threshold**: The score threshold for issuing a warning.
- **Weights**: Assigns importance to different aspects of the evaluation (e.g., tool selection, argument correctness).

### Setting Up a Rubric [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#setting-up-a-rubric)

- **Define Fail and Warn Thresholds**: Choose values between 0.0 and 1.0 to represent acceptable performance levels.
- **Assign Weights**: Allocate weights to tool selection and critics to reflect their importance in the overall evaluation.
- **Configure Failure Conditions**: Set flags like `fail_on_tool_selection` to enforce strict criteria.

### Example Rubric Configuration: [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#example-rubric-configuration)

A rubric that requires a score of at least 0.85 to pass and issues a warning if the score is between 0.85 and 0.95:

- Fail Threshold: 0.85
- Warn Threshold: 0.95
- Fail on Tool Selection: True
- Tool Selection Weight: 1.0

```nextra-code
rubric = EvalRubric(
    fail_threshold=0.85,
    warn_threshold=0.95,
    fail_on_tool_selection=True,
    tool_selection_weight=1.0,
)
```

## Building an Evaluation Suite [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#building-an-evaluation-suite)

An **EvalSuite** orchestrates the running of multiple evaluation cases. Here’s how to build one:

1. **Initialize EvalSuite**: Provide a name, system message, tool catalog, and rubric.
2. **Add Evaluation Cases**: Use `add_case` or `extend_case` to include various scenarios.
3. **Specify Expected Tool Calls**: Define the tools and arguments expected for each case.
4. **Assign Critics**: Attach critics relevant to each case to evaluate specific arguments.
5. **Run the Suite**: Execute the suite using the Arcade CLI to collect results.

### Example: Math Tools Evaluation Suite [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#example-math-tools-evaluation-suite)

An evaluation suite for math tools might include cases such as:

- **Adding Two Large Numbers**:
  - **User Message**: “Add 12345 and 987654321”
  - **Expected Tool Call**: `add(a=12345, b=987654321)`
  - **Critics**:
    - `BinaryCritic` for arguments `a` and `b`
- **Calculating Square Roots**:
  - **User Message**: “What is the square root of 3224990521?”
  - **Expected Tool Call**: `sqrt(a=3224990521)`
  - **Critics**:
    - `BinaryCritic` for argument `a`

### Example: Slack Messaging Tools Evaluation Suite [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools\#example-slack-messaging-tools-evaluation-suite)

An evaluation suite for Slack messaging tools might include cases such as:

- **Sending a Direct Message**:
  - **User Message**: “Send a direct message to johndoe saying ‘Hello, can we meet at 3 PM?’”
  - **Expected Tool Call**: `send_dm_to_user(user_name='johndoe', message='Hello, can we meet at 3 PM?')`
  - **Critics**:
    - `BinaryCritic` for `user_name`
    - `SimilarityCritic` for `message`
- **Posting a Message to a Channel**:
  - **User Message**: “Post ‘The new feature is now live!’ in the #announcements channel”
  - **Expected Tool Call**: `send_message_to_channel(channel_name='announcements', message='The new feature is now live!')`
  - **Critics**:
    - `BinaryCritic` for `channel_name`
    - `SimilarityCritic` for `message`

[Retry tools with improved prompt](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt "Retry tools with improved prompt") [Create an evaluation suite](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite "Create an evaluation suite")

## Create a Custom Toolkit
[Home](https://docs.arcade.dev/home "Home") Build toolsCreate a toolkit

# Creating a Toolkit

This guide walks you through the complete process of creating a custom toolkit for Arcade - from initial setup to publishing on PyPI. You’ll build a simple arithmetic toolkit with operations like addition, subtraction, and multiplication.

## Prerequisites [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#prerequisites)

Before starting, make sure you have:

- Python 3.10 or higher (verify with `python --version`)
- An [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=custom-tools)
- An active virtual environment for your shell(s).
  - We recommend using [uv](https://docs.astral.sh/uv/pip/environments/) or [miniconda](https://www.anaconda.com/docs/getting-started/miniconda/main).
  - Toolkits each have a poetry project with their own virtual environment, but toolkits are loaded into the top-level arcade environment based on the active “parent” virtual environment. **The local development commands will not work without an active virtual environment.**
- Arcade CLI installed within your python virtual environment: `pip install arcade-ai`
- Poetry for package management (the generated Makefile uses Poetry)

### Generate a toolkit template [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#generate-a-toolkit-template)

Run the following command to start creating your toolkit:

```nextra-code
arcade new
```

Enter the required information when prompted:

- **Toolkit name**: Choose a descriptive name (e.g., “arithmetic”)
- **Description**: Provide a brief explanation of your toolkit
- **Author name and email**: Your contact information

After completion, a directory with your toolkit name will be created with the following structure:

```nextra-code
arithmetic/
├── arcade_arithmetic/       # Core package directory
│   ├── __init__.py          # Package initialization
│   └── tools/               # Directory for your tools
│       └── __init__.py
├── tests/                   # Test directory
├── pyproject.toml           # Poetry project configuration
├── README.md                # Documentation
└── Makefile                 # Helper commands
```

Navigate to your toolkit directory:

```nextra-code
cd <toolkit_name>
```

### Set up the development environment [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#set-up-the-development-environment)

Install dependencies and pre-commit hooks:

```nextra-code
make install
```

This installs all dependencies specified in `pyproject.toml`, pre-commit hooks for code quality, and your toolkit in development mode.

The Makefile provides several helpful commands:

- `build` \- Build wheel file using poetry
- `bump-version` \- Bump the version in pyproject.toml
- `check` \- Run code quality tools
- `clean-build` \- Clean build artifacts
- `coverage` \- Generate coverage report
- `install` \- Install the poetry environment and pre-commit hooks
- `test` \- Test the code with pytest

### Define your tools [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#define-your-tools)

Create a Python file for your tools in the `arcade_<toolkit_name>/tools` directory:

```nextra-code
# arcade_arithmetic/tools/operations.py
from typing import Annotated, List
from arcade.sdk import tool

@tool
def add(
    a: Annotated[int, "The first number"],
    b: Annotated[int, "The second number"]
) -> Annotated[int, "The sum of the two numbers"]:
    """
    Add two numbers together

    Examples:
        add(3, 4) -> 7
        add(-1, 5) -> 4
    """
    return a + b

@tool
def subtract(
    a: Annotated[int, "The first number"],
    b: Annotated[int, "The second number"]
) -> Annotated[int, "The difference of the two numbers"]:
    """
    Subtract the second number from the first

    Examples:
        subtract(10, 4) -> 6
        subtract(5, 7) -> -2
    """
    return a - b

@tool
def multiply(
    a: Annotated[int, "The first number"],
    b: Annotated[int, "The second number"]
) -> Annotated[int, "The product of the two numbers"]:
    """
    Multiply two numbers together

    Examples:
        multiply(3, 4) -> 12
        multiply(-2, 5) -> -10
    """
    return a * b
```

Update the package initialization files to expose your tools:

```nextra-code
# arcade_arithmetic/tools/__init__.py
from .operations import add, subtract, multiply

__all__ = ["add", "subtract", "multiply"]
```

```nextra-code
# arcade_arithmetic/__init__.py
from arcade_arithmetic.tools import add, subtract, multiply

__all__ = ["add", "subtract", "multiply"]
```

### Test your toolkit [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#test-your-toolkit)

Write tests for your tools in the `tests` directory:

```nextra-code
# tests/test_operations.py
import pytest
from arcade_arithmetic.tools.operations import add, subtract, multiply

def test_add():
    assert add(3, 4) == 7
    assert add(-1, 5) == 4
    assert add(0, 0) == 0

def test_subtract():
    assert subtract(10, 4) == 6
    assert subtract(5, 7) == -2
    assert subtract(0, 0) == 0

def test_multiply():
    assert multiply(3, 4) == 12
    assert multiply(-2, 5) == -10
    assert multiply(0, 5) == 0
```

Run the tests:

```nextra-code
make test
```

Check code quality:

```nextra-code
make check
```

Generate a coverage report (optional):

```nextra-code
make coverage
```

### Verify local installation [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#verify-local-installation)

Your toolkit should already be installed locally from the `make install` command. Verify it’s properly registered:

```nextra-code
arcade show --local
```

You should see your toolkit listed in the output.

### Test with a local worker [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#test-with-a-local-worker)

Start a local worker to test your toolkit with the Arcade API:

```nextra-code
arcade serve
```

Visit [http://localhost:8002/docs](http://localhost:8002/docs) to see your tools in the Swagger UI.

### Deploy your toolkit to Arcade [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#deploy-your-toolkit-to-arcade)

Create a `worker.toml` file in your toolkit’s root directory:

```nextra-code
[[worker]]

[worker.config]
id = "arithmetic-worker"  # Choose a unique ID
secret = "<your-secret>"  # Replace with a secure secret

[worker.local_source]
packages = ["."]  # Path to your toolkit directory
```

Deploy your worker to Arcade:

```nextra-code
arcade deploy
```

Verify the deployment:

```nextra-code
arcade worker list
```

### Package and publish to PyPI [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#package-and-publish-to-pypi)

Clean any previous build artifacts:

```nextra-code
make clean-build
```

If you’re updating an existing package, bump the version:

```nextra-code
make bump-version
```

Update the project metadata in `pyproject.toml`:

```nextra-code
[tool.poetry]
name = "arcade-arithmetic"
version = "0.1.0"
description = "Basic arithmetic operations toolkit for Arcade"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/yourusername/arcade-arithmetic"
```

Create a comprehensive README.md file that explains your toolkit’s purpose, installation, and usage.

Build your package:

```nextra-code
make build
```

Configure Poetry with your PyPI token (recommended for security):

```nextra-code
poetry config pypi-token.pypi your-token-here
```

Publish to PyPI:

```nextra-code
poetry publish
```

Or build and publish in one step:

```nextra-code
poetry publish --build
```

## Using your published toolkit [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#using-your-published-toolkit)

Now that your toolkit is published, you can use it in any Arcade application:

```nextra-code
from arcadepy import Arcade

# Initialize the Arcade client
client = Arcade(base_url="https://api.arcade.dev")

# Create a chat completion that can use your tools
response = client.chat.completions.create(
    messages=[\
        {"role": "system", "content": "You are a helpful assistant with arithmetic skills."},\
        {"role": "user", "content": "Calculate 12 + 34 and then multiply by 2"}\
    ],
    model="gpt-4o",
    tool_choice="generate",
)

print(response.choices[0].message.content)
```

## Ongoing toolkit maintenance [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#ongoing-toolkit-maintenance)

As you continue to develop your toolkit, use these Makefile commands to maintain it:

- `make check` \- Run code quality checks before committing changes
- `make test` \- Run tests to ensure your changes don’t break existing functionality
- `make coverage` \- Monitor test coverage as you add new features
- `make bump-version` \- Update the version when releasing new changes
- `make build` \- Build new distribution packages
- `make clean-build` \- Clean up build artifacts when needed

## Next steps [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-toolkit\#next-steps)

- **Add more tools**: Expand your toolkit with more complex operations
- **Add authentication**: [Learn how to create tools with authentication](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth)
- **Add secrets**: [Learn how to create tools with secrets](https://docs.arcade.dev/home/build-tools/create-a-tool-with-secrets)
- **Evaluate your tools**: [Explore how to evaluate tool performance](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools)
- **Set up CI/CD**: Automate testing and deployment with continuous integration

[Quickstart](https://docs.arcade.dev/home/custom-tools "Quickstart") [Tool Context](https://docs.arcade.dev/home/build-tools/tool-context "Tool Context")

## Handle Tool Errors
[Home](https://docs.arcade.dev/home "Home") [Build tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit "Build tools") Handle tool errors

# Tool errors in Arcade

When working with Arcade’s Tool SDK, you may encounter various types of errors. This guide will help you understand and handle these errors effectively.

## Handling errors in your tools [Permalink for this section](https://docs.arcade.dev/home/build-tools/handle-tool-errors\#handling-errors-in-your-tools)

In most cases, you don’t need to raise errors explicitly in your tools. The `@tool` decorator takes care of proper error propagation and handling. When an unexpected error occurs during tool execution, Arcade’s `ToolExecutor` and `@tool` decorator will raise a `ToolExecutionError` with the necessary context and traceback information.

However, if you want to retry the tool call with additional content to improve the tool call’s input parameters, you can raise a [RetryableToolError](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt) within the tool.

## Common error scenarios [Permalink for this section](https://docs.arcade.dev/home/build-tools/handle-tool-errors\#common-error-scenarios)

Let’s explore some common error scenarios you might encounter:

### 1\. Output type mismatch [Permalink for this section](https://docs.arcade.dev/home/build-tools/handle-tool-errors\#1-output-type-mismatch)

This occurs when the expected output type of a tool does not match the actual output type when executed.

```nextra-code
{
  "name": "tool_call_error",
  "message": "tool call failed - Example.Hello failed: Failed to
  serialize tool output"
}
```

For example, the following tool will raise the above error because the tool’s definition specifies that the output should be a string, but the tool returns a list:

```nextra-code
from typing import Annotated
from arcade.sdk import tool

@tool
def hello(name: Annotated[str, "The name of the friend to greet"]) -> str:
  """
  Says hello to a friend
  """
  return ["hello", name]
```

### 2\. Input parameter type error [Permalink for this section](https://docs.arcade.dev/home/build-tools/handle-tool-errors\#2-input-parameter-type-error)

This occurs when the input parameter of a tool is of an unsupported type.

```nextra-code
Type error encountered while adding tool list_org_repositories from
arcade_github.tools.repositories. Reason: issubclass() arg 1 must be a class
```

For example, the following tool will raise the above error because the tool input parameter is of an unsupported type:

```nextra-code
from typing import Annotated
from arcade.sdk import tool

@tool
def hello(names: Annotated[tuple[str, str, str], "The names of the friends to greet"]) -> str:
  """
  Says hello to a list of friends
  """
  return f"Hello, {names[0]}, {names[1]}, and {names[2]}!"
```

### 3\. Unexpected HTTP error during tool execution [Permalink for this section](https://docs.arcade.dev/home/build-tools/handle-tool-errors\#3-unexpected-http-error-during-tool-execution)

This occurs when the tool makes an HTTP request and receives a non-2xx response. Specifically for the example below, the authenticated user did not have permission to access the private organization’s repositories.

```nextra-code
{
  "name": "tool_call_error",
  "message": "tool call failed - Github.ListOrgRepositories failed: Error accessing 'https://api.github.com/orgs/a-private-org/repos': Failed to process request. Status code: 401"
}
```

[Create a tool with secrets](https://docs.arcade.dev/home/build-tools/create-a-tool-with-secrets "Create a tool with secrets") [Retry tools with improved prompt](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt "Retry tools with improved prompt")

## Arcade Docker Installation
[Home](https://docs.arcade.dev/home "Home") [Install](https://docs.arcade.dev/home/install/overview "Install") Docker

# Docker Installation

## Engine [Permalink for this section](https://docs.arcade.dev/home/install/docker\#engine)

### Pulling the Engine Image [Permalink for this section](https://docs.arcade.dev/home/install/docker\#pulling-the-engine-image)

The Arcade Engine is stateless and the docker image is designed to scale horizontally for production environments.

The docker image for the engine can be pulled with

```nextra-code
docker pull ghcr.io/arcadeai/engine:latest
```

### Running the Engine [Permalink for this section](https://docs.arcade.dev/home/install/docker\#running-the-engine)

The engine can be run with:

```nextra-code
docker run -d -p 9099:9099 -v ./engine.yaml:/bin/engine.yaml ghcr.io/arcadeai/engine:latest
```

where config.yaml is the path to the [configuration file](https://docs.arcade.dev/home/configure/templates).

## Worker [Permalink for this section](https://docs.arcade.dev/home/install/docker\#worker)

Arcade now provides a base Worker image that you can use to build your custom Worker image. Follow the [Build custom worker images with docker](https://docs.arcade.dev/home/serve-tools/docker-worker) guide to create your own Worker image using Arcade’s base Worker image.

[Local](https://docs.arcade.dev/home/install/local "Local") [Toolkits](https://docs.arcade.dev/home/install/toolkits "Toolkits")

## Arcade Installation Guide
[Home](https://docs.arcade.dev/home "Home") InstallOverview

# Installation

Explore the different installation options for Arcade.

- Set up Arcade [locally](https://docs.arcade.dev/home/install/local)
- Run Arcade in [Docker](https://docs.arcade.dev/home/install/docker)
- Kubernetes (coming soon)

## Client [Permalink for this section](https://docs.arcade.dev/home/install/overview\#client)

The Arcade Client can be installed with `pip` by following the [quickstart guide](https://docs.arcade.dev/home/quickstart).

## SDK [Permalink for this section](https://docs.arcade.dev/home/install/overview\#sdk)

The Arcade SDK can be installed with `pip` by following the [custom tools quickstart guide](https://docs.arcade.dev/home/custom-tools).

## Engine [Permalink for this section](https://docs.arcade.dev/home/install/overview\#engine)

### Brew and APT [Permalink for this section](https://docs.arcade.dev/home/install/overview\#brew-and-apt)

The `arcade-engine` binary can be downloaded through system package managers like `brew` or `apt` following the instructions [here](https://docs.arcade.dev/home/install/local#install-the-engine)

### Binary [Permalink for this section](https://docs.arcade.dev/home/install/overview\#binary)

The `arcade-engine` binary can be downloaded through system package managers like `brew` or `apt-get` or [directly](https://deb.arcade.dev/ubuntu/dists/stable/main/)

### Docker [Permalink for this section](https://docs.arcade.dev/home/install/overview\#docker)

Containers can be downloaded from [GHCR](https://github.com/orgs/ArcadeAI/packages).

Apple Silicon Macs and Intel Chip Macs can use the linux/arm64 and linux/amd64
images respectively.

### Kubernetes [Permalink for this section](https://docs.arcade.dev/home/install/overview\#kubernetes)

Kubernetes deployments are not yet supported but coming soon.

[Modal](https://docs.arcade.dev/home/serve-tools/modal-worker "Modal") [Local](https://docs.arcade.dev/home/install/local "Local")

## Google Search Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Google Search

# Google Search

**Description:** Enable agents to perform Google searches using SerpAPI.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade Search toolkit provides a pre-built set of tools for interacting with Google search results. These tools make it easy to build agents and AI apps that can:

- Search Google and return results.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_search\#available-tools)

| Tool Name | Description |
| --- | --- |
| SearchGoogle | Search Google and return organic results. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## SearchGoogle [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_search\#searchgoogle)

See Example >

Search Google using SerpAPI and return organic search results.

**Parameters**

- **`query`** _(string, required)_ The search query.
- **`n_results`** _(integer, optional, Defaults to 5)_ Number of results to retrieve.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_search\#auth)

The Arcade Google Search toolkit uses the [SerpAPI](https://serpapi.com/) to get get results from a Google search.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Google News](https://docs.arcade.dev/toolkits/search/google_news "Google News") [Google Shopping](https://docs.arcade.dev/toolkits/search/google_shopping "Google Shopping")

## Notion Integration Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Notion

# Notion

**Description:** Enable agents to interact with Notion.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/notion)

**Auth:** User authorizationvia the [Notion auth provider](https://docs.arcade.dev/home/auth-providers/notion)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_notion-toolkit)](https://pypi.org/project/arcade_notion-toolkit/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_notion-toolkit)](https://pypi.org/project/arcade_notion-toolkit/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_notion-toolkit)](https://pypi.org/project/arcade_notion-toolkit/)[![Downloads](https://img.shields.io/pypi/dm/arcade_notion-toolkit)](https://pypi.org/project/arcade_notion-toolkit/)

The Arcade Notion toolkit provides a pre-built set of tools for interacting with Notion. These tools make it easy to build agents and AI apps that can:

- Get a page’s content
- Create a new page
- Search for pages or databases by title
- Get the metadata of a Notion object (page or database)
- Get a workspace’s folder structure

## Available tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#available-tools)

These tools are currently available in the Arcade Notion toolkit.

| Tool Name | Description |
| --- | --- |
| GetPageContentById | Get the content of a Notion page as markdown by page ID. |
| GetPageContentByTitle | Get the content of a Notion page as markdown by title. |
| CreatePage | Create a new Notion page by specifying a parent page title. |
| SearchByTitle | Search for pages or databases by title. |
| GetObjectMetadata | Get the metadata of a Notion object (page or database) using its title or ID. |
| GetWorkspaceStructure | Get the complete workspace structure of your Notion workspace. |

If you need to perform an action that’s not listed here, you can [get in touch with us](mailto:contact@arcade.dev) to request a new tool, or [create your own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Notion auth provider](https://docs.arcade.dev/home/auth-providers/notion).

## GetPageContentById [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#getpagecontentbyid)

See Example >

Get the content of a Notion page as markdown with the page’s ID.

**Parameters**

- **`page_id`** _(string, required)_ The ID of the page to get content from.

* * *

## GetPageContentByTitle [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#getpagecontentbytitle)

See Example >

Get the content of a Notion page as markdown with the page’s title.

**Parameters**

- **`title`** _(string, required)_ The title of the page to get content from.

* * *

## CreatePage [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#createpage)

See Example >

Create a new Notion page by specifying an existing parent page and the new page details.

**Parameters**

- **`parent_title`** _(string, required)_ Title of an existing page where the new page will be created.
- **`title`** _(string, required)_ Title of the new page.
- **`content`** _(string, optional)_ The content of the new page.

* * *

## SearchByTitle [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#searchbytitle)

See Example >

Search for similar titles of pages, databases, or both within the user’s Notion workspace. This tool returns minimal information about matching objects without their content.

**Parameters**

- **`query`** _(string, optional)_
A substring to search for within page and database titles. If not provided, all items are returned.
- **`select`** _(str, optional)_
Limit the search to only pages or only databases. If provided, must be one of `page` or `database`. Defaults to both.
- **`order_by`** _(str, optional)_
The direction to sort search results by last edited time. Must be either `ascending` or `descending`. Defaults to `descending`.
- **`limit`** _(int, optional)_
The maximum number of results to return. Defaults to 100. Use -1 for no limit.

* * *

## GetObjectMetadata [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#getobjectmetadata)

See Example >

Get the metadata of a Notion object (page or database) using its title or ID. One of `object_title` or `object_id` must be provided (but not both). The returned metadata includes the object’s ID, timestamps, properties, URL, and more.

**Parameters**

- **`object_title`** _(string, optional)_
The title of the page or database whose metadata to retrieve.
- **`object_id`** _(string, optional)_
The ID of the page or database whose metadata to retrieve.
- **`object_type`** _(str, optional)_
The type of object to match the title against. If provided, must be one of `page` or `database`. Defaults to both if not provided.

* * *

## GetWorkspaceStructure [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#getworkspacestructure)

See Example >

Get the complete workspace structure of your Notion workspace. This tool returns a hierarchical view of pages and databases, making it easier to understand the organization of your workspace.

**Parameters**

_None_

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/notion\#auth)

The Arcade Notion toolkit uses the [Notion auth provider](https://docs.arcade.dev/home/auth-providers/notion) to connect to users’ Notion accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Notion auth provider](https://docs.arcade.dev/home/auth-providers/notion#configuring-notion-auth) with your own Notion app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_notion_toolkit\\
```](https://docs.arcade.dev/home/install/overview)

[Close.io](https://docs.arcade.dev/toolkits/productivity/closeio "Close.io") [Reference](https://docs.arcade.dev/toolkits/productivity/reference "Reference")

## Engine Configuration Templates
[Home](https://docs.arcade.dev/home "Home") [Configure](https://docs.arcade.dev/home/configure/overview "Configure") Configuration Templates

# Engine Config Templates

### engine.yaml [Permalink for this section](https://docs.arcade.dev/home/configure/templates\#engineyaml)

```nextra-code
# yaml-language-server: $schema=https://raw.githubusercontent.com/ArcadeAI/schemas/main/engine/config/1.0/schema.json
$schema: https://raw.githubusercontent.com/ArcadeAI/schemas/main/engine/config/1.0/schema.json

api:
  development: ${env:API_DEVELOPMENT}
  host: ${env:ARCADE_API_HOST}
  port: ${env:ARCADE_API_PORT}


auth:
  providers:
    - id: default-atlassian
      description: 'The default Atlassian provider'
      enabled: false
      type: oauth2
      provider_id: atlassian
      client_id: ${env:ATLASSIAN_CLIENT_ID}
      client_secret: ${env:ATLASSIAN_CLIENT_SECRET}

    - id: default-discord
      description: 'The default Discord provider'
      enabled: false
      type: oauth2
      provider_id: discord
      client_id: ${env:DISCORD_CLIENT_ID}
      client_secret: ${env:DISCORD_CLIENT_SECRET}

    - id: default-dropbox
      description: 'The default Dropbox provider'
      enabled: false
      type: oauth2
      provider_id: dropbox
      client_id: ${env:DROPBOX_CLIENT_ID}
      client_secret: ${env:DROPBOX_CLIENT_SECRET}

    - id: default-github
      description: 'The default GitHub provider'
      enabled: false
      type: oauth2
      provider_id: github
      client_id: ${env:GITHUB_CLIENT_ID}
      client_secret: ${env:GITHUB_CLIENT_SECRET}

    - id: default-google
      description: 'The default Google provider'
      enabled: false
      type: oauth2
      provider_id: google
      client_id: ${env:GOOGLE_CLIENT_ID}
      client_secret: ${env:GOOGLE_CLIENT_SECRET}

    - id: default-linkedin
      description: 'The default LinkedIn provider'
      enabled: false
      type: oauth2
      provider_id: linkedin
      client_id: ${env:LINKEDIN_CLIENT_ID}
      client_secret: ${env:LINKEDIN_CLIENT_SECRET}

    - id: default-microsoft
      description: 'The default Microsoft provider'
      enabled: false
      type: oauth2
      provider_id: microsoft
      client_id: ${env:MICROSOFT_CLIENT_ID}
      client_secret: ${env:MICROSOFT_CLIENT_SECRET}

    - id: default-reddit
      description: 'The default Reddit provider'
      enabled: false
      type: oauth2
      provider_id: reddit
      client_id: ${env:REDDIT_CLIENT_ID}
      client_secret: ${env:REDDIT_CLIENT_SECRET}

    - id: default-slack
      description: 'The default Slack provider'
      enabled: false
      type: oauth2
      provider_id: slack
      client_id: ${env:SLACK_CLIENT_ID}
      client_secret: ${env:SLACK_CLIENT_SECRET}

    - id: default-spotify
      description: 'The default Spotify provider'
      enabled: false
      type: oauth2
      provider_id: spotify
      client_id: ${env:SPOTIFY_CLIENT_ID}
      client_secret: ${env:SPOTIFY_CLIENT_SECRET}

    - id: default-twitch
      description: 'The default Twitch provider'
      enabled: false
      type: oauth2
      provider_id: twitch
      client_id: ${env:TWITCH_CLIENT_ID}
      client_secret: ${env:TWITCH_CLIENT_SECRET}

    - id: default-x
      description: 'The default X provider'
      enabled: false
      type: oauth2
      provider_id: x
      client_id: ${env:X_CLIENT_ID}
      client_secret: ${env:X_CLIENT_SECRET}

    - id: default-zoom
      description: 'The default Zoom provider'
      enabled: false
      type: oauth2
      provider_id: zoom
      client_id: ${env:ZOOM_CLIENT_ID}
      client_secret: ${env:ZOOM_CLIENT_SECRET}


llm:
  models:
    - id: my-openai-model-provider
      openai:
        api_key: ${env:OPENAI_API_KEY}
    #- id: my-anthropic-model-provider
    #  anthropic:
    #    api_key: ${env:ANTHROPIC_API_KEY}
    # - id: my-ollama-model-provider
    #   openai:
    #     base_url: http://localhost:11434
    #     chat_endpoint: /v1/chat/completions
    #     model: llama3.2
    #     api_key: ollama
    #- id: my-groq-model-provider
    #  openai:
    #    base_url: 'https://api.groq.com/openai/v1'
    #    api_key: ${env:GROQ_API_KEY}


security:
  root_keys:
    - id: key1
      default: true
      value: ${env:ROOT_KEY_1}


storage:
  postgres:
    user: ${env:POSTGRES_USER}
    password: ${env:POSTGRES_PASSWORD}
    host: ${env:POSTGRES_HOST}
    port: ${env:POSTGRES_PORT}
    db: ${env:POSTGRES_DB}
    sslmode: require


telemetry:
  environment: ${env:TELEMETRY_ENVIRONMENT}
  logging:
    # debug, info, warn, error
    level: ${env:TELEMETRY_LOGGING_LEVEL}
    encoding: ${env:TELEMETRY_LOGGING_ENCODING}


tools:
  directors:
    - id: default
      enabled: true
      max_tools: 64
      workers:
        - id: worker
          enabled: true
          http:
            uri: ${env:ARCADE_WORKER_URI}
            timeout: 30
            retry: 3
            secret: ${env:ARCADE_WORKER_SECRET}
```

### engine.env [Permalink for this section](https://docs.arcade.dev/home/configure/templates\#engineenv)

```nextra-code
### Engine configuration ###
API_DEVELOPMENT=true
ARCADE_API_HOST=localhost
ARCADE_API_PORT=9099
ANALYTICS_ENABLED=true

# Encryption keys (change this when deploying to production)
ROOT_KEY_1=default-key-value

### Model Provider API keys ###
# OPENAI_API_KEY=
# ANTHROPIC_API_KEY=
# GROQ_API_KEY=


### Security configuration ###
ROOT_KEY_1=


### Storage configuration ###
# POSTGRES_USER=
# POSTGRES_PASSWORD=
# POSTGRES_HOST=
# POSTGRES_PORT=
# POSTGRES_DB=


### Telemetry (OTEL) configuration ###
TELEMETRY_ENVIRONMENT=local
TELEMETRY_LOGGING_LEVEL=debug
TELEMETRY_LOGGING_ENCODING=console


### Worker Configuration ###
ARCADE_WORKER_URI=http://localhost:8002
ARCADE_WORKER_SECRET=dev


# OAuth Providers
ATLASSIAN_CLIENT_ID=""
ATLASSIAN_CLIENT_SECRET=

DISCORD_CLIENT_ID=""
DISCORD_CLIENT_SECRET=

DROPBOX_CLIENT_ID=""
DROPBOX_CLIENT_SECRET=

GITHUB_CLIENT_ID=""
GITHUB_CLIENT_SECRET=

GOOGLE_CLIENT_ID=""
GOOGLE_CLIENT_SECRET=

LINKEDIN_CLIENT_ID=""
LINKEDIN_CLIENT_SECRET=

MICROSOFT_CLIENT_ID=""
MICROSOFT_CLIENT_SECRET=

REDDIT_CLIENT_ID=""
REDDIT_CLIENT_SECRET=

SLACK_CLIENT_ID=""
SLACK_CLIENT_SECRET=

SPOTIFY_CLIENT_ID=""
SPOTIFY_CLIENT_SECRET=

TWITCH_CLIENT_ID=""
SPOTIFY_CLIENT_SECRET=

X_CLIENT_ID=""
X_CLIENT_SECRET=

ZOOM_CLIENT_ID=""
ZOOM_CLIENT_SECRET=
```

[Models](https://docs.arcade.dev/home/configure/models "Models") [Overview](https://docs.arcade.dev/home/supported-models "Overview")

## Google Maps Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Google Maps

# Google Maps

**Description:** Enable agents to get directions between two locations with Google Maps.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade Google Maps toolkit provides a pre-built set of tools for interacting with Google Maps. These tools make it easy to build agents and AI apps that can:

- Get directions to a location using an address or latitude/longitude.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_maps\#available-tools)

| Tool Name | Description |
| --- | --- |
| GetDirectionsBetweenAddresses | Get directions between two addresses. |
| GetDirectionsBetweenCoordinates | Get directions between two latitude/longitude coordinates. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## GetDirectionsBetweenAddresses [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_maps\#getdirectionsbetweenaddresses)

See Example >

Get directions between two addresses.

**Parameters**

- **`origin_address`** _(string, required)_ The origin address. Example: ‘123 Main St, New York, NY 10001’.
- **`destination_address`** _(string, required)_ The destination address. Example: ‘456 Main St, New York, NY 10001’.
- **`language`** _(string, optional, Defaults to ‘en’ English)_ 2-character language code to use in the Google Maps search. A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).
- **`country`** _(string, optional, Defaults to `None`)_ 2-character country code to use in the Google Maps search. A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).
- **`distance_unit`** _(enum ( [GoogleMapsDistanceUnit](https://docs.arcade.dev/toolkits/search/reference#googlemapsdistanceunit)), optional, Defaults to `GoogleMapsDistanceUnit.KM`)_ Distance unit to use in the Google Maps search.
- **`travel_mode`** _(enum ( [GoogleMapsTravelMode](https://docs.arcade.dev/toolkits/search/reference#googlemapstravelmode)), optional, Defaults to `GoogleMapsTravelMode.BEST`)_ Travel mode to use in the Google Maps search.

## GetDirectionsBetweenCoordinates [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_maps\#getdirectionsbetweencoordinates)

See Example >

Get directions between two latitude/longitude coordinates.

**Parameters**

- **`origin_latitude`** _(float, required)_ The origin latitude.
- **`origin_longitude`** _(float, required)_ The origin longitude.
- **`destination_latitude`** _(float, required)_ The destination latitude.
- **`destination_longitude`** _(float, required)_ The destination longitude.
- **`language`** _(string, optional, Defaults to ‘en’ English)_ 2-character language code to use in the Google Maps search. A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).
- **`country`** _(string, optional, Defaults to `None`)_ 2-character country code to use in the Google Maps search. A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).
- **`distance_unit`** _(enum ( [GoogleMapsDistanceUnit](https://docs.arcade.dev/toolkits/search/reference#googlemapsdistanceunit)), optional, Defaults to `GoogleMapsDistanceUnit.KM`)_ Distance unit to use in the Google Maps search.
- **`travel_mode`** _(enum ( [GoogleMapsTravelMode](https://docs.arcade.dev/toolkits/search/reference#googlemapstravelmode)), optional, Defaults to `GoogleMapsTravelMode.BEST`)_ Travel mode to use in the Google Maps search.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_maps\#auth)

The Arcade Google Maps toolkit uses the [SerpAPI](https://serpapi.com/) to get directions.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Default parameters [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_maps\#default-parameters)

Language, Country, Distance Unit, and Travel Mode are configurable through environment variables. When set, they will be used as default for Google Maps tools.

Providing a different value as `language`, `country`, `distance_unit`, or `travel_mode` argument in a tool call will override the default value.

**Language**

The language code is a 2-character code that determines the language in which the API will search and return directions. There are two environment variables:

- `ARCADE_GOOGLE_LANGUAGE`: a default value for all Google tools. If not set, defaults to ‘en’ (English).
- `ARCADE_GOOGLE_MAPS_LANGUAGE`: a default value for the Google Maps tools. If not set, defaults to `ARCADE_GOOGLE_LANGUAGE`.

A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).

**Country**

The country code is a 2-character code that determines the country in which the API will search for directions:

- `ARCADE_GOOGLE_MAPS_COUNTRY`: a default value for the Google Maps tools. If not set, defaults to `None`.

A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).

**Distance Unit**

The distance unit is a string that determines the unit of distance to use in the Google Maps search:

- `ARCADE_GOOGLE_MAPS_DISTANCE_UNIT`: a default value for the Google Maps tools. If not set, defaults to `GoogleMapsDistanceUnit.KM`.

A list of supported distance units can be found [here](https://docs.arcade.dev/toolkits/search/reference#googlemapsdistanceunit).

**Travel Mode**

The travel mode is a string that determines the mode of travel to use in the Google Maps search:

- `ARCADE_GOOGLE_MAPS_TRAVEL_MODE`: a default value for the Google Maps tools. If not set, defaults to `GoogleMapsTravelMode.BEST`.

A list of supported travel modes can be found [here](https://docs.arcade.dev/toolkits/search/reference#googlemapstravelmode).

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Google Jobs](https://docs.arcade.dev/toolkits/search/google_jobs "Google Jobs") [Google News](https://docs.arcade.dev/toolkits/search/google_news "Google News")

## Walmart Product Search
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Walmart

# Walmart Search

**Description:** Enable agents to search for products with Walmart.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade Walmart Search toolkit provides a pre-built set of tools for interacting with Walmart. These tools make it easy to build agents and AI apps that can:

- Search for products listed on Walmart stores;
- Get details about a product.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/walmart\#available-tools)

| Tool Name | Description |
| --- | --- |
| SearchWalmartProducts | Search for products listed on Walmart stores. |
| GetWalmartProductDetails | Get details about a product listed on Walmart. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## SearchWalmartProducts [Permalink for this section](https://docs.arcade.dev/toolkits/search/walmart\#searchwalmartproducts)

See Example >

Search for products listed on Walmart stores.

**Parameters**

- **keywords** _(string, required)_ Keywords to search for. E.g. ‘apple iphone’ or ‘samsung galaxy’
- **sort\_by** _(enum [WalmartSortBy](https://docs.arcade.dev/toolkits/search/reference#walmartsortby), optional, Defaults to `WalmartSortBy.RELEVANCE`)_ Sort the results by the specified criteria. Defaults to `WalmartSortBy.RELEVANCE`.
- **min\_price** _(float, optional, Defaults to `None`)_ Minimum price to filter the results.
- **max\_price** _(float, optional, Defaults to `None`)_ Maximum price to filter the results.
- **next\_day\_delivery** _(bool, optional, Defaults to `False`)_ Whether to filter the results by next day delivery. Defaults to False (returns all products, regardless of delivery status).
- **page** _(int, optional, Defaults to `1`)_ Page number to fetch. Defaults to 1 (first page of results). The maximum page value is 100.

## GetWalmartProductDetails [Permalink for this section](https://docs.arcade.dev/toolkits/search/walmart\#getwalmartproductdetails)

See Example >

Get details about a product listed on Walmart.

**Parameters**

- **item\_id** _(string, required)_ Item ID. E.g. ‘414600577’. This can be retrieved from the search results of the `SearchWalmartProducts` tool.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/walmart\#auth)

The Arcade Walmart Search toolkit uses the [SerpAPI](https://serpapi.com/) to get product information from Walmart.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Reference](https://docs.arcade.dev/toolkits/search/reference "Reference") [Youtube](https://docs.arcade.dev/toolkits/search/youtube "Youtube")

## Dropbox Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Dropbox

# Dropbox

**Description:** Enable agents to interact with files and folders in Dropbox.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/dropbox)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_dropbox)](https://pypi.org/project/arcade_dropbox/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_dropbox)](https://pypi.org/project/arcade_dropbox/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_dropbox)](https://pypi.org/project/arcade_dropbox/)[![Downloads](https://img.shields.io/pypi/dm/arcade_dropbox)](https://pypi.org/project/arcade_dropbox/)

The Arcade Dropbox toolkit provides a pre-built set of tools for interacting with Dropbox. These tools make it easy to build agents and AI apps that can:

- Browse files and folders
- Search for files and folders
- Download files

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/dropbox\#available-tools)

| Tool Name | Description |
| --- | --- |
| ListItemsInFolder | List all items in a folder. |
| SearchFilesAndFolders | Search for files and folders in Dropbox. |
| DownloadFile | Download a file from Dropbox. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## ListItemsInFolder [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/dropbox\#listitemsinfolder)

See Example >

List all items in a folder.

**Parameters**

- **folder\_path** _(string, required)_ Path to the folder. E.g. ‘/My Documents/My Folder’
- **limit** _(int, optional, Defaults to `100`)_ Maximum number of items to return. Defaults to 100. Maximum allowed is 2000.
- **cursor** _(string, optional)_ A cursor to use for pagination. Defaults to `None`.

## SearchFilesAndFolders [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/dropbox\#searchfilesandfolders)

See Example >

Search for files and folders in Dropbox.

**Parameters**

- **keywords** _(string, required)_ The keywords to search for. E.g. ‘quarterly report’
- **search\_in\_folder\_path** _(string, optional)_ Restricts the search to the specified folder path. E.g. ‘/My Documents/My Folder’. Defaults to `None` (search in the entire Dropbox).
- **filter\_by\_category** _(list of enum [DropboxItemCategory](https://docs.arcade.dev/toolkits/productivity/reference#dropboxitemcategory), optional)_ Restricts the search to the specified category(ies) of items. Defaults to `None` (returns all items).
- **limit** _(int, optional, Defaults to `100`)_ Maximum number of items to return. Defaults to 100. Maximum allowed is 2000.
- **cursor** _(string, optional)_ A cursor to use for pagination. Defaults to `None`.

# DownloadFile

See Example >

Download a file from Dropbox.

**Parameters**

- **file\_path** _(string, optional)_ Path to the file. E.g. ‘/My Documents/My Folder/My File.pdf’
- **file\_id** _(string, optional)_ The ID of the file to download. E.g. ‘id:a4ayc\_80\_OEAAAAAAAAAYa’

Note: to call this tool, you must provide either `file_path` or `file_id`.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/dropbox\#auth)

The Arcade Dropbox toolkit uses the [Dropbox auth provider](https://docs.arcade.dev/home/auth-providers/dropbox) to connect to users’ Dropbox accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Dropbox auth provider](https://docs.arcade.dev/home/auth-providers/dropbox#configuring-dropbox-auth) with your own Dropbox app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_dropbox\\
```](https://docs.arcade.dev/home/install/overview)

[Jira](https://docs.arcade.dev/toolkits/productivity/jira "Jira") [Close.io](https://docs.arcade.dev/toolkits/productivity/closeio "Close.io")

## Govee Toolkit Error
# 404

## This page could not be found.

## Atlassian Auth Configuration
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Jira

# Atlassian auth provider

The Atlassian auth provider enables tools and agents to call the Atlassian API on behalf of a user. Behind the scenes, the Arcade Engine and the Atlassian auth provider seamlessly manage Atlassian OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#whats-documented-here)

This page describes how to use and configure Atlassian auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/toolkits/productivity/jira#using-atlassian-auth-in-app-code) that needs to call Atlassian APIs
- Or, your [custom tools](https://docs.arcade.dev/toolkits/productivity/jira#using-atlassian-auth-in-custom-tools) that need to call Atlassian APIs

## Configuring Atlassian auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#configuring-atlassian-auth)

### Create an Atlassian app [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#create-an-atlassian-app)

- Create a Atlassian app in the [Atlassian developer console](https://developer.atlassian.com/console/myapps/)
- In the Authorization tab, click the “Add” action button and set the Callback URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- In the Permissions tab, enable any permissions you need for your app
- In the Settings tab, copy the Client ID and Secret to use below

Next, add the Atlassian app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Atlassian auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#configuring-atlassian-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Atlassian** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-atlassian-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Atlassian app.
5. Click **Save**.

When you use tools that require Atlassian auth using your Arcade account credentials, the Arcade Engine will automatically use this Atlassian OAuth provider.

### Configuring Atlassian auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#configuring-atlassian-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#set-environment-variables)

Set the following environment variables:

```nextra-code
export ATLASSIAN_CLIENT_ID="<your client ID>"
export ATLASSIAN_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
ATLASSIAN_CLIENT_SECRET="<your client secret>"
ATLASSIAN_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `atlassian` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-atlassian
      description: "The default Atlassian provider"
      enabled: true
      type: oauth2
      provider_id: atlassian
      client_id: ${env:ATLASSIAN_CLIENT_ID}
      client_secret: ${env:ATLASSIAN_CLIENT_SECRET}
```

## Using Atlassian auth in app code [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#using-atlassian-auth-in-app-code)

Use the Atlassian auth provider in your own agents and AI apps to get a user token for the Atlassian API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Atlassian API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="atlassian",
    scopes=["read:me", "read:jira-user", "read:confluence-user"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "atlassian", {
  scopes: ["read:me", "read:jira-user", "read:confluence-user"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Atlassian auth in custom tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/jira\#using-atlassian-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Atlassian API.

Use the `Atlassian()` auth class to specify that a tool requires authorization with Atlassian. The `context.authorization.token` field will be automatically populated with the user’s Atlassian token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Atlassian


@tool(
    requires_auth=Atlassian(
        scopes=["read:jira-work"],
    )
)
async def list_projects(
    context: ToolContext,
    query: Annotated[\
        Optional[str],\
        "The query to filter the projects by. Defaults to empty string to list all projects.",\
    ] = "",
) -> Annotated[dict, "The list of projects in a user's Jira instance"]:
    """List a Jira user's projects."""
    url = f"https://api.atlassian.com/ex/jira/<cloudId>/rest/api/3/project/search?query={query}"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[Confluence](https://docs.arcade.dev/toolkits/productivity/confluence "Confluence") [Dropbox](https://docs.arcade.dev/toolkits/productivity/dropbox "Dropbox")

## Google Shopping Search
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Google Shopping

# Google Shopping Search

**Description:** Enable agents to search for products with Google Shopping.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade Google Shopping Search toolkit provides a pre-built set of tools for interacting with Google Shopping. These tools make it easy to build agents and AI apps that can:

- Search for products on Google Shopping;

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_shopping\#available-tools)

| Tool Name | Description |
| --- | --- |
| SearchShoppingProducts | Search for products on Google Shopping. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## SearchGoogleShopping [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_shopping\#searchgoogleshopping)

See Example >

Search for products on Google Shopping.

**Parameters**

- **keywords** _(string, required)_ Keywords to search for. E.g. ‘apple iphone’ or ‘samsung galaxy’
- **`country_code`** _(string, optional, Defaults to ‘us’ United States)_ 2-character country code to use in the Google Shopping search. A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).
- **`language_code`** _(string, optional, Defaults to ‘en’ English)_ 2-character language code to use in the Google Shopping search. A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_shopping\#auth)

The Arcade Google Shopping Search toolkit uses the [SerpAPI](https://serpapi.com/) to get product information from Google Shopping.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Default parameter values [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_shopping\#default-parameter-values)

Language and Country are configurable through environment variables. When set, they will be used as default for YouTube tools.

Providing a different value as `language_code` or `country_code` argument in a tool call will override the default value set in the environment variables.

**Language**

The language code is a 2-character code that determines the language in which the API will search and return video information. There are two environment variables:

- `ARCADE_GOOGLE_LANGUAGE`: a default value for all Google Search tools. If not set, defaults to ‘en’ (English).
- `ARCADE_GOOGLE_SHOPPING_LANGUAGE`: a default value for the Google Shopping Search tools. If not set, defaults to `ARCADE_GOOGLE_LANGUAGE`.

A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).

**Country**

The country code is a 2-character code that determines the country in which the API will search for videos:

- `ARCADE_GOOGLE_COUNTRY`: a default value for all Google Search tools. If not set, defaults to `None`.
- `ARCADE_GOOGLE_SHOPPING_COUNTRY`: a default value for the Google Shopping Search tools. If not set, defaults to `ARCADE_GOOGLE_COUNTRY`. If `ARCADE_GOOGLE_COUNTRY` is not set, the default country for Google Shopping tools will be `us` (United States).

A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Google Search](https://docs.arcade.dev/toolkits/search/google_search "Google Search") [Reference](https://docs.arcade.dev/toolkits/search/reference "Reference")

## Arcade Engine Configuration
[Home](https://docs.arcade.dev/home "Home") [Configure](https://docs.arcade.dev/home/configure/overview "Configure") Engine

# Arcade Engine configuration

Arcade Engine’s configuration is a [YAML file](https://yaml.org/) with the following sections:

| Section | Description |
| --- | --- |
| API Configuration | Configures the server for specific protocols |
| Auth Configuration | Configures user authorization providers and token storage |
| Cache Configuration | Configures the short-lived cache |
| Model Configuration | Defines a collection of AI models for routing |
| Security Configuration | Configures security and encryption |
| Storage Configuration | Configures persistent storage |
| Telemetry Configuration | Configures telemetry and observability (OTEL) |
| Tools Configuration | Configures tools for AI models to use |

## Specify a config file [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#specify-a-config-file)

To start the Arcade Engine, pass a config file with `-c` or `--config`:

```nextra-code
arcade-engine -c /path/to/config.yaml
```

Or, for local development:

```nextra-code
arcade dev -c /path/to/config.yaml
```

## Dotenv files [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#dotenv-files)

Arcade Engine automatically loads environment variables from `.env` files in the directory where it was called. Use the `-e` or `--env` flag to specify a path:

```nextra-code
arcade-engine -e .env.dev -c config.yaml
```

## Secrets [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#secrets)

Arcade Engine supports two ways of passing sensitive information like API keys without storing them directly in the config file.

Environment variables:

```nextra-code
llm:
  models:
    - id: primary
      openai:
        api_key: ${env:OPENAI_API_KEY}
```

External files (useful in cloud setups):

```nextra-code
llm:
  models:
    - id: primary
      openai:
        api_key: ${file:/path/to/secret}
```

## API configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#api-configuration)

HTTP is the supported protocol for Arcade Engine’s API. The following configuration options are available:

- `api.development` _(optional, default: `false`)_ \- Enable development mode, with more logging and simple [worker authentication](https://docs.arcade.dev/home/configure/engine#http-worker-configuration)
- `api.http.host` _(default: `localhost`)_ \- Address to which Arcade Engine binds its server (e.g., `localhost` or `0.0.0.0`)
- `api.http.read_timeout` _(optional, default: `30s`)_ \- Timeout for reading data from clients
- `api.http.write_timeout` _(optional, default: `1m`)_ \- Timeout for writing data to clients
- `api.http.idle_timeout` _(optional, default: `30s`)_ \- Timeout for idle connections
- `api.http.max_request_body_size` _(optional, default: `4Mb`)_ \- Maximum request body size

A typical configuration for production looks like:

```nextra-code
api:
  development: false
  host: localhost
  port: 9099
```

For local development, set `api.development = true`. In development mode, Arcade Engine does not require [worker authentication](https://docs.arcade.dev/home/configure/engine#http-worker-configuration).

## Auth configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#auth-configuration)

Arcade Engine manages auth for [AI tools](https://docs.arcade.dev/home/auth/auth-tool-calling) and [direct API calls](https://docs.arcade.dev/home/auth/call-third-party-apis-directly). It supports many built-in [auth providers](https://docs.arcade.dev/home/auth-providers), and can also connect to any [OAuth 2.0](https://docs.arcade.dev/home/auth-providers/oauth2) authorization server.

The `auth.providers` section defines the providers that users can authorize with. Each provider must have a unique `id` in the array. There are two ways to configure a provider:

For [built-in providers](https://docs.arcade.dev/home/auth-providers), use the `provider_id` field to reference the pre-built configuration. For example:

```nextra-code
auth:
  providers:
    - id: default-github
      description: The default GitHub provider
      enabled: true
      type: oauth2
      provider_id: github
      client_id: ${env:GITHUB_CLIENT_ID}
      client_secret: ${env:GITHUB_CLIENT_SECRET}
```

For custom OAuth 2.0 providers, specify the full connection details in the `oauth2` sub-section. For full documentation on the custom provider configuration, see the [OAuth 2.0 provider configuration](https://docs.arcade.dev/home/auth-providers/oauth2) page.

You can specify a mix of built-in and custom providers.

## Cache configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#cache-configuration)

The `cache` section configures the short-lived cache.

Configuring the cache is optional. If not configured, the cache will default to an in-memory cache implementation suitable for a single-node Arcade Engine deployment.

The `cache` section has the following configuration options:

- `api_key_ttl` _(optional, default: `10s`)_ \- The time-to-live for API keys in the cache

Two cache implementations are available:

- `in_memory` \- _(default)_ An in-memory cache implementation suitable for a single-node Arcade Engine deployment.
- `redis` \- A Redis cache implementation suitable for a multi-node Arcade Engine deployment:

```nextra-code
cache:
  api_key_ttl: 10s
  redis:
    addr: 'localhost:6379'
    password: ''
    db: 0
```

## Model configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#model-configuration)

The `llm.models` section defines the models that the engine can route to, and the API keys or parameters for each model. Each item in the `models` array must have a unique `id` and a provider-specific configuration.

This example shows configuration for connecting to OpenAI and Anthropic:

```nextra-code
llm:
  models:
    - id: primary
      openai:
        api_key: ${env:OPENAI_API_KEY}
    - id: secondary
      anthropic:
        api_key: ${env:ANTHROPIC_API_KEY}
        api_version: '2023-06-01'
```

For more details on model configuration and model-specific parameters, see [model configuration](https://docs.arcade.dev/home/configure/models).

### Routing [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#routing)

When client code calls the Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models), it specifies a model by name. Arcade Engine matches the model name to a model in the configuration and routes the request to the appropriate provider.

If more than one model provider is configured, Arcade Engine will attempt to route to the correct provider using known model names.

```nextra-code
from openai import OpenAI

client = OpenAI(base_url="http://localhost:9099/v1")

response = client.chat.completions.create(
    messages=[\
        {"role": "user", "content": "Who is the CEO of Apple?"},\
    ],
    model="gpt-4o",
)
```

If two model providers have the same models or a custom model is used, the provider can be explicitly specified using its `id`.

For example, given an `llm.models` configuration with one provider named `primary`, this request will be routed to `primary` with the model `gpt-4o`:

```nextra-code
response = client.chat.completions.create(
    messages=[\
        {"role": "user", "content": "Who is the CEO of Apple?"},\
    ],
    model="primary/gpt-4o",
)
```

## Security configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#security-configuration)

The `security` section configures the root encryption keys that the Arcade Engine uses to encrypt and decrypt data at rest. See the [storage configuration](https://docs.arcade.dev/home/configure/engine#storage-configuration) section below to configure where data is stored.

A typical configuration looks like this:

```nextra-code
security:
  root_keys:
    - id: key1
      default: true
      value: ${env:ROOT_KEY_1}
```

Keys should be a long random string of characters. For example:

```nextra-code
openssl rand -base64 32
```

### Default root key [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#default-root-key)

When you [install Arcade Engine locally](https://docs.arcade.dev/home/install/local), an `engine.env` file is created with a default root key:

```nextra-code
# Encryption keys (change this when deploying to production)
ROOT_KEY_1=default-key-value
```

This default value can only be used in development mode (see [API configuration](https://docs.arcade.dev/home/configure/engine#api-configuration) above).

You **must** replace the value of `ROOT_KEY_1` in `engine.env` before deploying to production.

## Storage configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#storage-configuration)

The `storage` section configures the storage backend that the Arcade Engine uses to store persistent data.

There are three storage implementations available:

- `in_memory` \- _(default)_ An in-memory database, suitable for testing.
- `sqlite` \- A SQLite file on disk, suitable for local development:

```nextra-code
storage:
  sqlite:
    # Stores DB in ~/.arcade/arcade-engine.sqlite3
    connection_string: '@ARCADE_HOME/arcade-engine.sqlite3'
```

- `postgres` \- A PostgreSQL database, suitable for production:

```nextra-code
storage:
  postgres:
    user: ${env:POSTGRES_USER}
    password: ${env:POSTGRES_PASSWORD}
    host: ${env:POSTGRES_HOST}
    port: ${env:POSTGRES_PORT}
    db: ${env:POSTGRES_DB}
    sslmode: require
```

## Telemetry configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#telemetry-configuration)

Arcade supports logs, metrics, and traces with [OpenTelemetry](https://opentelemetry.io/).

If you are using the Arcade Engine locally, you can set the `environment` field to `local`. This will only output logs to the console:

```nextra-code
telemetry:
  environment: local
  logging:
    # debug, info, warn, error, fatal
    level: debug
    encoding: console
```

To connect to OpenTelemetry compatible collectors, set the necessary [OpenTelemetry environment variables](https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/) in the `engine.env` file.
`environment` and `version` are fields that are added to the telemetry attributes, which can be filtered on later.

```nextra-code
telemetry:
  environment: prod
  logging:
    level: info
    encoding: console
```

### Notes [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#notes)

- The Engine service name is set to `arcade_engine`
- Traces currently cover the `/v1/health` and `/v1/chat/completions` endpoints, as well as authentication attempts

## Tools configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#tools-configuration)

Arcade Engine orchestrates [tools](https://docs.arcade.dev/home/use-tools/tools-overview) that AI models can use. Tools are executed by distributed workers called **workers**, which are grouped into **directors**.

The `tools.directors` section configures the workers that are available to service tool calls:

```nextra-code
tools:
  directors:
    - id: default
      enabled: true
      max_tools: 64
      workers:
        - id: local_worker
          enabled: true
          http:
            uri: 'http://localhost:8002'
            timeout: 30
            retry: 3
```

When a worker is added to an enabled director, all of the tools hosted by that worker will be available to the model and through the Arcade API.

### HTTP worker configuration [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#http-worker-configuration)

The `http` sub-section configures the HTTP client used to call the worker’s tools:

- `uri` _(required)_ \- The base URL of the worker’s tools
- `secret` _(required)_ \- Secret used to authenticate with the worker
- `timeout` _(optional, default: `30s`)_ \- Timeout for calling the worker’s tools
- `retry` _(optional, default: `3`)_ \- Number of times to retry a failed tool call

Workers must be configured with a `secret` that is used to authenticate with
the worker. This ensures that workers are not exposed to the public internet
without security.

If `api.development = true`, the secret will default to `"dev"` for local development **only**. In production, the secret must be set to a random value.

## Config file version history [Permalink for this section](https://docs.arcade.dev/home/configure/engine\#config-file-version-history)

- 1.0: [Full example](https://raw.githubusercontent.com/ArcadeAI/docs/refs/heads/main/examples/code/home/configuration/engine/full_config.1.0.yaml) and [schema](https://raw.githubusercontent.com/ArcadeAI/schemas/refs/heads/main/engine/config/1.0/schema.json)

[Arcade Deploy](https://docs.arcade.dev/home/configure/arcade-deploy "Arcade Deploy") [Models](https://docs.arcade.dev/home/configure/models "Models")

## Arcade Tools Quickstart
[Home](https://docs.arcade.dev/home "Home") Quickstart

# Quickstart

First, make sure you have these pre-requisites installed on your system:

- **Python 3.10** or higher

Verify your Python version by running `python --version` or `python3 --version` in your terminal.
- **pip**: The Python package installer should be available. It’s typically included with Python.
- **Arcade Account**: Sign up for an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=custom-tools) if you haven’t already.

Let’s set up Arcade and give it a try!

### Obtain an API key [Permalink for this section](https://docs.arcade.dev/home/custom-tools\#obtain-an-api-key)

Install the Arcade CLI and SDK and log in. Your Arcade API key will be printed to the console as well as saved to `~/.arcade/credentials.yaml`.

```nextra-code
pip install arcade-ai
arcade login
```

### Try `arcade chat` [Permalink for this section](https://docs.arcade.dev/home/custom-tools\#try-arcade-chat)

With Arcade CLI installed, you can test out our API with the `arcade chat` command:

```nextra-code
arcade chat
```

This launches a chat with the Arcade Cloud Engine (hosted at `api.arcade.dev`). All pre-built Arcade tools are available to use.

For example, try asking:

```nextra-code
star the ArcadeAI/arcade-ai repo on Github
```

Arcade will ask you to authorize with GitHub, and then the AI assistant will star the [ArcadeAI/arcade-ai](https://github.com/ArcadeAI/arcade-ai) repo on your behalf.

You’ll see output similar to this:

```nextra-code
Assistant (gpt-4o):
I starred the ArcadeAI/arcade-ai repo on Github for you!
```

You can use Ctrl-C to exit the chat at any time.

### Try more tools [Permalink for this section](https://docs.arcade.dev/home/custom-tools\#try-more-tools)

Try prompting the AI with different requests:

- Search the web to find when The Winds of Winter will be released
- Summarize my emails from today
- What’s playing on my Spotify right now?

To see all tools available in the Cloud, run:

```nextra-code
arcade show
```

Great job! 🎉 You’ve set up Arcade and used your first tool.

### Next steps [Permalink for this section](https://docs.arcade.dev/home/custom-tools\#next-steps)

- [Learn about tools](https://docs.arcade.dev/home/use-tools/tools-overview) and how they work
- Learn how to [call tools with models](https://docs.arcade.dev/home/use-tools/call-tools-with-models)
- Or, jump ahead to building your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit)

[Managing user authorization](https://docs.arcade.dev/home/mastra/user-auth-interrupts "Managing user authorization") [Create a toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit "Create a toolkit")

## OneDrive Toolkit Error
# 404

## This page could not be found.

## Spotify Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") EntertainmentSpotify

# Spotify

**Description:** Enable agents to interact with Spotify tracks.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/spotify)

**Auth:** User authorizationvia the [Spotify auth provider](https://docs.arcade.dev/home/auth-providers/spotify)

This Toolkit is not available in Arcade Cloud. You can use these tools with a [self-hosted](https://docs.arcade.dev/home/install/overview) instance of Arcade.

[![PyPI Version](https://img.shields.io/pypi/v/arcade_spotify)](https://pypi.org/project/arcade_spotify/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_spotify)](https://pypi.org/project/arcade_spotify/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_spotify)](https://pypi.org/project/arcade_spotify/)[![Downloads](https://img.shields.io/pypi/dm/arcade_spotify)](https://pypi.org/project/arcade_spotify/)

The Arcade Spotify toolkit provides a pre-built set of tools for interacting with Spotify. These tools make it easy to build agents and AI apps that can:

- Get information about tracks
- Search for tracks
- Control playback

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#available-tools)

These tools are currently available in the Arcade Spotify toolkit.

| Tool Name | Description |
| --- | --- |
| GetTrackFromId | Get information about a track |
| AdjustPlaybackPosition | Adjust the playback position within the currently playing track. Note: This tool currently requires a self-hosted instance of Arcade. |
| SkipToPreviousTrack | Skip to the previous track in the user's queue, if any. Note: This tool currently requires a self-hosted instance of Arcade. |
| SkipToNextTrack | Skip to the next track in the user's queue, if any. Note: This tool currently requires a self-hosted instance of Arcade. |
| PausePlayback | Pause the currently playing track, if any. Note: This tool currently requires a self-hosted instance of Arcade. |
| ResumePlayback | Resume the currently playing track, if any. Note: This tool currently requires a self-hosted instance of Arcade. |
| StartTracksPlaybackById | Start playback of a list of tracks (songs). Note: This tool currently requires a self-hosted instance of Arcade. |
| GetPlaybackState | Get information about the user's current playback state, including track or episode, and active device. Note: This tool currently requires a self-hosted instance of Arcade. |
| GetCurrentlyPlaying | Get information about the user's currently playing track. Note: This tool currently requires a self-hosted instance of Arcade. |
| PlayArtistByName | Plays a song by an artist and queues four more songs by the same artist. Note: This tool currently requires a self-hosted instance of Arcade. |
| PlayTrackByName | Plays a song by name. Note: This tool currently requires a self-hosted instance of Arcade. |
| GetAvailableDevices | Get the available devices. Note: This tool currently requires a self-hosted instance of Arcade. |
| Search | Search Spotify catalog information. Note: This tool currently requires a self-hosted instance of Arcade. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Spotify auth\\
provider](https://docs.arcade.dev/home/auth-providers/spotify#using-spotify-auth-in-customtools).

## GetTrackFromId [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#gettrackfromid)

See Example >

Get information about a track

**Parameters**

- `track_id` _(string, required)_ The Spotify ID of the track

* * *

## AdjustPlaybackPosition [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#adjustplaybackposition)

See Example >

Adjust the playback position within the currently playing track.

Knowledge of the current playback state is NOT needed to use this tool as it handles clamping the position to valid start/end boundaries to prevent overshooting or negative values.

This tool allows you to seek to a specific position within the currently playing track. You can either provide an absolute position in milliseconds or a relative position from the current playback position in milliseconds.

Note: Either absolute\_position\_ms or relative\_position\_ms must be provided, but not both.

**Parameters**

- `absolute_position_ms` _(integer, optional)_ The absolute position in milliseconds to seek to

- `relative_position_ms` _(integer, optional)_ The relative position from the current playback position in milliseconds to seek to


* * *

## SkipToPreviousTrack [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#skiptoprevioustrack)

See Example >

Skip to the previous track in the user’s queue, if any

* * *

## SkipToNextTrack [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#skiptonexttrack)

See Example >

Skip to the next track in the user’s queue, if any

* * *

## PausePlayback [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#pauseplayback)

See Example >

Pause the currently playing track, if any

* * *

## ResumePlayback [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#resumeplayback)

See Example >

Resume the currently playing track, if any

* * *

## StartTracksPlaybackById [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#starttracksplaybackbyid)

See Example >

Start playback of a list of tracks (songs)

**Parameters**

- `track_ids` _(array, required)_ A list of Spotify track (song) IDs to play. Order of execution is not guarenteed.

- `position_ms` _(integer, optional)_ The position in milliseconds to start the first track from


* * *

## GetPlaybackState [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#getplaybackstate)

See Example >

Get information about the user’s current playback state, including track or episode, and active device. This tool does not perform any actions. Use other tools to control playback.

* * *

## GetCurrentlyPlaying [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#getcurrentlyplaying)

See Example >

Get information about the user’s currently playing track

* * *

## PlayArtistByName [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#playartistbyname)

See Example >

Plays a song by an artist and queues four more songs by the same artist

**Parameters**

- `name` _(string, required)_ The name of the artist to play

* * *

## PlayTrackByName [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#playtrackbyname)

See Example >

Plays a song by name

**Parameters**

- `track_name` _(string, required)_ The name of the track to play

- `artist_name` _(string, optional)_ The name of the artist of the track


## GetAvailableDevices [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#getavailabledevices)

See Example >

Get the available devices

* * *

## Search [Permalink for this section](https://docs.arcade.dev/toolkits/entertainment/spotify\#search)

See Example >

Search Spotify catalog information

Explanation of the q parameter: You can narrow down your search using field filters. The available filters are album, artist, track, year, upc, tag:hipster, tag:new, isrc, and genre. Each field filter only applies to certain result types.

The artist and year filters can be used while searching albums, artists and tracks. You can filter on a single year or a range (e.g. 1955-1960).
The album filter can be used while searching albums and tracks.
The genre filter can be used while searching artists and tracks.
The isrc and track filters can be used while searching tracks.
The upc, tag:new and tag:hipster filters can only be used while searching albums. The tag:new filter will return albums released in the past two weeks and tag:hipster can be used to return only albums with the lowest 10% popularity.

Example: q=“remaster track:Doxy artist:Miles Davis”

**Parameters**

- `q` _(string, required)_ The search query

- `types` _(array, required)_ The types of results to return, Valid values are ‘album’, ‘artist’, ‘playlist’, ‘track’, ‘show’, ‘episode’, ‘audiobook’

- `limit` _(integer, optional)_ The maximum number of results to return. Defaults to `1`.


## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_spotify\\
```](https://docs.arcade.dev/home/install/overview)

[Zoom](https://docs.arcade.dev/toolkits/social-communication/zoom "Zoom") [Twitch](https://docs.arcade.dev/toolkits/entertainment/twitch "Twitch")

## Model Configuration Guide
[Home](https://docs.arcade.dev/home "Home") [Configure](https://docs.arcade.dev/home/configure/overview "Configure") Models

# Models

Here is a list of supported model providers:

- [OpenAI](https://docs.arcade.dev/home/configure/models#openai)
- [Anthropic](https://docs.arcade.dev/home/configure/models#anthropic)
- [Ollama](https://docs.arcade.dev/home/configure/models#ollama)

## OpenAI [Permalink for this section](https://docs.arcade.dev/home/configure/models\#openai)

[OpenAI](https://openai.com/)

Below is an example OpenAI provider config:

```nextra-code
llm:
  models:
    - id: my-openai-model-provider
      openai:
        base_url: https://api.openai.com/v1
        chat_endpoint: /chat/completions
        model: gpt-3.5-turbo
        api_key: <YOUR API KEY>
        default_params:
          temperature: 0.8
          top_p: 1
          max_tokens: 100
          n: 1
          frequency_penalty: 0
          presence_penalty: 0
          seed: 42
```

## Anthropic [Permalink for this section](https://docs.arcade.dev/home/configure/models\#anthropic)

[Anthropic](https://www.anthropic.com/)

Below is an example Anthropic provider config:

```nextra-code
llm:
  models:
    - id: anthropic
      anthropic:
        base_url: https://api.anthropic.com/v1
        api_version: "2023-06-01"
        chat_endpoint: /messages
        model: claude-instant-1.2
        api_key: <YOUR API KEY>
        default_params:
          system: You are a helpful assistant.
          temperature: 1
          max_tokens: 250
```

## Ollama [Permalink for this section](https://docs.arcade.dev/home/configure/models\#ollama)

[Ollama](https://ollama.com/) is a great way to serve Open Source language models locally and beyond.

Here is an example Ollama configuration using the OpenAI client:

```nextra-code
llm:
  models:
    - id: ollama
      openai:
        base_url: http://localhost:11434
        chat_endpoint: /v1/chat/completions
        model: llama3.2
        api_key: ollama # Required, but ignored
        default_params:
          temperature: 0.8
          top_p: 0.9
          num_ctx: 2048
          top_k: 40
```

[Engine](https://docs.arcade.dev/home/configure/engine "Engine") [Configuration Templates](https://docs.arcade.dev/home/configure/templates "Configuration Templates")

## YouTube Video Search
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Youtube

# YouTube Search

**Description:** Enable agents to search for videos on YouTube.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade YouTube Search toolkit provides a pre-built set of tools for interacting with YouTube. These tools make it easy to build agents and AI apps that can:

- Search for videos on YouTube;
- Get details about a video.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/youtube\#available-tools)

| Tool Name | Description |
| --- | --- |
| SearchYoutubeVideos | Search for videos on YouTube. |
| GetYoutubeVideoDetails | Get details about a video on YouTube. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## SearchYoutubeVideos [Permalink for this section](https://docs.arcade.dev/toolkits/search/youtube\#searchyoutubevideos)

See Example >

Search for videos on YouTube.

**Parameters**

- **keywords** _(string, required)_ Keywords to search for. E.g. ‘apple iphone’ or ‘samsung galaxy’
- **`language_code`** _(string, optional, Defaults to ‘en’ English)_ 2-character language code to use in the YouTube search. A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).
- **`country_code`** _(string, optional, Defaults to ‘us’ United States)_ 2-character country code to use in the YouTube search. A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).
- **`next_page_token`** _(string, optional, Defaults to ‘None’)_ The next page token to use for pagination. Defaults to `None` (start from the first page).

## GetYoutubeVideoDetails [Permalink for this section](https://docs.arcade.dev/toolkits/search/youtube\#getyoutubevideodetails)

See Example >

Get details about a video on YouTube.

**Parameters**

- **video\_id** _(string, required)_ Video ID. E.g. ‘414600577’. This can be retrieved from the search results of the `SearchYoutubeVideos` tool.
- **`language_code`** _(string, optional, Defaults to ‘en’ English)_ 2-character language code to return information about the video. A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).
- **`country_code`** _(string, optional, Defaults to ‘us’ United States)_ 2-character country code to return information about the video. A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/youtube\#auth)

The Arcade YouTube Search toolkit uses the [SerpAPI](https://serpapi.com/) to get video information from YouTube.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Default parameter values [Permalink for this section](https://docs.arcade.dev/toolkits/search/youtube\#default-parameter-values)

Language and Country are configurable through environment variables. When set, they will be used as default for YouTube tools.

Providing a different value as `language_code` or `country_code` argument in a tool call will override the default value set in the environment variables.

**Language**

The language code is a 2-character code that determines the language in which the API will search and return video information. There are two environment variables:

- `ARCADE_GOOGLE_LANGUAGE`: a default value for all Google Search tools. If not set, defaults to ‘en’ (English).
- `ARCADE_YOUTUBE_SEARCH_LANGUAGE`: a default value for the YouTube Search tools. If not set, defaults to `ARCADE_GOOGLE_LANGUAGE`.

A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).

**Country**

The country code is a 2-character code that determines the country in which the API will search for videos:

- `ARCADE_GOOGLE_COUNTRY`: a default value for all Google Search tools. If not set, defaults to `None`.
- `ARCADE_YOUTUBE_SEARCH_COUNTRY`: a default value for the YouTube Search tools. If not set, defaults to `ARCADE_GOOGLE_COUNTRY`. If `ARCADE_GOOGLE_COUNTRY` is not set, the default country for YouTube tools will be `us` (United States).

A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Walmart](https://docs.arcade.dev/toolkits/search/walmart "Walmart") [Hubspot](https://docs.arcade.dev/toolkits/sales/hubspot "Hubspot")

## Dropbox Item Categories
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Reference

## DropboxItemCategory [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/reference\#dropboxitemcategory)

- **IMAGE**: `'image'`
- **DOCUMENT**: `'document'`
- **PDF**: `'pdf'`
- **SPREADSHEET**: `'spreadsheet'`
- **PRESENTATION**: `'presentation'`
- **AUDIO**: `'audio'`
- **VIDEO**: `'video'`
- **FOLDER**: `'folder'`
- **PAPER**: `'paper'`

[Notion](https://docs.arcade.dev/toolkits/productivity/notion "Notion") [Readme](https://docs.arcade.dev/toolkits/social-communication/twilio/readme "Readme")

## Local Arcade Installation
[Home](https://docs.arcade.dev/home "Home") [Install](https://docs.arcade.dev/home/install/overview "Install") Local

# Installing Arcade Locally

This guide will help you install Arcade and set up your development environment. If you are developing tools to use with Arcade, this guide will provide you with a complete local deployment of Arcade for developing and testing tools.

## Prerequisites [Permalink for this section](https://docs.arcade.dev/home/install/local\#prerequisites)

Before you begin, make sure you have the following:

- **Python 3.10 or higher**
- **pip**: The Python package installer should be available. It’s typically included with Python.
- **Arcade Account**: Sign up for an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=local-install) if you haven’t already.
- **Package Manager**: Either Brew (macOS) or Apt (linux) to install the engine binary.

Verify your Python version by running `python --version` or `python3 --version` in your terminal.

## Installation [Permalink for this section](https://docs.arcade.dev/home/install/local\#installation)

### Install the Client [Permalink for this section](https://docs.arcade.dev/home/install/local\#install-the-client)

To connect to the cloud or local Arcade Engine, we need to install the Arcade SDK and CLI from the `arcade-ai` package.

```nextra-code
pip install 'arcade-ai[evals]'
arcade login
```

For a simple example on using the Arcade CLI, see the [quickstart on building tools](https://docs.arcade.dev/home/custom-tools)

### Install the Engine [Permalink for this section](https://docs.arcade.dev/home/install/local\#install-the-engine)

To run the Arcade Engine locally, you’ll need to install `arcade-engine`. Choose the installation method that matches your operating system.

This will install a template engine configuration.

macOS (Homebrew)Ubuntu/Debian (APT)Windows (coming soon)

```nextra-code
brew install ArcadeAI/tap/arcade-engine
```

```nextra-code
wget -qO - https://deb.arcade.dev/public-key.asc | sudo apt-key add -
echo "deb https://deb.arcade.dev/ubuntu stable main" | sudo tee /etc/apt/sources.list.d/arcade-ai.list
sudo apt update
sudo apt install arcade-engine
```

```nextra-code
Windows support is coming soon!
```

Want to see Windows support sooner? Show your interest by adding a 👍 to [this GitHub issue](https://github.com/ArcadeAI/arcade-ai/issues/258).

### Install a toolkit [Permalink for this section](https://docs.arcade.dev/home/install/local\#install-a-toolkit)

In order to run the Arcade worker, you’ll need to install at least one tool. For local development, you can just `pip install` a tool in the same environment as the client.

```nextra-code
pip install arcade-math
```

For more information on installing toolkits, see the [Toolkit Installation](https://docs.arcade.dev/home/install/toolkits) page.

To see all available toolkits, view the [Toolkits Page](https://docs.arcade.dev/toolkits).

### Set OpenAI API key [Permalink for this section](https://docs.arcade.dev/home/install/local\#set-openai-api-key)

Before starting the Engine, we need to set an OpenAI API Key that the Engine can use to connect to OpenAI.

Edit the `engine.env` file to set the `OPENAI_API_KEY` environment variable:

```nextra-code
OPENAI_API_KEY="<your_openai_api_key>"
```

See the [configuration overview](https://docs.arcade.dev/home/configure/overview) for more information on how to configure Arcade Engine and how to locate the `engine.env` file.

### Start the Engine and worker [Permalink for this section](https://docs.arcade.dev/home/install/local\#start-the-engine-and-worker)

To run both the engine and a local worker, use:

```nextra-code
arcade dev
```

The Engine and worker should both be running locally now.

To run the Engine on it’s own, you can run:

```nextra-code
arcade-engine
```

Note that the Engine requires at least one Arcade worker to run. `arcade dev` starts both the Engine and a worker automatically.

### Connect [Permalink for this section](https://docs.arcade.dev/home/install/local\#connect)

To chat with the running Engine, in a separate terminal instance, run:

```nextra-code
arcade chat -h localhost
```

You are now chatting with Arcade locally! To see an example of chatting, view the [quickstart](https://docs.arcade.dev/home/custom-tools).

## Next Steps [Permalink for this section](https://docs.arcade.dev/home/install/local\#next-steps)

- **Building Tools**: Learn how to build tools with your local Arcade Instance in the [Creating a Toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit) guide.
- **Hosting With Docker**: Learn how to run the [Engine in Docker](https://docs.arcade.dev/home/install/docker).

## Troubleshooting [Permalink for this section](https://docs.arcade.dev/home/install/local\#troubleshooting)

### Engine Binary Not Found [Permalink for this section](https://docs.arcade.dev/home/install/local\#engine-binary-not-found)

```nextra-code
❌ Engine binary not found
```

or

```nextra-code
command not found: arcade-engine
```

This means that the Arcade Engine cannot be found in your path. Brew and Apt will automatically add the binary to you path.

Check that the binary has been properly installed (These are the common installation locations):

**Brew**

```nextra-code
ls $HOMEBREW_REPOSITORY/Cellar/arcade-engine/<version>/bin/arcade-engine
```

**Apt**

```nextra-code
ls /usr/bin/arcade-engine
```

If the binary is found, add it to your path with:

```nextra-code
export PATH=$PATH:/path/to/your/binary
```

### Toolkits Not Found [Permalink for this section](https://docs.arcade.dev/home/install/local\#toolkits-not-found)

```nextra-code
No toolkits found in Python environment. Exiting...
```

This means that there are no toolkits found in the same environment as the Arcade SDK. Ensure that you are installing the toolkit package in the same environment and see the [Toolkit Installation Guide](https://docs.arcade.dev/home/install/toolkits) for more details.

### Engine Config Not Found [Permalink for this section](https://docs.arcade.dev/home/install/local\#engine-config-not-found)

```nextra-code
❌ Config file 'engine.yaml' not found in any of the default locations.
```

or

```nextra-code
Arcade Engine has finished with error: unable to read config file $HOME/.arcade/engine.yaml: open $HOME/.arcade/engine.yaml: no such file or directory
```

`arcade dev` will search for the engine config in known directories including:

- $HOME/.arcade/engine.yaml
- $HOMEBREW\_REPOSITORY/etc/arcade-engine/engine.yaml (Homebrew)
- /etc/arcade-ai/engine.yaml (Apt)

The engine config will be downloaded by and added to one of these locations when installing the engine.

When running the engine without `arcade dev`, the config needs to be in the `$HOME/.arcade/` directory or explicitly located with `arcade-engine -c /path/to/engine.yaml`

If you cannot find your engine config, you can save and use the [Configuration Templates](https://docs.arcade.dev/home/configure/templates).

* * *

[Overview](https://docs.arcade.dev/home/install/overview "Overview") [Docker](https://docs.arcade.dev/home/install/docker "Docker")

## Arcade Configuration Overview
[Home](https://docs.arcade.dev/home "Home") ConfigureOverview

# Configuration Overview

Arcade uses configuration files to manage engine settings and default values. When you install the Arcade Engine, two files are created:

- The `engine.yaml` file for engine configuration.
- The `engine.env` file for environment variables.

Let’s explore each file to understand their purpose and how to locate them.

## Engine configuration file [Permalink for this section](https://docs.arcade.dev/home/configure/overview\#engine-configuration-file)

The `engine.yaml` file controls Arcade Engine settings and manages supported models. It supports variable expansion so you can integrate secrets and environment values seamlessly. You can customize this file to suit your setup. For more details, check the [Engine Configuration](https://docs.arcade.dev/home/configure/engine) page.

Choose your installation method to view the default location of `engine.yaml`:

macOS (Homebrew)Ubuntu/Debian (APT)Manual Download

```nextra-code
$HOMEBREW_REPOSITORY/etc/arcade-engine/engine.yaml
```

```nextra-code
/etc/arcade-ai/engine.yaml
```

```nextra-code
$HOME/.arcade/engine.yaml
```

To manually download the engine.yaml, you can get an example from the [Configuration Templates](https://docs.arcade.dev/home/configure/templates#engineyaml) and add it to `$HOME/.arcade/engine.yaml`.

## Engine environment file [Permalink for this section](https://docs.arcade.dev/home/configure/overview\#engine-environment-file)

The `engine.env` file contains default environment variables that power Arcade Engine. You can override these defaults by exporting your own variables or by editing the file directly.

Select your installation method below to see the default path for `engine.env`:

macOS (Homebrew)Ubuntu/Debian (APT)Manual Download

```nextra-code
$HOMEBREW_REPOSITORY/etc/arcade-engine/engine.env
```

```nextra-code
/etc/arcade-ai/engine.env
```

```nextra-code
$HOME/.arcade/engine.env
```

To manually download the `engine.env`, refer to the [Configuration Templates](https://docs.arcade.dev/home/configure/templates#engineenv).

[Toolkits](https://docs.arcade.dev/home/install/toolkits "Toolkits") [Arcade Deploy](https://docs.arcade.dev/home/configure/arcade-deploy "Arcade Deploy")

## Arcade Obsidian Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Obsidian

# Arcade Obsidian Toolkit

The Arcade Obsidian Toolkit is a community contributed toolkit verified by the Arcade team. To learn more about the toolkit, please visit the [Arcade Obsidian GitHub repository](https://github.com/spartee/arcade-obsidian).

[Outlook Mail](https://docs.arcade.dev/toolkits/productivity/microsoft/outlook_mail "Outlook Mail") [Confluence](https://docs.arcade.dev/toolkits/productivity/confluence "Confluence")

## Google News Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Google News

# Google News

**Description:** Enable agents to search for news stories with Google News.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade Google News toolkit provides a pre-built set of tools for interacting with Google News. These tools make it easy to build agents and AI apps that can:

- Search for news stories with Google News.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_news\#available-tools)

| Tool Name | Description |
| --- | --- |
| SearchNews | Search for news stories with Google News. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## SearchNews [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_news\#searchnews)

See Example >

Search for news stories with Google News.

**Parameters**

- **`query`** _(string, required)_ Keywords to search for news articles. E.g. ‘Apple launches new iPhone’.
- **`country_code`** _(string, optional, Defaults to `None`)_ 2-character country code to search for news articles. E.g. ‘us’ (United States). Defaults to `None` (search news globally).
- **`language`** _(string, optional, Defaults to ‘en’ English)_ 2-character language code to search for news articles. E.g. ‘en’ (English). Defaults to ‘en’ (English).
- **`limit`** _(int, optional, Defaults to `None`)_ Maximum number of news articles to return. Defaults to None (returns all results found by the API).

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_news\#auth)

The Arcade Google News toolkit uses the [SerpAPI](https://serpapi.com/) to get news data from Google News.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Default parameters [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_news\#default-parameters)

Language and Country are configurable through environment variables. When set, they will be used as default for Google News tools.

Providing a different value as `language_code` or `country_code` argument in the tool call will override the default value.

**Language**

The language code is a 2-character code that determines the language in which the API will search and return news articles. There are two environment variables:

- `ARCADE_GOOGLE_LANGUAGE`: a default value for all Google search tools. If not set, defaults to ‘en’ (English).
- `ARCADE_GOOGLE_NEWS_LANGUAGE`: a default value for the news search tools. If not set, defaults to `ARCADE_GOOGLE_LANGUAGE`.

A list of supported language codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#languagecodes).

**Country**

The country code is a 2-character code that determines the country in which the API will search for news articles. There are two environment variables:

- `ARCADE_GOOGLE_NEWS_COUNTRY`: a default value for the `SearchNews` tool. If not set, defaults to `None` (search news globally).

A list of supported country codes can be found [here](https://docs.arcade.dev/toolkits/search/reference#countrycodes).

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Google Maps](https://docs.arcade.dev/toolkits/search/google_maps "Google Maps") [Google Search](https://docs.arcade.dev/toolkits/search/google_search "Google Search")

## Arcade Toolkit Installation
[Home](https://docs.arcade.dev/home "Home") [Install](https://docs.arcade.dev/home/install/overview "Install") Toolkits

# Install a tool or toolkit

## Running a Local worker [Permalink for this section](https://docs.arcade.dev/home/install/toolkits\#running-a-local-worker)

To run a local worker without the arcade engine, you can run the following command locally:

```nextra-code
arcade serve
```

This will check for any toolkits installed in the current environment and register them with the worker.

You can also pass in the `--host` and `--port` flags to specify the host and port to run the worker on. The default host is `127.0.0.1` and the default port is `8002`.

## PyPI Installation [Permalink for this section](https://docs.arcade.dev/home/install/toolkits\#pypi-installation)

All Arcade toolkits are available on PyPI. To install a toolkit, run the following in the same environment as the arcade-ai package:

```nextra-code
pip install arcade-[toolkit_name]
```

For example, to install the math toolkit, run:

```nextra-code
pip install arcade-math
```

To verify the installation, run:

```nextra-code
arcade show --local
```

which should return output similar to:

```nextra-code
┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┓
┃ Name         ┃ Description                  ┃ Toolkit ┃ Version ┃
┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━┩
│ Math.Add     │ Add two numbers together     │  Math   │  0.1.0  │
└──────────────┴──────────────────────────────┴─────────┴─────────┘
```

These are all tools that are installed in the same environment as the arcade-ai package.

See our [Toolkits Overview page](https://docs.arcade.dev/toolkits) for all available toolkits and individual installation instructions.

## Local Package Installation [Permalink for this section](https://docs.arcade.dev/home/install/toolkits\#local-package-installation)

Locally built toolkits can also be installed with:

```nextra-code
pip install .
```

or

```nextra-code
pip install <wheel_name>
```

in the same environment as the arcade-ai package.

## Hosted Toolkits [Permalink for this section](https://docs.arcade.dev/home/install/toolkits\#hosted-toolkits)

To add a toolkit to a hosted worker such as FastAPI, you can register them in the worker itself. This allows you to explicitly define which tools should be included on a particular worker.

```nextra-code
import arcade_math

app = FastAPI()

worker_secret = os.environ.get("ARCADE_WORKER_SECRET")
worker = FastAPIWorker(app, secret=worker_secret)

worker.register_toolkit(Toolkit.from_module(arcade_math))
```

## Showing Tools From a Hosted Engine [Permalink for this section](https://docs.arcade.dev/home/install/toolkits\#showing-tools-from-a-hosted-engine)

To show all tools that are available on an engine, you can run

```nextra-code
arcade show -h <engine_host> -p <engine_port>
```

```nextra-code
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━┓
┃ Name                                   ┃ Description                                                               ┃ Package  ┃ Version ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━┩
│ Github.CountStargazers                 │ Count the number of stargazers (stars) for a GitHub repository.           │ Github   │ 0.0.15  │
│ Github.CreateIssue                     │ Create an issue in a GitHub repository.                                   │ Github   │ 0.0.15  │
│ Github.CreateIssueComment              │ Create a comment on an issue in a GitHub repository.                      │ Github   │ 0.0.15  │
│ Github.CreateReplyForReviewComment     │ Create a reply to a review comment for a pull request.                    │ Github   │ 0.0.15  │
│ Github.CreateReviewComment             │ Create a review comment for a pull request in a GitHub repository.        │ Github   │ 0.0.15  │
│ Github.GetPullRequest                  │ Get details of a pull request in a GitHub repository.                     │ Github   │ 0.0.15  │
│ Github.GetRepository                   │ Get a repository.                                                         │ Github   │ 0.0.15  │
....
```

## Authenticated Tools [Permalink for this section](https://docs.arcade.dev/home/install/toolkits\#authenticated-tools)

Some Toolkits may need authentication through an API key or OAuth, which can be configured in the Arcade Engine. To see the specific configuration requirements, you can checkout our [Auth Providers](https://docs.arcade.dev/home/auth-providers).

[Docker](https://docs.arcade.dev/home/install/docker "Docker") [Overview](https://docs.arcade.dev/home/configure/overview "Overview")

## Stripe Payment Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Payments & FinanceStripe

# Stripe

**Description:** Empower your agents to interact with the Stripe API.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/stripe)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_stripe)](https://pypi.org/project/arcade_stripe/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_stripe)](https://pypi.org/project/arcade_stripe/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_stripe)](https://pypi.org/project/arcade_stripe/)[![Downloads](https://img.shields.io/pypi/dm/arcade_stripe)](https://pypi.org/project/arcade_stripe/)

The Arcade Stripe toolkit lets you interact with the Stripe API. Use these tools to build intelligent agents and applications that process payments, create invoices, and more.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#available-tools)

| Tool Name | Description |
| --- | --- |
| CreateCustomer | This tool will create a customer in Stripe. |
| ListCustomers | This tool will fetch a list of Customers from Stripe. |
| CreateProduct | This tool will create a product in Stripe. |
| ListProducts | This tool will fetch a list of Products from Stripe. |
| CreatePrice | This tool will create a price in Stripe. If a product has not already been |
| ListPrices | This tool will fetch a list of Prices from Stripe. |
| CreatePaymentLink | This tool will create a payment link in Stripe. |
| ListInvoices | This tool will list invoices in Stripe. |
| CreateInvoice | This tool will create an invoice in Stripe. |
| CreateInvoiceItem | This tool will create an invoice item in Stripe. |
| FinalizeInvoice | This tool will finalize an invoice in Stripe. |
| RetrieveBalance | This tool will retrieve the balance from Stripe. It takes no input. |
| CreateRefund | This tool will refund a payment intent in Stripe. |
| ListPaymentIntents | This tool will list payment intents in Stripe. |
| CreateBillingPortalSession | This tool will create a billing portal session. |

If you need an action that’s not listed here, please [contact us](mailto:contact@arcade.dev) to request a new tool, or [create your own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## CreateCustomer [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createcustomer)

Create a customer in Stripe.

**Parameters**

- **`name`** _(string, required)_: The name of the customer.
- **`email`** _(string, optional)_: The email address of the customer.

See Example >

## ListCustomers [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#listcustomers)

Fetch a list of customers from Stripe.

**Parameters**

- **`limit`** _(int, optional, defaults to 10)_: A limit on the number of objects to be returned. Limit can range between 1 and 100.
- **`email`** _(string, optional)_: A case-sensitive filter on the list based on the customer’s email field.

See Example >

## CreateProduct [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createproduct)

Create a product in Stripe.

**Parameters**

- **`name`** _(string, required)_: The name of the product.
- **`description`** _(string, optional)_: The description of the product.

See Example >

## ListProducts [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#listproducts)

Fetch a list of products from Stripe.

**Parameters**

- **`limit`** _(int, optional, defaults to 10)_: A limit on the number of products returned. Limit can range between 1 and 100, and defaults to 10.

See Example >

## CreatePrice [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createprice)

Create a price in Stripe.

**Parameters**

- **`product`** _(string, required)_: The ID of the product to create the price for.
- **`unit_amount`** _(int, required)_: The unit amount of the price in cents.
- **`currency`** _(string, required)_: The currency of the price.

See Example >

## ListPrices [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#listprices)

Fetch a list of prices from Stripe.

**Parameters**

- **`product`** _(string, optional)_: The ID of the product to list prices for.
- **`limit`** _(int, optional, defaults to 10)_: A limit on the number of objects to be returned. Limit can range between 1 and 100, and defaults to 10.

See Example >

## CreatePaymentLink [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createpaymentlink)

Create a payment link in Stripe.

**Parameters**

- **`price`** _(string, required)_: The ID of the price to create the payment link for.
- **`quantity`** _(int, required)_: The quantity of the product to include.

See Example >

## ListInvoices [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#listinvoices)

List invoices in Stripe.

**Parameters**

- **`customer`** _(string, optional)_: The ID of the customer to list invoices for.
- **`limit`** _(int, optional, defaults to 10)_: A limit on the number of invoices returned. Limit can range between 1 and 100, and defaults to 10.

See Example >

## CreateInvoice [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createinvoice)

Create an invoice in Stripe.

**Parameters**

- **`customer`** _(string, required)_: The ID of the customer to create the invoice for.
- **`days_until_due`** _(int, optional)_: The number of days until the invoice is due.

See Example >

## CreateInvoiceItem [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createinvoiceitem)

Create an invoice item in Stripe.

**Parameters**

- **`customer`** _(string, required)_: The ID of the customer to create the invoice item for.
- **`price`** _(string, required)_: The ID of the price for the item.
- **`invoice`** _(string, required)_: The ID of the invoice to create the item for.

See Example >

## FinalizeInvoice [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#finalizeinvoice)

Finalize an invoice in Stripe.

**Parameters**

- **`invoice`** _(string, required)_: The ID of the invoice to finalize.

See Example >

## RetrieveBalance [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#retrievebalance)

Retrieve the balance from Stripe. This tool takes no inputs.

See Example >

## CreateRefund [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createrefund)

Refund a payment intent in Stripe.

**Parameters**

- **`payment_intent`** _(string, required)_: The ID of the PaymentIntent to refund.
- **`amount`** _(int, optional)_: The refund amount to refund in cents.

See Example >

## ListPaymentIntents [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#listpaymentintents)

List payment intents in Stripe.

**Parameters**

- **`customer`** _(string, optional)_: The ID of the customer to list payment intents for.
- **`limit`** _(int, optional)_: A limit on the number of payment intents returned. Limit can range between 1 and 100, and defaults to 10.

See Example >

## CreateBillingPortalSession [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#createbillingportalsession)

Create a billing portal session in Stripe.

**Parameters**

- **`customer`** _(string, required)_: The ID of the customer to create the billing portal session for.
- **`return_url`** _(string, optional)_: The default URL to return to afterwards.

See Example >

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/payments/stripe\#auth)

The Arcade Stripe toolkit uses the [Stripe Agent Toolkit](https://github.com/stripe/agent-toolkit) to interact with the Stripe API.

- **Required Secret:**
  - `STRIPE_SECRET_KEY`: Your Stripe API key.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_stripe\\
```](https://docs.arcade.dev/home/install/overview)

[Code Sandbox](https://docs.arcade.dev/toolkits/development/code-sandbox "Code Sandbox") [Google Finance](https://docs.arcade.dev/toolkits/search/google_finance "Google Finance")

## Atlassian Auth Configuration
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Productivity & Docs](https://docs.arcade.dev/toolkits/productivity/google "Productivity & Docs") Confluence

# Confluence

The Atlassian auth provider enables tools and agents to call the Atlassian API on behalf of a user. Behind the scenes, the Arcade Engine and the Atlassian auth provider seamlessly manage Atlassian OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#whats-documented-here)

This page describes how to use and configure Atlassian auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/toolkits/productivity/confluence#using-atlassian-auth-in-app-code) that needs to call Atlassian APIs
- Or, your [custom tools](https://docs.arcade.dev/toolkits/productivity/confluence#using-atlassian-auth-in-custom-tools) that need to call Atlassian APIs

## Configuring Atlassian auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#configuring-atlassian-auth)

### Create an Atlassian app [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#create-an-atlassian-app)

- Create a Atlassian app in the [Atlassian developer console](https://developer.atlassian.com/console/myapps/)
- In the Authorization tab, click the “Add” action button and set the Callback URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- In the Permissions tab, enable any permissions you need for your app
- In the Settings tab, copy the Client ID and Secret to use below

Next, add the Atlassian app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Atlassian auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#configuring-atlassian-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Atlassian** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-atlassian-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Atlassian app.
5. Click **Save**.

When you use tools that require Atlassian auth using your Arcade account credentials, the Arcade Engine will automatically use this Atlassian OAuth provider.

### Configuring Atlassian auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#configuring-atlassian-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#set-environment-variables)

Set the following environment variables:

```nextra-code
export ATLASSIAN_CLIENT_ID="<your client ID>"
export ATLASSIAN_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
ATLASSIAN_CLIENT_SECRET="<your client secret>"
ATLASSIAN_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `atlassian` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-atlassian
      description: "The default Atlassian provider"
      enabled: true
      type: oauth2
      provider_id: atlassian
      client_id: ${env:ATLASSIAN_CLIENT_ID}
      client_secret: ${env:ATLASSIAN_CLIENT_SECRET}
```

## Using Atlassian auth in app code [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#using-atlassian-auth-in-app-code)

Use the Atlassian auth provider in your own agents and AI apps to get a user token for the Atlassian API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Atlassian API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="atlassian",
    scopes=["read:me", "read:jira-user", "read:confluence-user"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "atlassian", {
  scopes: ["read:me", "read:jira-user", "read:confluence-user"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Atlassian auth in custom tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/confluence\#using-atlassian-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Atlassian API.

Use the `Atlassian()` auth class to specify that a tool requires authorization with Atlassian. The `context.authorization.token` field will be automatically populated with the user’s Atlassian token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Atlassian


@tool(
    requires_auth=Atlassian(
        scopes=["read:jira-work"],
    )
)
async def list_projects(
    context: ToolContext,
    query: Annotated[\
        Optional[str],\
        "The query to filter the projects by. Defaults to empty string to list all projects.",\
    ] = "",
) -> Annotated[dict, "The list of projects in a user's Jira instance"]:
    """List a Jira user's projects."""
    url = f"https://api.atlassian.com/ex/jira/<cloudId>/rest/api/3/project/search?query={query}"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[Obsidian](https://docs.arcade.dev/toolkits/productivity/obsidian "Obsidian") [Jira](https://docs.arcade.dev/toolkits/productivity/jira "Jira")

## Google Flights Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Search Tools](https://docs.arcade.dev/toolkits/search/google_finance "Search Tools") Google Flights

# Google Flights

**Description:** Empower your agents to search for flights using Arcade.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/search)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_search)](https://pypi.org/project/arcade_search/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_search)](https://pypi.org/project/arcade_search/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_search)](https://pypi.org/project/arcade_search/)[![Downloads](https://img.shields.io/pypi/dm/arcade_search)](https://pypi.org/project/arcade_search/)

The Arcade Google Flights toolkit lets you search for flights with ease. Use these tools to build intelligent agents and applications that:

- Search for round-trip flights.
- Search for one-way flights.

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_flights\#available-tools)

| Tool Name | Description |
| --- | --- |
| SearchRoundtripFlights | Retrieve roundtrip flight search results using Google Flights. |
| SearchOneWayFlights | Retrieve one-way flight search results using Google Flights. |

## SearchRoundtripFlights [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_flights\#searchroundtripflights)

Retrieve flight search results using Google Flights.

**Parameters**

- **`departure_airport_code`** _(string, required)_: The departure airport code. An uppercase 3-letter code.
- **`arrival_airport_code`** _(string, required)_: The arrival airport code. An uppercase 3-letter code.
- **`outbound_date`** _(string, required)_: Flight outbound date in YYYY-MM-DD format.
- **`return_date`** _(string, optional)_: Flight return date in YYYY-MM-DD format.
- **`currency_code`** _(string, optional)_: Currency of the returned prices. Defaults to ‘USD’.
- **`travel_class`** _(enum ( [GoogleFlightsTravelClass](https://docs.arcade.dev/toolkits/search/reference#googleflightstravelclass)), optional)_: Travel class of the flight. Defaults to ‘ECONOMY’.
- **`num_adults`** _(int, optional)_: Number of adult passengers. Defaults to 1.
- **`num_children`** _(int, optional)_: Number of child passengers. Defaults to 0.
- **`max_stops`** _(enum ( [GoogleFlightsMaxStops](https://docs.arcade.dev/toolkits/search/reference#googleflightsmaxstops)), optional)_: Maximum number of stops (layovers) for the flight. Defaults to any number of stops.
- **`sort_by`** _(enum ( [GoogleFlightsSortBy](https://docs.arcade.dev/toolkits/search/reference#googleflightssortby)), optional)_: The sorting order of the results. Defaults to TOP\_FLIGHTS.

See Example >

## SearchOneWayFlights [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_flights\#searchonewayflights)

Retrieve flight search results for a one-way flight using Google Flights.

**Parameters**

- **`departure_airport_code`** _(string, required)_: The departure airport code. An uppercase 3-letter code.
- **`arrival_airport_code`** _(string, required)_: The arrival airport code. An uppercase 3-letter code.
- **`outbound_date`** _(string, required)_: Flight departure date in YYYY-MM-DD format.
- **`currency_code`** _(string, optional)_: Currency of the returned prices. Defaults to ‘USD’.
- **`travel_class`** _(enum ( [GoogleFlightsTravelClass](https://docs.arcade.dev/toolkits/search/reference#googleflightstravelclass)), optional)_: Travel class of the flight. Defaults to ‘ECONOMY’.
- **`num_adults`** _(int, optional)_: Number of adult passengers. Defaults to 1.
- **`num_children`** _(int, optional)_: Number of child passengers. Defaults to 0.
- **`max_stops`** _(enum ( [GoogleFlightsMaxStops](https://docs.arcade.dev/toolkits/search/reference#googleflightsmaxstops)), optional)_: Maximum number of stops (layovers) for the flight. Defaults to any number of stops.
- **`sort_by`** _(enum ( [GoogleFlightsSortBy](https://docs.arcade.dev/toolkits/search/reference#googleflightssortby)), optional)_: The sorting order of the results. Defaults to TOP\_FLIGHTS.

See Example >

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/search/google_flights\#auth)

The Arcade Google Flights toolkit uses the [SerpAPI](https://serpapi.com/) to search for flights from Google Flights.

- **Secret:**
  - `SERP_API_KEY`: Your SerpAPI API key.

Setting the `SERP_API_KEY` secret is only required if you are [self-hosting](https://docs.arcade.dev/home/install/overview) Arcade. If you’re using Arcade Cloud, the secret is already set for you. To manage your secrets, go to the [Secrets page](https://api.arcade.dev/dashboard/auth/secrets) in the Arcade Dashboard.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_search\\
```](https://docs.arcade.dev/home/install/overview)

[Google Finance](https://docs.arcade.dev/toolkits/search/google_finance "Google Finance") [Google Hotels](https://docs.arcade.dev/toolkits/search/google_hotels "Google Hotels")

## Hubspot CRM Integration
[Integrations](https://docs.arcade.dev/toolkits "Integrations") SalesHubspot

# Hubspot

**Description:** Enable agents to interact with the Hubspot CRM.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/hubspot)

**Auth:** OAuth 2.0

[![PyPI Version](https://img.shields.io/pypi/v/arcade_hubspot)](https://pypi.org/project/arcade_hubspot/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_hubspot)](https://pypi.org/project/arcade_hubspot/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_hubspot)](https://pypi.org/project/arcade_hubspot/)[![Downloads](https://img.shields.io/pypi/dm/arcade_hubspot)](https://pypi.org/project/arcade_hubspot/)

The Arcade Hubspot toolkit provides a pre-built set of tools for interacting with the Hubspot CRM. These tools make it easy to build agents and AI apps that can:

- Search and retrieve company data and associated objects (deals, calls, email messages, etc)
- Search and retrieve contact data and associated objects (calls, email messages, notes, tasks, etc)
- Create contacts

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#available-tools)

| Tool Name | Description |
| --- | --- |
| GetCompanyDataByKeywords | Retrieve data about companies in Hubspot using full-text search. |
| GetContactDataByKeywords | Retrieve data about contacts in Hubspot using full-text search. |
| CreateContact | Create a contact in Hubspot. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## GetCompanyDataByKeywords [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#getcompanydatabykeywords)

See Example >

Retrieve company data with associated contacts, deals, calls, emails, meetings, notes, and tasks.

**Parameters**

- **keywords** _(string, required)_ The keywords to search for companies. It will match against the company name, phone, and website.
- **limit** _(int, optional, Defaults to `10`)_ The maximum number of companies to return. Defaults to 10. Max is 10.
- **next\_page\_token** _(string, optional)_ The token to get the next page of results. Defaults to None (returns first page of results)

## GetContactDataByKeywords [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#getcontactdatabykeywords)

See Example >

Retrieve contact data with associated companies, deals, calls, emails, meetings, notes, and tasks.

**Parameters**

- **keywords** _(string, required)_ The keywords to search for. E.g. ‘quarterly report’
- **limit** _(int, optional, Defaults to `10`)_ The maximum number of contacts to return. Defaults to 10. Max is 10.
- **next\_page\_token** _(string, optional)_ The token to get the next page of results. Defaults to None (returns first page of results)

## CreateContact [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#createcontact)

See Example >

Create a contact associated with a company.

**Parameters**

- **company\_id** _(string, required)_ The ID of the company to create the contact for.
- **first\_name** _(string, required)_ The first name of the contact.
- **last\_name** _(string, optional)_ The last name of the contact.
- **email** _(string, optional)_ The email address of the contact.
- **phone** _(string, optional)_ The phone number of the contact.
- **mobile\_phone** _(string, optional)_ The mobile phone number of the contact.
- **job\_title** _(string, optional)_ The job title of the contact.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#auth)

The Arcade Hubspot toolkit uses the [Hubspot auth provider](https://docs.arcade.dev/home/auth-providers/hubspot) to connect to users’ Hubspot accounts.

### Arcade Cloud [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#arcade-cloud)

The Arcade Cloud offers a default Hubspot auth provider. If you use it, there’s nothing to configure. Your users will see `Arcade` as the name of the application requesting permission.

Alternatively, you can [configure a custom Hubspot auth provider](https://docs.arcade.dev/home/auth-providers/hubspot#use-your-own-hubspot-app-credentials) with your own Hubspot app credentials. This way, your users will see your application’s name requesting permission.

### Self-hosted Arcade Engine [Permalink for this section](https://docs.arcade.dev/toolkits/sales/hubspot\#self-hosted-arcade-engine)

With a [self-hosted installation of Arcade](https://docs.arcade.dev/home/install/local), you must [configure the Hubspot auth provider](https://docs.arcade.dev/home/auth-providers/hubspot) with your own Hubspot app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_hubspot\\
```](https://docs.arcade.dev/home/install/overview)

[Youtube](https://docs.arcade.dev/toolkits/search/youtube "Youtube") [Contribute a toolkit](https://docs.arcade.dev/toolkits/contribute-a-toolkit "Contribute a toolkit")

## Call Tools with LLMs
[Home](https://docs.arcade.dev/home "Home") [Tool Calling](https://docs.arcade.dev/home/use-tools/tools-overview "Tool Calling") Call Tools with LLMs

# Call Tools with LLMs

In this guide, you’ll learn how to have an LLM choose a tool to call given a prompt and a list of available tools.

To do this, you’ll build an AI chatbot that can interact with GitHub on your behalf using Arcade’s [Github toolkit](https://docs.arcade.dev/toolkits/development/github/github).

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#prerequisites)

1. Create an [Arcade account](https://api.arcade.dev/signup?utm_source=docs&utm_medium=page&utm_campaign=call-tools-with-models)
2. Get an [Arcade API key](https://docs.arcade.dev/home/api-keys) and take note, you’ll need it in the next steps.

### Install Arcade Client [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#install-arcade-client)

PythonJavaScript

```nextra-code
pip install arcadepy
```

```nextra-code
npm install @arcadeai/arcadejs
```

### Instantiate the client [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#instantiate-the-client)

PythonJavaScript

Create a new script called `call_tools_with_llms.py` and instantiate the OpenAI client pointing to Arcade’s endpoint and using the Arcade API key:

```nextra-code
import os
from openai import OpenAI

# Initialize the OpenAI client, pointing to Arcade
client = OpenAI(
    base_url="https://api.arcade.dev/v1",
    api_key="arcade_api_key",
)
```

Create a new script called `call_tools_with_llms.js` and instantiate the OpenAI client pointing to Arcade’s endpoint and using the Arcade API key:

```nextra-code
import { OpenAI } from "openai";

// Initialize the OpenAI client, pointing to Arcade
const client = new OpenAI({
  baseURL: "https://api.arcade.dev/v1",
  apiKey: "arcade_api_key",
});
```

### Set the user ID [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#set-the-user-id)

Arcade needs a unique identifier for your application user (this could be an email address, a UUID, etc). In this example, simply use your email address as the user ID:

PythonJavaScript

```nextra-code
user_id = "you@example.com"
```

```nextra-code
let userId = "you@example.com";
```

### Determine which tools will be available to the chatbot agent [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#determine-which-tools-will-be-available-to-the-chatbot-agent)

We are listing a few Github tools below. For an exhaustive list, refer to the [Github toolkit](https://docs.arcade.dev/toolkits/development/github/github). You could add tools from other toolkits here as well, but we’ll be sticking to Github for this example.

This list restricts which tools the LLM can choose to call based on any user prompt.

If you provide an empty list, the LLM will be able to call any tool available in the Arcade engine, from all toolkits.

PythonJavaScript

```nextra-code
tools = [\
    "GitHub.SetStarred",\
    "Github.ListStargazers",\
    "Github.CreateIssue",\
    "Github.CreateIssueComment",\
    "Github.ListPullRequests",\
    "Github.GetPullRequest",\
    "Github.UpdatePullRequest",\
    "Github.GetRepository",\
    "Github.ListRepositoryActivities",\
]
```

```nextra-code
let tools = [\
  "GitHub.SetStarred",\
  "Github.ListStargazers",\
  "Github.CreateIssue",\
  "Github.CreateIssueComment",\
  "Github.ListPullRequests",\
  "Github.GetPullRequest",\
  "Github.UpdatePullRequest",\
  "Github.GetRepository",\
  "Github.ListRepositoryActivities",\
];
```

### Generate a response [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#generate-a-response)

Use `client.chat.completions.create` to generate a response to a user’s prompt:

PythonJavaScript

```nextra-code
while True:
    # Ask the user for input
    prompt = input("Enter your prompt (type 'exit' to quit):")
    if prompt.lower() == "exit":
        break

    # Let the LLM choose a tool to use based on the user's prompt
    response = client.chat.completions.create(
        messages=[\
            {"role": "system", "content": "You are a helpful assistant that can interact with GitHub."},\
            {"role": "user", "content": prompt},\
        ],
        model="gpt-4o",
        user=user_id,
        tools=tools,
        tool_choice="generate",
    )

    print(response.choices[0].message.content)
```

Click to view the full example

```nextra-code
while (true) {
  // Ask the user for input
  const prompt = await input("Enter your prompt (type 'exit' to quit):");
  if (prompt.toLowerCase() === "exit") {
    break;
  }

  // Use a tool and generate a response
  const response = await client.chat.completions.create({
    messages: [\
      {\
        role: "system",\
        content: "You are a helpful assistant that can interact with GitHub.",\
      },\
      { role: "user", content: prompt },\
    ],
    model: "gpt-4",
    user: userId,
    tools: tools,
    tool_choice: "generate",
  });

  console.log(response.choices[0].message.content);
}
```

Click to view the full example

### Try it! [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#try-it)

Run the script:

PythonJavaScript

```nextra-code
python3 call_tools_with_llms.py
```

```nextra-code
node call_tools_with_llms.js
```

Ask the AI to:

```nextra-code
star the ArcadeAI/arcade-ai repo
```

You’ll be prompted to authorize the connection to GitHub, and then the AI will perform the action.

### How it works [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#how-it-works)

When you use `tool_choice="generate"` and specify a list of tools, Arcade coordinates the interaction between the available tools and the AI model (OpenAI’s GPT-4o, in this case). To your users, it appears that the model magically has new capabilities.

In this example, Arcade Cloud Engine is executing the pre-built
[Github toolkit](https://docs.arcade.dev/toolkits/development/github/github). You can also [create your own toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

### Add more tools [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#add-more-tools)

Try adding more tools to the `tools` list / array to give the AI model more capabilities. As we mentioned earlier, you can add tools from other toolkits as well, such as the [Slack toolkit](https://docs.arcade.dev/toolkits/social-communication/slack):

For instance, add [`Slack.SendMessageToChannel`](https://docs.arcade.dev/toolkits/social-communication/slack#sendmessagetochannel) and ask the LLM to send a message to a channel about a given Pull Request you retrieved previously from Github:

PythonJavaScript

```nextra-code
tools = [\
    ...\
    "Github.ListRepositoryActivities",\
    "Slack.SendMessageToChannel",\
]
```

```nextra-code
let tools = [\
  ...\
  "Github.ListRepositoryActivities",\
  "Slack.SendMessageToChannel",\
];
```

### Next steps [Permalink for this section](https://docs.arcade.dev/home/use-tools/call-tools-with-models\#next-steps)

For apps and agents that aren’t directly generating chat completions from user prompts, you can [authorize and call tools directly](https://docs.arcade.dev/home/use-tools/call-tools-directly). This is useful when you need more control over the tool calling process.

[Introduction](https://docs.arcade.dev/home/use-tools/tools-overview "Introduction") [Call Tools Directly](https://docs.arcade.dev/home/use-tools/call-tools-directly "Call Tools Directly")

## Create Evaluation Suite
[Home](https://docs.arcade.dev/home "Home") [Evaluate tools](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools "Evaluate tools") Create an evaluation suite

# Evaluate tools

In this guide, you’ll learn how to evaluate your custom tools to ensure they function correctly with the AI assistant, including defining evaluation cases and using different critics.

We’ll create evaluation cases to test our `hello` tool and measure its performance.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#prerequisites)

- [Build a custom tool](https://docs.arcade.dev/home/build-tools/create-a-toolkit)
- Install the evaluation dependencies:

```nextra-code
pip install arcade-ai[evals]
```

### Create an evaluation suite [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#create-an-evaluation-suite)

Navigate to your toolkit’s `evals` directory:

```nextra-code
cd arcade_my_new_toolkit/evals
```

Create a new Python file for your evaluations, e.g., `eval_hello.py`.

### Define your evaluation cases [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#define-your-evaluation-cases)

Open `eval_hello.py` and add the following code:

```nextra-code
from arcade.sdk.eval import (
    EvalSuite,
    EvalRubric,
    ExpectedToolCall,
    BinaryCritic,
    tool_eval,
)
from arcade.sdk import ToolCatalog
from arcade_my_new_toolkit.tools.hello import hello

# Create a catalog of tools to include in the evaluation
catalog = ToolCatalog()
catalog.add_tool(hello)

# Define the evaluation rubric
rubric = EvalRubric(
    fail_threshold=0.8,
    warn_threshold=0.9,
)

@tool_eval()
def hello_eval_suite() -> EvalSuite:
    """Create an evaluation suite for the hello tool."""
    suite = EvalSuite(
        name="Hello Tool Evaluation",
        system_message="You are a helpful assistant.",
        catalog=catalog,
        rubric=rubric,
    )

    # Example evaluation case
    suite.add_case(
        name="Simple Greeting",
        user_message="Say hello to Alice",
        expected_tool_calls=[\
            ExpectedToolCall(\
                func=hello,\
                args={\
                    "name": "Alice",\
                },\
            )\
        ],
        critics=[\
            BinaryCritic(critic_field="name", weight=1.0),\
        ],
    )

    return suite
```

### Run the evaluation [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#run-the-evaluation)

From the `evals` directory, run:

```nextra-code
arcade evals .
```

This command executes your evaluation suite and provides a report.

### How it works [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#how-it-works)

The evaluation framework in Arcade allows you to define test cases ( `EvalCase`) with expected tool calls and use critics to assess the AI’s performance.

By running the evaluation suite, you can measure how well the AI assistant is using your tools.

### Next steps [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#next-steps)

Explore different types of critics and evaluation criteria to thoroughly test your tools.

[Learn more about Critic classes](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite#critic-classes)

## Critic classes [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#critic-classes)

Arcade provides several critic classes to evaluate different aspects of tool usage.

### BinaryCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#binarycritic)

Checks if a parameter value matches exactly.

```nextra-code
BinaryCritic(critic_field="name", weight=1.0)
```

### SimilarityCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#similaritycritic)

Evaluates the similarity between expected and actual values.

```nextra-code
from arcade.sdk.eval import SimilarityCritic

SimilarityCritic(critic_field="message", weight=1.0)
```

### NumericCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#numericcritic)

Assesses numeric values within a specified tolerance.

```nextra-code
from arcade.sdk.eval import NumericCritic

NumericCritic(critic_field="score", tolerance=0.1, weight=1.0)
```

### DatetimeCritic [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#datetimecritic)

Evaluates the closeness of datetime values within a specified tolerance.

```nextra-code
from datetime import timedelta
from arcade.sdk.eval import DatetimeCritic

DatetimeCritic(critic_field="start_time", tolerance=timedelta(seconds=10), weight=1.0)
```

## Advanced evaluation cases [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#advanced-evaluation-cases)

You can add more evaluation cases to test different scenarios.

### Example: Greeting with emotion [Permalink for this section](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite\#example-greeting-with-emotion)

Modify your `hello` tool to accept an `emotion` parameter:

```nextra-code
from arcade.sdk import tool
from typing import Annotated

class Emotion(str, Enum):
    HAPPY = "happy"
    SLIGHTLY_HAPPY = "slightly happy"
    SAD = "sad"
    SLIGHTLY_SAD = "slightly sad"

@tool
def hello(
    name: Annotated[str, "The name of the person to greet"] = "there",
    emotion: Annotated[Emotion, "The emotion to convey"] = Emotion.HAPPY
) -> Annotated[str, "A greeting to the user"]:
    """
    Say hello to the user with a specific emotion.
    """
    return f"Hello {name}! I'm feeling {emotion.value} today."
```

Add an evaluation case for this new parameter:

```nextra-code
suite.add_case(
    name="Greeting with Emotion",
    user_message="Say hello to Bob sadly",
    expected_tool_calls=[\
        ExpectedToolCall(\
            func=hello,\
            args={\
                "name": "Bob",\
                "emotion": Emotion.SAD,\
            },\
        )\
    ],
    critics=[\
        BinaryCritic(critic_field="name", weight=0.5),\
        SimilarityCritic(critic_field="emotion", weight=0.5),\
    ],
)
```

Add an evaluation case with additional conversation context:

```nextra-code
suite.add_case(
    name="Greeting with Emotion",
    user_message="Say hello to Bob based on my current mood.",
    expected_tool_calls=[\
        ExpectedToolCall(\
            func=hello,\
            args={\
                "name": "Bob",\
                "emotion": Emotion.HAPPY,\
            },\
        )\
    ],
    critics=[\
        BinaryCritic(critic_field="name", weight=0.5),\
        SimilarityCritic(critic_field="emotion", weight=0.5),\
    ],
    # Add some context to the evaluation case
    additional_messages= [\
        {"role": "user", "content": "Hi, I'm so happy!"},\
        {\
            "role": "assistant",\
            "content": "That’s awesome! What’s got you feeling so happy today?",\
        },\
    ]
)
```

Add an evalutation case with multiple expected tool calls:

```nextra-code
suite.add_case(
    name="Greeting with Emotion",
    user_message="Say hello to Bob based on my current mood. And then say hello to Alice with slightly less of that emotion.",
    expected_tool_calls=[\
        ExpectedToolCall(\
            func=hello,\
            args={\
                "name": "Bob",\
                "emotion": Emotion.HAPPY,\
            },\
        ),\
        ExpectedToolCall(\
            func=hello,\
            args={\
                "name": "Alice",\
                "emotion": Emotion.SLIGHTLY_HAPPY,\
            },\
        )\
    ],
    critics=[\
        BinaryCritic(critic_field="name", weight=0.5),\
        SimilarityCritic(critic_field="emotion", weight=0.5),\
    ],
    # Add some context to the evaluation case
    additional_messages= [\
        {"role": "user", "content": "Hi, I'm so happy!"},\
        {\
            "role": "assistant",\
            "content": "That’s awesome! What’s got you feeling so happy today?",\
        },\
    ]
)
```

* * *

Ensure that your `hello` tool and evaluation cases are updated accordingly and
that you rerun `arcade evals .` to test your changes.

[Why evaluate tools?](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools "Why evaluate tools?") [Run evaluations](https://docs.arcade.dev/home/evaluate-tools/run-evaluations "Run evaluations")

## Atlassian Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Atlassian

# Atlassian auth provider

At this time, Arcade does not offer a default Atlassian Auth Provider. To use
Atlassian auth, you must create a custom Auth Provider with your own Atlassian
OAuth 2.0 credentials as described below.

The Atlassian auth provider enables tools and agents to call the Atlassian API on behalf of a user. Behind the scenes, the Arcade Engine and the Atlassian auth provider seamlessly manage Atlassian OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#whats-documented-here)

This page describes how to use and configure Atlassian auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/atlassian#using-atlassian-auth-in-app-code) that needs to call Atlassian APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/atlassian#using-atlassian-auth-in-custom-tools) that need to call Atlassian APIs

## Configuring Atlassian auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#configuring-atlassian-auth)

### Create an Atlassian app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#create-an-atlassian-app)

- Create a Atlassian app in the [Atlassian developer console](https://developer.atlassian.com/console/myapps/)
- In the Authorization tab, click the “Add” action button and set the Callback URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- In the Permissions tab, enable any permissions you need for your app
- In the Settings tab, copy the Client ID and Secret to use below

Next, add the Atlassian app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Atlassian auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#configuring-atlassian-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Atlassian** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-atlassian-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Atlassian app.
5. Click **Save**.

When you use tools that require Atlassian auth using your Arcade account credentials, the Arcade Engine will automatically use this Atlassian OAuth provider.

### Configuring Atlassian auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#configuring-atlassian-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#set-environment-variables)

Set the following environment variables:

```nextra-code
export ATLASSIAN_CLIENT_ID="<your client ID>"
export ATLASSIAN_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
ATLASSIAN_CLIENT_SECRET="<your client secret>"
ATLASSIAN_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `atlassian` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-atlassian
      description: "The default Atlassian provider"
      enabled: true
      type: oauth2
      provider_id: atlassian
      client_id: ${env:ATLASSIAN_CLIENT_ID}
      client_secret: ${env:ATLASSIAN_CLIENT_SECRET}
```

## Using Atlassian auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#using-atlassian-auth-in-app-code)

Use the Atlassian auth provider in your own agents and AI apps to get a user token for the Atlassian API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Atlassian API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="atlassian",
    scopes=["read:me", "read:jira-user", "read:confluence-user"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "atlassian", {
  scopes: ["read:me", "read:jira-user", "read:confluence-user"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Atlassian auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/atlassian\#using-atlassian-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Atlassian API.

Use the `Atlassian()` auth class to specify that a tool requires authorization with Atlassian. The `context.authorization.token` field will be automatically populated with the user’s Atlassian token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Atlassian


@tool(
    requires_auth=Atlassian(
        scopes=["read:jira-work"],
    )
)
async def list_projects(
    context: ToolContext,
    query: Annotated[\
        Optional[str],\
        "The query to filter the projects by. Defaults to empty string to list all projects.",\
    ] = "",
) -> Annotated[dict, "The list of projects in a user's Jira instance"]:
    """List a Jira user's projects."""
    url = f"https://api.atlassian.com/ex/jira/<cloudId>/rest/api/3/project/search?query={query}"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[Overview](https://docs.arcade.dev/home/auth-providers "Overview") [Discord](https://docs.arcade.dev/home/auth-providers/discord "Discord")

## OpenAI Integration
[Home](https://docs.arcade.dev/home "Home") [Model Providers](https://docs.arcade.dev/home/supported-models "Model Providers") OpenAI

# OpenAI

## Connecting [Permalink for this section](https://docs.arcade.dev/home/supported-models/openai\#connecting)

The default client for connecting to Arcade is the OpenAI Client. To send a chat message to OpenAI through Arcade, you can use the OpenAI
Client as normal, while swapping out the base URL and API Key with Arcade’s URL and API Key.

```nextra-code
import os
from openai import OpenAI

client = OpenAI(
    base_url="https://api.arcade.dev/v1",
    api_key=os.environ.get("ARCADE_API_KEY"))


response = client.chat.completions.create(
    model = "gpt-3.5-turbo",
    user = "user@arcade.dev",
    messages = [\
        {"role": "user", "content": "Summarize my last 10 emails"}\
    ]
)
```

## Configuration [Permalink for this section](https://docs.arcade.dev/home/supported-models/openai\#configuration)

This is a simple example on enabling OpenAI in the Arcade Engine

```nextra-code
llm:
  models:
    - id: my-openai-model-provider
      openai:
        api_key: <OPENAI API KEY>
```

For more advanced configuration, see the [model docs](https://docs.arcade.dev/home/configure/models#openai)

[Ollama](https://docs.arcade.dev/home/supported-models/ollama "Ollama") [Overview](https://docs.arcade.dev/home/auth-providers "Overview")

## GitHub Toolkit Reference
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Developer Tools [GitHub](https://docs.arcade.dev/toolkits/development/github/github "GitHub") Reference

# Reference for GitHub Toolkit

## PRSortProperty [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#prsortproperty)

Specifies the property to sort pull requests by.

- **`CREATED`**: Sort by creation date.
- **`UPDATED`**: Sort by last update date.
- **`POPULARITY`**: Sort by popularity.
- **`LONG_RUNNING`**: Sort by how long the pull request has been open.

## PRState [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#prstate)

Specifies the state of pull requests to return.

- **`OPEN`**: Open pull requests.
- **`CLOSED`**: Closed pull requests.
- **`ALL`**: All pull requests.

## ReviewCommentSortProperty [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#reviewcommentsortproperty)

Specifies the property to sort review comments by.

- **`CREATED`**: Sort by creation date.
- **`UPDATED`**: Sort by last update date.

## ReviewCommentSubjectType [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#reviewcommentsubjecttype)

Specifies the type of subject for review comments.

- **`FILE`**: Comments on the entire file.
- **`LINE`**: Comments on a specific line.

## DiffSide [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#diffside)

Specifies the side of the diff that the pull request’s changes appear on.

- **`LEFT`**: For deletions that appear in red.
- **`RIGHT`**: For additions that appear in green or unchanged lines that appear in white and are shown for context.

## RepoType [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#repotype)

Specifies the type of repositories to return.

- **`ALL`**: All repositories.
- **`PUBLIC`**: Public repositories only.
- **`PRIVATE`**: Private repositories only.
- **`FORKS`**: Forked repositories only.
- **`SOURCES`**: Source repositories only (not forks).
- **`MEMBER`**: Repositories to which the user has explicit permission.

## RepoSortProperty [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#reposortproperty)

Specifies the property to sort repositories by.

- **`CREATED`**: Sort by creation date.
- **`UPDATED`**: Sort by last update date.
- **`PUSHED`**: Sort by last push date.
- **`FULL_NAME`**: Sort by full name.

## RepoTimePeriod [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#repotimeperiod)

Specifies the time period to filter by when listing repository activities.

- **`DAY`**: Activities from the last day.
- **`WEEK`**: Activities from the last week.
- **`MONTH`**: Activities from the last month.
- **`QUARTER`**: Activities from the last quarter.
- **`YEAR`**: Activities from the last year.

## ActivityType [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#activitytype)

Specifies the activity type to filter by when listing repository activities.

- **`PUSH`**: Regular push events.
- **`FORCE_PUSH`**: Force push events.
- **`BRANCH_CREATION`**: Branch creation events.
- **`BRANCH_DELETION`**: Branch deletion events.
- **`PR_MERGE`**: Pull request merge events.
- **`MERGE_QUEUE_MERGE`**: Merge queue merge events.

## SortDirection [Permalink for this section](https://docs.arcade.dev/toolkits/development/github/reference\#sortdirection)

Specifies the direction to sort results.

- **`ASC`**: Sort in ascending order.
- **`DESC`**: Sort in descending order.

[GitHub](https://docs.arcade.dev/toolkits/development/github/github "GitHub") [Reference](https://docs.arcade.dev/toolkits/development/web/reference "Reference")

## Google Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Google

# Google auth provider

The Google auth provider enables tools and agents to call Google/Google Workspace APIs on behalf of a user. Behind the scenes, the Arcade Engine and the Google auth provider seamlessly manage Google OAuth 2.0 authorization for your users.

Want to quickly get started with Google services in your agent or AI app? The
pre-built [Arcade Google toolkit](https://docs.arcade.dev/toolkits/productivity/google/gmail) is what
you want!

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#whats-documented-here)

This page describes how to use and configure Google auth with Arcade.

This auth provider is used by:

- The [Arcade Google toolkit](https://docs.arcade.dev/toolkits/productivity/google/gmail), which provides pre-built tools for interacting with Google services
- Your [app code](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-app-code) that needs to call Google APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-custom-tools) that need to call Google APIs

## Configuring Google auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#configuring-google-auth)

How you configure the Google auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

With the Arcade Cloud Engine, you can start building and testing Google auth without any configuration. Your users will see `Arcade (demo)` as the name of the application that’s requesting permission.

When you are ready to go to production, you’ll want to configure the Google auth provider with your own Google app credentials, so users see your app name when they authorize access.

### Create a Google app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#create-a-google-app)

- Follow Google’s guide to [setting up OAuth credentials](https://support.google.com/cloud/answer/6158849?hl=en)
- Choose the [scopes](https://developers.google.com/identity/protocols/oauth2/scopes) (permissions) you need for your app
- At a minimum, you must enable these scopes:
  - `https://www.googleapis.com/auth/userinfo.email`
  - `https://www.googleapis.com/auth/userinfo.profile`
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the client ID and client secret to use below

Next, add the Google app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Google auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#configuring-google-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Google** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-google-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Google app.
5. Click **Save**.

When you use tools that require Google auth using your Arcade account credentials, the Arcade Engine will automatically use this Google OAuth provider.

### Configuring Google auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#configuring-google-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#set-environment-variables)

Set the following environment variables:

```nextra-code
export GOOGLE_CLIENT_ID="<your client ID>"
export GOOGLE_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
GOOGLE_CLIENT_ID="<your client ID>"
GOOGLE_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `google` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-google
      description: "The default Google provider"
      enabled: true
      type: oauth2
      provider_id: google
      client_id: ${env:GOOGLE_CLIENT_ID}
      client_secret: ${env:GOOGLE_CLIENT_SECRET}
```

## Using Google auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#using-google-auth-in-app-code)

Use the Google auth provider in your own agents and AI apps to get a user token for Google APIs. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for Google APIs:

PythonJavaScript

```nextra-code
from arcadepy import Arcade
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

"""
In this example, we will use Arcade to authenticate with Google and
retrieve Gmail messages.

There is a tool for that in the Arcade SDK, which simplifies the process for
you to retrieve email messages either through our Python or JavaScript
SDKs or via LLM tool calling.

Below we are just showing how to use Arcade as an auth provider, if you ever
need to.
"""

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="google",
    scopes=["https://www.googleapis.com/auth/gmail.readonly"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token

if not token:
    raise ValueError("No token found in auth response")

credentials = Credentials(token)
gmail = build("gmail", "v1", credentials=credentials)

email_messages = (
    gmail.users().messages().list(userId="me").execute().get("messages", [])
)

print(email_messages)
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

/*
In this example, we will use Arcade to authenticate with Google and
retrieve Gmail messages.

There is a tool for that in the Arcade SDK, which simplifies the process for
you to retrieve email messages either through our Python or JavaScript
SDKs or via LLM tool calling.

Below we are just showing how to use Arcade as an auth provider, if you ever
need to.
*/

// Start the authorization process
let authResponse = await client.auth.start(userId, "google", {
  scopes: ["https://www.googleapis.com/auth/gmail.readonly"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

if (!authResponse.context.token) {
  throw new Error("No token found in auth response");
}

const token = authResponse.context.token;

// Use the Google Gmail API
const response = await fetch(
  "https://gmail.googleapis.com/gmail/v1/users/me/messages",
  {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  },
);

if (!response.ok) {
  throw new Error(`HTTP error! status: ${response.status}`);
}

const data = await response.json();
const emailMessages = data.messages || [];

// Return a list of ids and thread ids
console.log(emailMessages);
```

## Using Google auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/google\#using-google-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can use the pre-built [Arcade Google toolkit](https://docs.arcade.dev/toolkits/productivity/google/gmail) to quickly build agents and AI apps that interact with Google services like Gmail, Calendar, Drive, and more.

If the pre-built tools in the Google toolkit don’t meet your needs, you can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with Google APIs.

Use the `Google()` auth class to specify that a tool requires authorization with Google. The `context.authorization.token` field will be automatically populated with the user’s Google token:

```nextra-code
from typing import Annotated

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Google

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build


@tool(
    requires_auth=Google(
        scopes=["https://www.googleapis.com/auth/gmail.readonly"],
    )
)
async def list_emails(
    context: ToolContext,
    subject: Annotated[str, "The subject of the email"],
    body: Annotated[str, "The body of the email"],
    recipient: Annotated[str, "The recipient of the email"],
) -> Annotated[str, "A confirmation message with the sent email ID and URL"]:
    """
    Send an email using the Gmail API.
    """
    if not context.authorization or not context.authorization.token:
        raise ValueError("No token found in context")

    credentials = Credentials(context.authorization.token)
    gmail = build("gmail", "v1", credentials=credentials)

    email_messages = (
        gmail.users().messages().list(userId="me").execute().get("messages", [])
    )

    return email_messages
```

[GitHub](https://docs.arcade.dev/home/auth-providers/github "GitHub") [Hubspot](https://docs.arcade.dev/home/auth-providers/hubspot "Hubspot")

## Zoom Integration Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Social & Communication](https://docs.arcade.dev/toolkits/social-communication/twilio "Social & Communication") Zoom

# Zoom

**Description:** Enable agents to interact with Zoom by retrieving meeting information and invitations.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/zoom)

**Auth:** User authorizationvia the [Zoom auth provider](https://docs.arcade.dev/home/auth-providers/zoom)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_zoom)](https://pypi.org/project/arcade_zoom/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_zoom)](https://pypi.org/project/arcade_zoom/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_zoom)](https://pypi.org/project/arcade_zoom/)[![Downloads](https://img.shields.io/pypi/dm/arcade_zoom)](https://pypi.org/project/arcade_zoom/)

The Arcade Zoom toolkit provides tools for interacting with Zoom. With these tools, you can build agents and AI applications that can:

- List upcoming meetings
- Retrieve meeting invitation details

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/zoom\#available-tools)

These tools are currently available in the Arcade Zoom toolkit.

| Tool Name | Description |
| --- | --- |
| ListUpcomingMeetings | List a Zoom user's upcoming meetings within the next 24 hours. |
| GetMeetingInvitation | Retrieve the invitation note for a specific Zoom meeting. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your own\\
tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Zoom auth\\
provider](https://docs.arcade.dev/home/auth-providers/zoom#using-zoom-auth-in-custom-tools).

## ListUpcomingMeetings [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/zoom\#listupcomingmeetings)

List a Zoom user’s upcoming meetings within the next 24 hours.

**Parameters**

- **`user_id`** _(string, optional)_ The user’s user ID or email address. Defaults to ‘me’ for the current user.

* * *

## GetMeetingInvitation [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/zoom\#getmeetinginvitation)

Retrieve the invitation note for a specific Zoom meeting.

**Parameters**

- **`meeting_id`** _(string, required)_ The meeting’s numeric ID (as a string).

* * *

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/zoom\#auth)

The Arcade Zoom toolkit uses the [Zoom auth provider](https://docs.arcade.dev/home/auth-providers/zoom) to connect to users’ Zoom accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade ` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Zoom auth provider](https://docs.arcade.dev/home/auth-providers/zoom#configuring-zoom-auth) with your own Zoom app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_zoom\\
```](https://docs.arcade.dev/home/install/overview)

[X](https://docs.arcade.dev/toolkits/social-communication/x "X") [Spotify](https://docs.arcade.dev/toolkits/entertainment/spotify "Spotify")

## Twitch Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Twitch

# Twitch auth provider

At this time, Arcade does not offer a default Twitch Auth Provider. To use
Twitch auth, you must create a custom Auth Provider with your own Twitch
OAuth 2.0 credentials as described below.

The Twitch auth provider enables tools and agents to call the Twitch API on behalf of a user. Behind the scenes, the Arcade Engine and the Twitch auth provider seamlessly manage Twitch OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#whats-documented-here)

This page describes how to use and configure Twitch auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/twitch#using-twitch-auth-in-app-code) that needs to call Twitch APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/twitch#using-twitch-auth-in-custom-tools) that need to call Twitch APIs

## Configuring Twitch auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#configuring-twitch-auth)

### Create a Twitch app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#create-a-twitch-app)

- Twitch requires that you have two-factor authentication enabled for your account. Enable in your [account security seetings](https://www.twitch.tv/settings/security)
- Create a Twitch Application in the [Twitch App Console](https://dev.twitch.tv/console/apps)
- Set the OAuth Redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Select your Application category
- Select the ‘Confidential’ Client Type
- Copy the App key (Client ID) and App secret (Client Secret), which you’ll need below

Next, add the Twitch app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Twitch auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#configuring-twitch-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Twitch** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-twitch-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Twitch app.
5. Click **Save**.

When you use tools that require Twitch auth using your Arcade account credentials, the Arcade Engine will automatically use this Twitch OAuth provider.

### Configuring Twitch auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#configuring-twitch-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#set-environment-variables)

The Client ID is the Twitch “App key” and the Client Secret is the Twitch
“App secret”.

Set the following environment variables:

```nextra-code
export TWITCH_CLIENT_ID="<your client ID>"
export TWITCH_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
TWITCH_CLIENT_SECRET="<your client secret>"
TWITCH_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `twitch` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-twitch
      description: "The default Twitch provider"
      enabled: true
      type: oauth2
      provider_id: twitch
      client_id: ${env:TWITCH_CLIENT_ID}
      client_secret: ${env:TWITCH_CLIENT_SECRET}
```

## Using Twitch auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#using-twitch-auth-in-app-code)

Use the Twitch auth provider in your own agents and AI apps to get a user-scoped token for the Twitch API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Twitch API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="twitch",
    scopes=["channel:manage:polls"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "twitch", {
  scopes: ["channel:manage:polls"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Twitch auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/twitch\#using-twitch-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Twitch API.

Use the `Twitch()` auth class to specify that a tool requires authorization with Twitch. The `context.authorization.token` field will be automatically populated with the user’s Twitch token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Twitch


@tool(
    requires_auth=Twitch(
        scopes=["channel:manage:polls"],
    )
)
async def create_poll(
    context: ToolContext,
    broadcaster_id: Annotated[\
        str,\
        "The ID of the broadcaster to create the poll for.",\
    ],
    title: Annotated[\
        str,\
        "The title of the poll.",\
    ],
    choices: Annotated[\
        list[str],\
        "The choices of the poll.",\
    ],
    duration: Annotated[\
        int,\
        "The duration of the poll in seconds.",\
    ],
) -> Annotated[dict, "The poll that was created"]:
    """Create a poll for a Twitch channel."""
    url = "https://api.twitch.tv/helix/polls"
    headers = {
        "Authorization": f"Bearer {context.authorization.token}",
        "Client-Id": "your_client_id",
        "Content-Type": "application/json",
    }
    payload = {
        "broadcaster_id": broadcaster_id,
        "title": title,
        "choices": [{"title": choice} for choice in choices],
        "duration": duration,
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
```

[Spotify](https://docs.arcade.dev/home/auth-providers/spotify "Spotify") [X](https://docs.arcade.dev/home/auth-providers/x "X")

## Zoom Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Zoom

# Zoom auth provider

At this time, Arcade does not offer a default Zoom Auth Provider. To use Zoom
auth, you must create a custom Auth Provider with your own Zoom OAuth 2.0
credentials as described below.

The Zoom auth provider enables tools and agents to call the Zoom API on behalf of a user. Behind the scenes, the Arcade Engine and the Zoom auth provider seamlessly manage Zoom OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#whats-documented-here)

This page describes how to use and configure Zoom auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/zoom#using-zoom-auth-in-app-code) that needs to call Zoom APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/zoom#using-zoom-auth-in-custom-tools) that need to call Zoom APIs

## Configuring Zoom auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#configuring-zoom-auth)

How you configure the Zoom auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

When you are ready to go to production, you’ll want to configure the Zoom auth provider with your own Zoom app credentials, so users see your app name when they authorize access.

### Create a Zoom app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#create-a-zoom-app)

- Follow Zoom’s guide to [registering an app](https://developers.zoom.us/docs/integrations/create/) on the Zoom marketplace
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback` and enable Strict Mode
- Enable the Zoom features and permissions (scopes) that your app needs
- Copy the client ID and client secret to use below

Next, add the Zoom app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Zoom auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#configuring-zoom-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Zoom** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-zoom-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Zoom app.
5. Click **Save**.

When you use tools that require Zoom auth using your Arcade account credentials, the Arcade Engine will automatically use this Zoom OAuth provider.

### Configuring Zoom auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#configuring-zoom-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#set-environment-variables)

Set the following environment variables:

```nextra-code
export ZOOM_CLIENT_ID="<your client ID>"
export ZOOM_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
ZOOM_CLIENT_ID="<your client ID>"
ZOOM_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `zoom` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-zoom
      description: "The default Zoom provider"
      enabled: true
      type: oauth2
      provider_id: zoom
      client_id: ${env:ZOOM_CLIENT_ID}
      client_secret: ${env:ZOOM_CLIENT_SECRET}
```

## Using Zoom auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#using-zoom-auth-in-app-code)

Use the Zoom auth provider in your own agents and AI apps to get a user token for the Zoom API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Zoom API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="zoom",
    scopes=["meeting:read:list_upcoming_meetings"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "zoom", [\
  "meeting:read:list_upcoming_meetings",\
]);

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Zoom auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/zoom\#using-zoom-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Zoom API.

Use the `Zoom()` auth class to specify that a tool requires authorization with Zoom. The `context.authorization.token` field will be automatically populated with the user’s Zoom token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Zoom


@tool(
    requires_auth=Zoom(
        scopes=["meeting:read:list_upcoming_meetings"],
    )
)
async def list_upcoming_meetings(
    context: ToolContext,
    user_id: Annotated[\
        Optional[str],\
        "The user's user ID or email address. Defaults to 'me' for the current user.",\
    ] = "me",
) -> Annotated[dict, "List of upcoming meetings within the next 24 hours"]:
    """List a Zoom user's upcoming meetings within the next 24 hours."""
    url = f"https://api.zoom.us/v2/users/{user_id}/upcoming_meetings"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[X](https://docs.arcade.dev/home/auth-providers/x "X") [Registry Early Access](https://docs.arcade.dev/home/registry-early-access "Registry Early Access")

## Arcade X Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Social & Communication](https://docs.arcade.dev/toolkits/social-communication/twilio "Social & Communication") X

# X (Twitter)

**Description:** Enable agents to interact with X (formerly Twitter).

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/x)

**Auth:** User authorizationvia the [X auth provider](https://docs.arcade.dev/home/auth-providers/x)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_x)](https://pypi.org/project/arcade_x/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_x)](https://pypi.org/project/arcade_x/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_x)](https://pypi.org/project/arcade_x/)[![Downloads](https://img.shields.io/pypi/dm/arcade_x)](https://pypi.org/project/arcade_x/)

The Arcade X (Twitter) toolkit provides a pre-built set of tools for interacting with X (formerly Twitter). These tools make it easy to build agents and AI apps that can:

- Post tweets
- Delete tweets
- Search for tweets by username
- Search for tweets by keywords
- Look up a user by username

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#available-tools)

These tools are currently available in the Arcade X toolkit.

| Tool Name | Description |
| --- | --- |
| PostTweet | Post a tweet to X (Twitter). |
| DeleteTweetById | Delete a tweet on X (Twitter). |
| SearchRecentTweetsByUsername | Search recent tweets by username. |
| SearchRecentTweetsByKeywords | Search recent tweets by keywords or phrases. |
| LookupSingleUserByUsername | Look up a user on X (Twitter) by username. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [X auth\\
provider](https://docs.arcade.dev/home/auth-providers/x#using-x-auth-in-custom-tools).

## PostTweet [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#posttweet)

See Example >

Post a tweet to X (Twitter).

**Parameters**

- **`tweet_text`** _(string, required)_ The text content of the tweet you want to post.

* * *

## DeleteTweetById [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#deletetweetbyid)

See Example >

Delete a tweet on X (Twitter).

**Parameters**

- **`tweet_id`** _(string, required)_ The ID of the tweet you want to delete.

* * *

## SearchRecentTweetsByUsername [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#searchrecenttweetsbyusername)

See Example >

Search for recent tweets (last 7 days) on X (Twitter) by username. Includes replies and reposts.

**Parameters**

- **`username`** _(string, required)_ The username of the X (Twitter) user to look up.
- **`max_results`** _(integer, optional, Defaults to 10)_ The maximum number of results to return. Cannot be less than 10.
- **`next_token`** _(string, optional)_ The pagination token starting from which to return results.

* * *

## SearchRecentTweetsByKeywords [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#searchrecenttweetsbykeywords)

See Example >

Search for recent tweets (last 7 days) on X (Twitter) by required keywords and phrases. Includes replies and reposts.

_At least one of the following parameters must be provided: `keywords`, `phrases`._

**Parameters**

- **`keywords`** _(array of strings, optional)_ List of keywords that must be present in the tweet.
- **`phrases`** _(array of strings, optional)_ List of phrases that must be present in the tweet.
- **`max_results`** _(integer, optional, Defaults to 10)_ The maximum number of results to return. Cannot be less than 10.

* * *

## LookupTweetById [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#lookuptweetbyid)

See Example >

Look up a tweet on X (Twitter) by its ID.

**Parameters**

- **`tweet_id`** _(string, required)_ The ID of the tweet to look up.

* * *

## LookupSingleUserByUsername [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#lookupsingleuserbyusername)

See Example >

Look up a user on X (Twitter) by their username.

**Parameters**

- **`username`** _(string, required)_ The username of the X (Twitter) user to look up.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/x\#auth)

The Arcade X (Twitter) toolkit uses the [X auth provider](https://docs.arcade.dev/home/auth-providers/x) to connect to users’ X (formerly Twitter) accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the X auth provider](https://docs.arcade.dev/home/auth-providers/x#configuring-x-auth) with your own X (formerly Twitter) app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_x\\
```](https://docs.arcade.dev/home/install/overview)

[Slack](https://docs.arcade.dev/toolkits/social-communication/slack "Slack") [Zoom](https://docs.arcade.dev/toolkits/social-communication/zoom "Zoom")

## Gmail Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Productivity & Docs [Google](https://docs.arcade.dev/toolkits/productivity/google/calendar "Google") Gmail

# Gmail

**Description:** Enable agents to send, read, and manage emails in Gmail.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/google)

**Auth:** User authorizationvia the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_google)](https://pypi.org/project/arcade_google/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_google)](https://pypi.org/project/arcade_google/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_google)](https://pypi.org/project/arcade_google/)[![Downloads](https://img.shields.io/pypi/dm/arcade_google)](https://pypi.org/project/arcade_google/)

The Arcade Gmail toolkit provides a pre-built set of tools for interacting with Gmail. These tools make it easy to build agents and AI apps that can:

- Send, read, and manage emails
- Compose and update draft emails
- Delete emails
- Search for emails by header
- List emails in the user’s mailbox

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#available-tools)

These tools are currently available in the Arcade Gmail toolkit.

| Tool Name | Description |
| --- | --- |
| SendEmail | Send an email using the Gmail API. |
| SendDraftEmail | Send a draft email using the Gmail API. |
| WriteDraftEmail | Compose a new email draft using the Gmail API. |
| UpdateDraftEmail | Update an existing email draft. |
| DeleteDraftEmail | Delete a draft email using the Gmail API. |
| TrashEmail | Move an email to the trash folder. |
| ListDraftEmails | List draft emails in the user's mailbox. |
| ListEmailsByHeader | Search for emails by header using the Gmail API. |
| ListEmails | Read emails and extract plain text content. |
| SearchThreads | Search for threads in the user's mailbox. |
| ListThreads | List threads in the user's mailbox. |
| GetThread | Get the specified thread by ID. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Google auth\\
provider](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-custom-tools).

## SendEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#sendemail)

See Example >

Send an email using the Gmail API.

**Parameters**

- **`subject`** _(string, required)_ The subject of the email.
- **`body`** _(string, required)_ The body of the email.
- **`recipient`** _(string, required)_ The recipient of the email.
- **`cc`** _(array, optional, Defaults to None)_ CC recipients of the email.
- **`bcc`** _(array, optional, Defaults to None)_ BCC recipients of the email.

* * *

## SendDraftEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#senddraftemail)

See Example >

Send a draft email using the Gmail API.

**Parameters**

- **`email_id`** _(string, required)_ The ID of the draft to send.

* * *

## WriteDraftEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#writedraftemail)

See Example >

Compose a new email draft using the Gmail API.

**Parameters**

- **`subject`** _(string, required)_ The subject of the draft email.
- **`body`** _(string, required)_ The body of the draft email.
- **`recipient`** _(string, required)_ The recipient of the draft email.
- **`cc`** _(array, optional, Defaults to None)_ CC recipients of the draft email.
- **`bcc`** _(array, optional, Defaults to None)_ BCC recipients of the draft email.

* * *

## UpdateDraftEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#updatedraftemail)

See Example >

Update an existing email draft.

**Parameters**

- **`draft_email_id`** _(string, required)_ The ID of the draft email to update.
- **`subject`** _(string, required)_ The subject of the draft email.
- **`body`** _(string, required)_ The body of the draft email.
- **`recipient`** _(string, required)_ The recipient of the draft email.
- **`cc`** _(array, optional, Defaults to None)_ CC recipients of the draft email.
- **`bcc`** _(array, optional, Defaults to None)_ BCC recipients of the draft email.

* * *

## DeleteDraftEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#deletedraftemail)

See Example >

Delete a draft email using the Gmail API.

**Parameters**

- **`draft_email_id`** _(string, required)_ The ID of the draft email to delete.

* * *

## TrashEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#trashemail)

The `TrashEmail` tool is currently only available on a self-hosted instance of the Arcade Engine. To learn more about self-hosting, see the [self-hosting documentation](https://docs.arcade.dev/home/install/local#install-the-engine).

See Example >

Move an email to the trash folder.

**Parameters**

- **`email_id`** _(string, required)_ The ID of the email to trash.

* * *

## ListDraftEmails [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#listdraftemails)

See Example >

List draft emails in the user’s mailbox.

**Parameters**

- **`n_drafts`** _(integer, optional, Defaults to 5)_ Number of draft emails to read.

* * *

## ListEmailsByHeader [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#listemailsbyheader)

See Example >

Search for emails by header using the Gmail API.

_At least one of the following parameters must be provided: `sender`, `recipient`, `subject`, `body`._

**Parameters**

- **`sender`** _(string, optional, Defaults to None)_ The name or email address of the sender.
- **`recipient`** _(string, optional, Defaults to None)_ The name or email address of the recipient.
- **`subject`** _(string, optional, Defaults to None)_ Words to find in the subject of the email.
- **`body`** _(string, optional, Defaults to None)_ Words to find in the body of the email.
- **`date_range`** _(string, optional, Defaults to None)_ The date range of the emails.
- **`limit`** _(integer, optional, Defaults to 25)_ The maximum number of emails to return.

* * *

## ListEmails [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#listemails)

See Example >

Read emails from a Gmail account and extract plain text content.

**Parameters**

- **`n_emails`** _(integer, optional, Defaults to 5)_ Number of emails to read.

* * *

## SearchThreads [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#searchthreads)

See Example >

Search for threads in the user’s mailbox

**Parameters**

- **`page_token`** _(string, optional)_ Page token to retrieve a specific page of results in the list.
- **`max_results`** _(integer, optional, Defaults to `10`)_ The maximum number of threads to return.
- **`include_spam_trash`** _(boolean, optional)_ Whether to include spam and trash in the results.
- **`label_ids`** _(array, optional)_ The IDs of labels to filter by.
- **`sender`** _(string, optional)_ The name or email address of the sender of the email.
- **`recipient`** _(string, optional)_ The name or email address of the recipient.
- **`subject`** _(string, optional)_ Words to find in the subject of the email.
- **`body`** _(string, optional)_ Words to find in the body of the email.
- **`date_range`** _(string, optional)_ The date range of the email. Valid values are ‘today’, ‘yesterday’, ‘last\_7\_days’, ‘last\_30\_days’, ‘this\_month’, ‘last\_month’, ‘this\_year’.

* * *

## ListThreads [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#listthreads)

See Example >

List threads in the user’s mailbox.

**Parameters**

- **`page_token`** _(string, optional)_ Page token to retrieve a specific page of results in the list.
- **`max_results`** _(integer, optional, Defaults to `10`)_ The maximum number of threads to return.
- **`include_spam_trash`** _(boolean, optional)_ Whether to include spam and trash in the results.

* * *

## GetThread [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#getthread)

See Example >

Get the specified thread by ID.

**Parameters**

- **`thread_id`** _(string, required)_ The ID of the thread to retrieve.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/gmail\#auth)

The Arcade Gmail toolkit uses the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google) to connect to users’ Google accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Google auth provider](https://docs.arcade.dev/home/auth-providers/google#configuring-google-auth) with your own Google app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_google\\
```](https://docs.arcade.dev/home/install/overview)

[Drive](https://docs.arcade.dev/toolkits/productivity/google/drive "Drive") [Sheets](https://docs.arcade.dev/toolkits/productivity/google/sheets "Sheets")

## User Authorization Guide
[Home](https://docs.arcade.dev/home "Home") [Build tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit "Build tools") Create a tool with auth

# Adding user authorization to your tools

In this guide, you’ll learn how to add user authorization to your custom tools, using Arcade.

You’ll create a tool that sends a message on behalf of a user via Slack.

### Prerequisites [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth\#prerequisites)

- [Set up Arcade](https://docs.arcade.dev/home/quickstart)
- Install the Arcade SDK and any third-party SDKs you need (e.g., Slack SDK):
- [Understand Tool Context](https://docs.arcade.dev/home/build-tools/tool-context)

```nextra-code
pip install arcade-ai slack_sdk
```

### Define your authorized tool [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth\#define-your-authorized-tool)

Create a new Python file, e.g., `slack_tools.py`, and import the necessary modules:

```nextra-code
from typing import Annotated

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Slack
from arcade.sdk.errors import RetryableToolError
from slack_sdk import WebClient
```

Now, define your tool using the `@tool` decorator and specify the required authorization, in this case, by using the built-in `Slack` auth provider:

```nextra-code
@tool(
    requires_auth=Slack(
        scopes=[\
            "chat:write",\
            "im:write",\
            "users.profile:read",\
            "users:read",\
        ],
    )
)
def send_dm_to_user(
    context: ToolContext,
    user_name: Annotated[str, "The Slack username of the person you want to message"],
    message: Annotated[str, "The message you want to send"],
):
    """Send a direct message to a user in Slack."""
    slack_client = WebClient(token=context.authorization.token)

    # Retrieve the user ID based on username
    user_list_response = slack_client.users_list()
    user_id = None
    for user in user_list_response["members"]:
        if user["name"].lower() == user_name.lower():
            user_id = user["id"]
            break
    if not user_id:
        raise RetryableToolError(
            "User not found",
            developer_message=f"User with username '{user_name}' not found."
        )

    # Open a conversation and send the message
    im_response = slack_client.conversations_open(users=[user_id])
    dm_channel_id = im_response["channel"]["id"]
    slack_client.chat_postMessage(channel=dm_channel_id, text=message)
```

Arcade offers a number of [built-in auth providers](https://docs.arcade.dev/home/auth-providers), including Slack, Google, and GitHub. You can also require authorization with a custom auth provider, using the `OAuth2` class, a subclass of the `ToolAuthorization` class:

```nextra-code
@tool(
    requires_auth=OAuth2(
        id="your-oauth-provider-id",
        scopes=["scope1", "scope2"],
    )
)
```

The `OAuth2` class requires an `id` parameter to identify the auth provider in the Arcade Engine. For built-in providers like `Slack`, you can skip the `id` \- the Arcade Engine will find the right provider using your credentials. While you can specify an `id` for built-in providers, only do this for private tools that won’t be shared.

### Use your authorized tool with Arcade [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth\#use-your-authorized-tool-with-arcade)

Now you can use your custom authorized tool with Arcade in your application.

Here’s an example of how to use your tool:

```nextra-code
from arcadepy import Arcade
from catalog import catalog

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Use the tool in a chat completion
response = client.chat.completions.create(
    messages=[\
        {\
            "role": "user",\
            "content": "Send a message to johndoe on Slack saying 'Hello!'",\
        }\
    ],
    model="gpt-4o",
    tools=list(catalog.tools.keys()),
    tool_choice="auto",
    user=user_id,
)

print(response.choices[0].message.content)
```

### Handle authorization [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth\#handle-authorization)

Since your tool requires authorization, the first time you use it, the user (identified by `user_id`) needs to authorize access.

Arcade handles the authorization flow, prompting the user to visit a URL to grant permissions.

Your application should guide the user through this process.

### How it works [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth\#how-it-works)

By specifying the `requires_auth` parameter in the `@tool` decorator, you indicate that the tool needs user authorization.

Arcade manages the OAuth flow, and provides the token in `context.authorization.token` when the tool is executed. Arcade also remembers the user’s authorization tokens, so they won’t have to go through the authorization process again until the auth expires or is revoked.

### Next steps [Permalink for this section](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth\#next-steps)

Try adding more authorized tools, or explore how to handle different authorization providers and scopes.

[Tool Context](https://docs.arcade.dev/home/build-tools/tool-context "Tool Context") [Create a tool with secrets](https://docs.arcade.dev/home/build-tools/create-a-tool-with-secrets "Create a tool with secrets")

## GitHub Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") GitHub

# GitHub auth provider

The GitHub auth provider enables tools and agents to call [GitHub APIs](https://docs.github.com/en/rest/overview/resources-in-the-rest-api) on behalf of a user. Behind the scenes, the Arcade Engine and the GitHub auth provider seamlessly manage GitHub OAuth 2.0 authorization for your users.

Want to quickly get started with GitHub in your agent or AI app? The pre-built
[Arcade GitHub toolkit](https://docs.arcade.dev/toolkits/development/github/github) is what you want!

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#whats-documented-here)

This page describes how to use and configure GitHub auth with Arcade.

This auth provider is used by:

- The [Arcade GitHub toolkit](https://docs.arcade.dev/toolkits/development/github/github), which provides pre-built tools for interacting with GitHub
- Your [app code](https://docs.arcade.dev/home/auth-providers/github#using-github-auth-in-app-code) that needs to call the GitHub API
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/github#using-github-auth-in-custom-tools) that need to call the GitHub API

## Configuring GitHub auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#configuring-github-auth)

How you configure the GitHub auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

With the Arcade Cloud Engine, you can start building and testing GitHub auth without any configuration. Your users will see `Arcade.dev` as the name of the application that’s requesting permission.

When you are ready to go to production, you’ll want to configure the GitHub auth provider with your own GitHub app credentials, so users see your app name when they authorize access.

### Create a GitHub app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#create-a-github-app)

- Follow GitHub’s guide to [registering a GitHub app](https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/registering-a-github-app)
- Choose the permissions you need for your app
  - At a minimum, you must enable read-only access to the Account > Email addresses permission
  - To access repo data, you must enable at least the Repository > Contents permission
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Leave “Request user authorization (OAuth) during installation” **unchecked**
- Leave “Setup URL” blank and “Redirect on update” **unchecked**
- Ensure Optional features > User-to-server token expiration is enabled
- Copy the client ID and generate a client secret to use below

If you need to access private repositories in an organization, you must also:

1. Make the app public via Advanced > Make public
2. Add the app to the organization via Install app

Next, add the GitHub app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring GitHub auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#configuring-github-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **GitHub** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-github-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your GitHub app.
5. Click **Save**.

When you use tools that require GitHub auth using your Arcade account credentials, the Arcade Engine will automatically use this GitHub OAuth provider.

### Configuring GitHub auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#configuring-github-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#set-environment-variables)

Set the following environment variables:

```nextra-code
export GITHUB_CLIENT_ID="<your client ID>"
export GITHUB_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
GITHUB_CLIENT_ID="<your client ID>"
GITHUB_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `github` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-github
      description: "The default GitHub provider"
      enabled: true
      type: oauth2
      provider_id: github
      client_id: ${env:GITHUB_CLIENT_ID}
      client_secret: ${env:GITHUB_CLIENT_SECRET}
```

## Using GitHub auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#using-github-auth-in-app-code)

Use the GitHub auth provider in your own agents and AI apps to get a user token for the GitHub API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the GitHub API:

PythonJavaScript

```nextra-code
import requests
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

"""
In this example, we will use Arcade to authenticate with GitHub and retrieve
the number of stargazers of the ArcadeAI/arcade-ai repository.

There is a tool for that in the Arcade SDK, which simplifies the process for
you to interact with GitHub either through our Python or JavaScript SDKs or via
LLM tool calling.

Below we are just showing how to use Arcade as an auth provider, if you ever
need to.
"""

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="github",
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

if not auth_response.context.token:
    raise ValueError("No token found in auth response")

token = auth_response.context.token

owner = "ArcadeAI"
name = "arcade-ai"
headers = {
    "Accept": "application/vnd.github+json",
    "Authorization": f"Bearer {token}",
    "X-GitHub-Api-Version": "2022-11-28",
}
url = f"https://api.github.com/repos/{owner}/{name}"

response = requests.get(url, headers=headers)
response.raise_for_status()

print(response.json().get("stargazers_count"))
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

/*
In this example, we will use Arcade to authenticate with GitHub and retrieve
the number of stargazers of the ArcadeAI/arcade-ai repository.

There is a tool for that in the Arcade SDK, which simplifies the process for
you to interact with GitHub either through our Python or JavaScript SDKs or via
LLM tool calling.

Below we are just showing how to use Arcade as an auth provider, if you ever
need to.
*/

// Start the authorization process
let authResponse = await client.auth.start(userId, "github");

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

if (!authResponse.context.token) {
  throw new Error("No token found in auth response");
}

const token = authResponse.context.token;

const owner = "ArcadeAI";
const name = "arcade-ai";
const headers = {
  Accept: "application/vnd.github+json",
  Authorization: `Bearer ${token}`,
  "X-GitHub-Api-Version": "2022-11-28",
};
const url = `https://api.github.com/repos/${owner}/${name}`;

const response = await fetch(url, { headers });
if (!response.ok) {
  throw new Error(`HTTP error! status: ${response.status}`);
}
const data = await response.json();
console.log(data.stargazers_count);
```

## Using GitHub auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/github\#using-github-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can use the pre-built [Arcade GitHub toolkit](https://docs.arcade.dev/toolkits/development/github/github) to quickly build agents and AI apps that interact with GitHub.

If the pre-built tools in the GitHub toolkit don’t meet your needs, you can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the GitHub API.

Use the `GitHub()` auth class to specify that a tool requires authorization with GitHub. The `context.authorization.token` field will be automatically populated with the user’s GitHub token:

```nextra-code
from typing import Annotated

import httpx
from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import GitHub


@tool(requires_auth=GitHub())
async def count_stargazers(
    context: ToolContext,
    owner: Annotated[str, "The owner of the repository"],
    name: Annotated[str, "The name of the repository"],
) -> Annotated[int, "The number of stargazers (stars) for the specified repository"]:
    """Count the number of stargazers (stars) for a GitHub repository."""
    if not context.authorization or not context.authorization.token:
        raise ValueError("No token found in context")

    headers = {
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {context.authorization.token}",
        "X-GitHub-Api-Version": "2022-11-28",
    }
    url = f"https://api.github.com/repos/{owner}/{name}"

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get("stargazers_count", 0)
```

[Dropbox](https://docs.arcade.dev/home/auth-providers/dropbox "Dropbox") [Google](https://docs.arcade.dev/home/auth-providers/google "Google")

## Dropbox Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Dropbox

# Dropbox auth provider

At this time, Arcade does not offer a default Dropbox Auth Provider. To use
Dropbox auth, you must create a custom Auth Provider with your own Dropbox
OAuth 2.0 credentials as described below.

The Dropbox auth provider enables tools and agents to call the Dropbox API on behalf of a user. Behind the scenes, the Arcade Engine and the Dropbox auth provider seamlessly manage Dropbox OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#whats-documented-here)

This page describes how to use and configure Dropbox auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/dropbox#using-dropbox-auth-in-app-code) that needs to call Dropbox APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/dropbox#using-dropbox-auth-in-custom-tools) that need to call Dropbox APIs

## Configuring Dropbox auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#configuring-dropbox-auth)

### Create a Dropbox app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#create-a-dropbox-app)

- Create a Dropbox Application in the [Dropbox App Console](https://www.dropbox.com/developers/apps)
- In the Settings tab, under the “OAuth 2” section, set the redirect URI to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- In the Permissions tab, add any scopes that your app will need
- In the Settings tab, copy the App key (Client ID) and App secret (Client Secret), which you’ll need below

Next, add the Dropbox app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Dropbox auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#configuring-dropbox-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Dropbox** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-dropbox-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Dropbox app.
5. Click **Save**.

When you use tools that require Dropbox auth using your Arcade account credentials, the Arcade Engine will automatically use this Dropbox OAuth provider.

### Configuring Dropbox auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#configuring-dropbox-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#set-environment-variables)

The Client ID is the Dropbox “App key” and the Client Secret is the Dropbox
“App secret”.

Set the following environment variables:

```nextra-code
export DROPBOX_CLIENT_ID="<your client ID>"
export DROPBOX_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
DROPBOX_CLIENT_SECRET="<your client secret>"
DROPBOX_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `dropbox` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-dropbox
      description: "The default Dropbox provider"
      enabled: true
      type: oauth2
      provider_id: dropbox
      client_id: ${env:DROPBOX_CLIENT_ID}
      client_secret: ${env:DROPBOX_CLIENT_SECRET}

```

## Using Dropbox auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#using-dropbox-auth-in-app-code)

Use the Dropbox auth provider in your own agents and AI apps to get a user-scoped token for the Dropbox API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Dropbox API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="dropbox",
    scopes=["openid", "sharing.read", "files.metadata.read"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "dropbox", {
  scopes: ["openid", "sharing.read", "files.metadata.read"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Dropbox auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/dropbox\#using-dropbox-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Dropbox API.

Use the `Dropbox()` auth class to specify that a tool requires authorization with Dropbox. The `context.authorization.token` field will be automatically populated with the user’s Dropbox token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Dropbox


@tool(
    requires_auth=Dropbox(
        scopes=["files.metadata.read"],
    )
)
async def list_files(
    context: ToolContext,
    path: Annotated[\
        Optional[str],\
        "The path to the folder to list the contents of. Defaults to empty string to list the root folder.",\
    ] = "",
) -> Annotated[dict, "List of servers the user is a member of"]:
    """Starts returning the contents of a folder."""
    url = "https://api.dropboxapi.com/2/files/list_folder"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json={"path": path})
        response.raise_for_status()
        return response.json()
```

[Discord](https://docs.arcade.dev/home/auth-providers/discord "Discord") [GitHub](https://docs.arcade.dev/home/auth-providers/github "GitHub")

## Google Docs Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Productivity & Docs [Google](https://docs.arcade.dev/toolkits/productivity/google/calendar "Google") Docs

# Docs

**Description:** Enable agents to interact with Google Docs documents.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/google)

**Auth:** User authorizationvia the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google)

This Toolkit is not available in Arcade Cloud. You can use these tools with a [self-hosted](https://docs.arcade.dev/home/install/overview) instance of Arcade.

[![PyPI Version](https://img.shields.io/pypi/v/arcade_google)](https://pypi.org/project/arcade_google/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_google)](https://pypi.org/project/arcade_google/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_google)](https://pypi.org/project/arcade_google/)[![Downloads](https://img.shields.io/pypi/dm/arcade_google)](https://pypi.org/project/arcade_google/)

The Arcade Docs toolkit provides a pre-built set of tools for interacting with Google Docs. These tools make it easy to build agents and AI apps that can:

- Create, update, list, and delete documents

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/docs\#available-tools)

These tools are currently available in the Arcade Docs toolkit.

| Tool Name | Description |
| --- | --- |
| GetDocumentById | Retrieve a Google Docs document by ID. Note: This tool currently requires a self-hosted instance of Arcade. |
| InsertTextAtEndOfDocument | Insert text at the end of a Google Docs document. Note: This tool currently requires a self-hosted instance of Arcade. |
| CreateBlankDocument | Create a new blank Google Docs document with a title. Note: This tool currently requires a self-hosted instance of Arcade. |
| CreateDocumentFromText | Create a new Google Docs document with specified text content. Note: This tool currently requires a self-hosted instance of Arcade. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Google auth\\
provider](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-custom-tools).

## GetDocumentById [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/docs\#getdocumentbyid)

See Example >

Get the latest version of the specified Google Docs document.

**Parameters**

- **`document_id`** _(string, required)_ The ID of the document to retrieve.

* * *

## InsertTextAtEndOfDocument [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/docs\#inserttextatendofdocument)

See Example >

Insert text at the end of an existing Google Docs document.

**Parameters**

- **`document_id`** _(string, required)_ The ID of the document to update.
- **`text_content`** _(string, required)_ The text content to insert into the document.

* * *

## CreateBlankDocument [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/docs\#createblankdocument)

See Example >

Create a blank Google Docs document with the specified title.

**Parameters**

- **`title`** _(string, required)_ The title of the blank document to create.

* * *

## CreateDocumentFromText [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/docs\#createdocumentfromtext)

See Example >

Create a Google Docs document with the specified title and text content.

**Parameters**

- **`title`** _(string, required)_ The title of the document to create.
- **`text_content`** _(string, required)_ The text content to insert into the document.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/docs\#auth)

The Arcade Docs toolkit uses the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google) to connect to users’ Google accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Google auth provider](https://docs.arcade.dev/home/auth-providers/google#configuring-google-auth) with your own Google app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_google\\
```](https://docs.arcade.dev/home/install/overview)

[Contacts](https://docs.arcade.dev/toolkits/productivity/google/contacts "Contacts") [Drive](https://docs.arcade.dev/toolkits/productivity/google/drive "Drive")

## Anthropic Integration
[Home](https://docs.arcade.dev/home "Home") [Model Providers](https://docs.arcade.dev/home/supported-models "Model Providers") Anthropic

# Anthropic

## Connecting [Permalink for this section](https://docs.arcade.dev/home/supported-models/anthropic\#connecting)

To send a message to Anthropic, you can use the OpenAI Client. The Arcade Engine will convert the OpenAI requests and responses to and from
the Anthropic chat formats.

```nextra-code
import os
from openai import OpenAI

client = OpenAI(
    base_url="https://api.arcade.dev/v1",
    api_key=os.environ.get("ARCADE_API_KEY"))


response = client.chat.completions.create(
    model = "claude-3-5-sonnet-20240620",
    user = "user@arcade.dev",
    messages = [\
        {"role": "user", "content": "Summarize my last 10 emails"}\
    ]
)
```

## Configuration [Permalink for this section](https://docs.arcade.dev/home/supported-models/anthropic\#configuration)

This is a simple example on enabling Anthropic in the Arcade Engine

```nextra-code
llm:
  models:
    - id: anthropic
      anthropic:
        api_key: <ANTHROPIC API KEY>
```

For more advanced configuration, see the [model docs](https://docs.arcade.dev/home/configure/models#anthropic)

[Overview](https://docs.arcade.dev/home/supported-models "Overview") [Groq](https://docs.arcade.dev/home/supported-models/groq "Groq")

## Build FastAPI Worker
# 404

## This page could not be found.

## X Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") X

# X auth provider

The X auth provider enables tools and agents to call the X (Twitter) API on behalf of a user. Behind the scenes, the Arcade Engine and the X auth provider seamlessly manage X OAuth 2.0 authorization for your users.

Want to quickly get started with X services in your agent or AI app? The
pre-built [Arcade X toolkit](https://docs.arcade.dev/toolkits/social-communication/x) is what you
want!

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#whats-documented-here)

This page describes how to use and configure X auth with Arcade.

This auth provider is used by:

- The [Arcade X toolkit](https://docs.arcade.dev/toolkits/social-communication/x), which provides pre-built tools for interacting with X
- Your [app code](https://docs.arcade.dev/home/auth-providers/x#using-x-auth-in-app-code) that needs to call X APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/x#using-x-auth-in-custom-tools) that need to call X APIs

## Configuring X auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#configuring-x-auth)

How you configure the X auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

With the Arcade Cloud Engine, you can start building and testing X auth without any configuration. Your users will see `Arcade (demo)` as the name of the application that’s requesting permission.

When you are ready to go to production, you’ll want to configure the X auth provider with your own X app credentials, so users see your app name when they authorize access.

### Create an X app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#create-an-x-app)

- Follow X’s guide to [creating an app](https://developer.x.com/en/docs/x-api/getting-started/getting-access-to-the-x-api)
- Enable user authentication for your new app, and set its type to “Web App, Automated App or Bot”
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the client ID and client secret to use below

Next, add the X app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring X auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#configuring-x-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **X** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-x-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your X app.
5. Click **Save**.

When you use tools that require X auth using your Arcade account credentials, the Arcade Engine will automatically use this X OAuth provider.

### Configuring X auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#configuring-x-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#set-environment-variables)

Set the following environment variables:

```nextra-code
export X_CLIENT_ID="<your client ID>"
export X_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
X_CLIENT_ID="<your client ID>"
X_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add an `x` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-x
      description: "The default X provider"
      enabled: true
      type: oauth2
      provider_id: x
      client_id: ${env:X_CLIENT_ID}
      client_secret: ${env:X_CLIENT_SECRET}
```

## Using X auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#using-x-auth-in-app-code)

Use the X auth provider in your own agents and AI apps to get a user token for the X API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for X:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="x",
    scopes=["tweet.read", "tweet.write", "users.read"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "x", [\
  "tweet.read",\
  "tweet.write",\
  "users.read",\
]);

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using X auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/x\#using-x-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can use the pre-built [Arcade X toolkit](https://docs.arcade.dev/toolkits/social-communication/x) to quickly build agents and AI apps that interact with X.

If the pre-built tools in the X toolkit don’t meet your needs, you can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the X API.

Use the `X()` auth class to specify that a tool requires authorization with X. The `context.authorization.token` field will be automatically populated with the user’s X token:

```nextra-code
from typing import Annotated

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import X


@tool(
    requires_auth=X(
        scopes=["tweet.read", "tweet.write", "users.read"],
    )
)
async def post_tweet(
    context: ToolContext,
    tweet_text: Annotated[str, "The text content of the tweet you want to post"],
) -> Annotated[str, "Success string and the URL of the tweet"]:
    """Post a tweet to X (Twitter)."""
    url = "https://api.x.com/2/tweets"
    headers = {
        "Authorization": f"Bearer {context.authorization.token}",
        "Content-Type": "application/json",
    }
    payload = {"text": tweet_text}

    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=payload)
        response.raise_for_status()

        tweet_id = response.json()["data"]["id"]
        return f"Tweet with id {tweet_id} posted successfully. URL: https://x.com/x/status/{tweet_id}"
```

[Twitch](https://docs.arcade.dev/home/auth-providers/twitch "Twitch") [Zoom](https://docs.arcade.dev/home/auth-providers/zoom "Zoom")

## Retryable Tool Error
[Home](https://docs.arcade.dev/home "Home") [Build tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit "Build tools") Retry tools with improved prompt

# RetryableToolError in Arcade

Sometimes you may want to retry a tool call with additional context to improve the tool call’s input parameters predicted by the model and try again. You can do this by raising a `RetryableToolError` within the tool.

### Understanding RetryableToolError [Permalink for this section](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt\#understanding-retryabletoolerror)

Raising the `RetryableToolError` is useful when you want to retry the tool call and give the model that is generating the tool call’s input parameters additional context to improve the parameters for the next tool call.

### When to Use RetryableToolError [Permalink for this section](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt\#when-to-use-retryabletoolerror)

A RetryableToolError should be raised from within a tool if additional prompt content would likely improve the tool call outcome.

### Example: Sending a Direct Message in Slack [Permalink for this section](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt\#example-sending-a-direct-message-in-slack)

Below is an example of a tool that sends a direct message to a user in Slack:

1. If the specified user is not found, the tool retrieves a list of all valid inputs for the `user_name` parameter.
2. The tool then raises a `RetryableToolError` with the list of valid inputs.
3. This allows the model to generate a valid input for the `user_name` parameter in the next tool call iteration.

```nextra-code
from typing import Annotated

from slack_sdk import WebClient

from arcade.sdk.errors import RetryableToolError
from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Slack


@tool(
    requires_auth=Slack(
        scopes=[\
            "chat:write",\
            "im:write",\
            "users.profile:read",\
            "users:read",\
        ],
    )
)
def send_dm_to_user(
    context: ToolContext,
    user_name: Annotated[\
        str,\
        "The Slack username of the person you want to message. Slack usernames are ALWAYS lowercase.",\
    ],
    message: Annotated[str, "The message you want to send"],
) -> Annotated[str, "A confirmation message that the DM was sent"]:
    """Send a direct message to a user in Slack."""

    slackClient = WebClient(token=context.authorization.token)

    # Step 1: Retrieve the user's Slack ID based on their username
    userListResponse = slackClient.users_list()
    user_id = None
    for user in userListResponse["members"]:
        if user["name"].lower() == user_name.lower():
            user_id = user["id"]
            break

    # If the user is not found, raise a RetryableToolError with a
    # list of all valid inputs for the user_name parameter
    if not user_id:
        raise RetryableToolError(
            "User not found",
            developer_message=f"User with username '{user_name}' not found.",
            additional_prompt_content=f"Valid values for user_name input param: {userListResponse}",
            retry_after_ms=500,
        )

    # Step 2: Retrieve the DM channel ID with the user
    im_response = slackClient.conversations_open(users=[user_id])
    dm_channel_id = im_response["channel"]["id"]

    # Step 3: Send the DM
    slackClient.chat_postMessage(channel=dm_channel_id, text=message)

    return "DM sent successfully"
```

[Handle tool errors](https://docs.arcade.dev/home/build-tools/handle-tool-errors "Handle tool errors") [Why evaluate tools?](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools "Why evaluate tools?")

## Notion Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Notion

# Notion auth provider

The Notion auth provider enables tools and agents to call [Notion APIs](https://developers.notion.com/reference/intro) on behalf of a user. Behind the scenes, the Arcade Engine and the Notion auth provider seamlessly manage Notion OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#whats-documented-here)

This page describes how to use and configure Notion auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/notion#using-notion-auth-in-app-code) that needs to call the Notion API
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/notion#using-notion-auth-in-custom-tools) that need to call the Notion API

## Configuring Notion auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#configuring-notion-auth)

How you configure the Notion auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

With the Arcade Cloud Engine, you can start building and testing Notion auth without any configuration. Your users will see `Arcade (demo)` as the name of the application that’s requesting permission.

When you are ready to go to production, you’ll want to configure the Notion auth provider with your own Notion app credentials, so users see your app name when they authorize access.

### Create a Notion app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#create-a-notion-app)

- Create a new public integration in your [integration’s settings page](https://www.notion.so/profile/integrations)
- Set the redirect URI to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Once you complete creating your integration, copy the client ID and client secret to use below

Next, add the Notion app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Notion auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#configuring-notion-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Notion** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-notion-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Notion app.
5. Click **Save**.

When you use tools that require Notion auth using your Arcade account credentials, the Arcade Engine will automatically use this Notion OAuth provider.

### Configuring Notion auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#configuring-notion-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#set-environment-variables)

Set the following environment variables:

```nextra-code
export NOTION_CLIENT_ID="<your client ID>"
export NOTION_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
NOTION_CLIENT_ID="<your client ID>"
NOTION_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `notion` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-notion
      description: "The default Notion provider"
      enabled: true
      type: oauth2
      provider_id: notion
      client_id: ${env:NOTION_CLIENT_ID}
      client_secret: ${env:NOTION_CLIENT_SECRET}
```

## Using Notion auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#using-notion-auth-in-app-code)

Use the Notion auth provider in your own agents and AI apps to get a user token for the Notion API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Notion API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="notion"
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "notion");

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Notion auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/notion\#using-notion-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can use the pre-built [Arcade Notion toolkit](https://docs.arcade.dev/toolkits/development/github/github) to quickly build agents and AI apps that interact with Notion.

If the pre-built tools in the Notion toolkit don’t meet your needs, you can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Notion API.

Use the `Notion()` auth class to specify that a tool requires authorization with Notion. The `context.authorization.token` field will be automatically populated with the user’s Notion token:

```nextra-code
from typing import Annotated

import httpx
from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Notion


@tool(requires_auth=Notion())
async def search_page_by_title(
    context: ToolContext,
    title_includes: Annotated[str, "The text to compare against page and database titles."],
) -> Annotated[dict, "The matching pages."]:
    """
    Search for a Notion page by its title.
    """
    url = "https://api.notion.com/v1/search"
    headers = {
        "Authorization": context.authorization.token,
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28",
    }
    payload = {"query": title_includes, "filter": {"property": "object", "value": "page"}}

    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return dict(response.json())
```

[Microsoft](https://docs.arcade.dev/home/auth-providers/microsoft "Microsoft") [OAuth 2.0](https://docs.arcade.dev/home/auth-providers/oauth2 "OAuth 2.0")

## Ollama Configuration Guide
[Home](https://docs.arcade.dev/home "Home") [Model Providers](https://docs.arcade.dev/home/supported-models "Model Providers") Ollama

# Ollama

First, make sure you have completed these pre-requisites:

- A self-hosted Arcade instance, see the [self-hosted install docs](https://docs.arcade.dev/home/install/overview)
- [Ollama](https://ollama.com/) installed and running

## Connecting [Permalink for this section](https://docs.arcade.dev/home/supported-models/ollama\#connecting)

To send a message to Ollama, you can use the OpenAI Client. Arcade will use the OpenAI interface internally to send messages to Ollama.

Ollama is currently not supported on Arcade Cloud, but can be used with a self hosted engine.

```nextra-code
import os

from openai import OpenAI

client = OpenAI(
  base_url="http://localhost:9099/v1", #  Where your self-hosted Arcade engine is running
  api_key=os.environ.get("ARCADE_API_KEY")
)


response = client.chat.completions.create(
    model="ollama/llama3.2",
    user="user@arcade.dev",
    messages=[{"role": "user", "content": "hello"}],
    stream=False,
)
```

## Configuration [Permalink for this section](https://docs.arcade.dev/home/supported-models/ollama\#configuration)

This is a simple example for enabling Ollama in the Arcade Engine

```nextra-code
llm:
  models:
    - id: ollama
      openai: # Use the OpenAI interface for Ollama
        base_url: http://localhost:11434
        chat_endpoint: /v1/chat/completions
        model: llama3.2
        api_key: ollama # Required, but ignored
```

For more advanced configuration, see the [model docs](https://docs.arcade.dev/home/configure/models#ollama)

[Groq](https://docs.arcade.dev/home/supported-models/groq "Groq") [OpenAI](https://docs.arcade.dev/home/supported-models/openai "OpenAI")

## Web Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Developer Tools](https://docs.arcade.dev/toolkits/development/github "Developer Tools") [Web](https://docs.arcade.dev/toolkits/development/web/reference "Web") Web

# Web

**Description:** Enable agents to scrape, crawl, and map websites.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/web)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_web)](https://pypi.org/project/arcade_web/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_web)](https://pypi.org/project/arcade_web/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_web)](https://pypi.org/project/arcade_web/)[![Downloads](https://img.shields.io/pypi/dm/arcade_web)](https://pypi.org/project/arcade_web/)

The Arcade Web toolkit provides a pre-built set of tools for interacting with websites. These tools make it easy to build agents and AI apps that can:

- Scrape web pages
- Crawl websites
- Map website structures
- Retrieve crawl status and data
- Cancel ongoing crawls

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#available-tools)

These tools are currently available in the Arcade Web toolkit.

| Tool Name | Description |
| --- | --- |
| ScrapeUrl | Scrape a URL and return data in specified formats. |
| CrawlWebsite | Crawl a website and return crawl status and data. |
| GetCrawlStatus | Retrieve the status of a crawl job. |
| GetCrawlData | Retrieve data from a completed crawl job. |
| CancelCrawl | Cancel an ongoing crawl job. |
| MapWebsite | Map a website from a single URL to a map of the entire website. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## ScrapeUrl [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#scrapeurl)

See Example >

Scrape a URL and return data in specified formats.

**Auth:**

- **Environment Variables Required:**
  - `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

**Parameters**

- **`url`** _(string, required)_ The URL to scrape.
- **`formats`** _(enum ( [Formats](https://docs.arcade.dev/toolkits/development/web/reference#formats)), optional)_ The format of the scraped web page. Defaults to `Formats.MARKDOWN`.
- **`only_main_content`** _(bool, optional)_ Only return the main content of the page. Defaults to `True`.
- **`include_tags`** _(list, optional)_ List of tags to include in the output.
- **`exclude_tags`** _(list, optional)_ List of tags to exclude from the output.
- **`wait_for`** _(int, optional)_ Delay in milliseconds before fetching content. Defaults to `10`.
- **`timeout`** _(int, optional)_ Timeout in milliseconds for the request. Defaults to `30000`.

* * *

## CrawlWebsite [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#crawlwebsite)

See Example >

Crawl a website and return crawl status and data.

**Auth:**

- **Environment Variables Required:**
  - `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

**Parameters**

- **`url`** _(string, required)_ The URL to crawl.
- **`exclude_paths`** _(list, optional)_ URL patterns to exclude from the crawl.
- **`include_paths`** _(list, optional)_ URL patterns to include in the crawl.
- **`max_depth`** _(int, required)_ Maximum depth to crawl. Defaults to `2`.
- **`ignore_sitemap`** _(bool, required)_ Ignore the website sitemap. Defaults to `True`.
- **`limit`** _(int, required)_ Limit the number of pages to crawl. Defaults to `10`.
- **`allow_backward_links`** _(bool, required)_ Enable navigation to previously linked pages. Defaults to `False`.
- **`allow_external_links`** _(bool, required)_ Allow following links to external websites. Defaults to `False`.
- **`webhook`** _(string, optional)_ URL to send a POST request when the crawl is started, updated, and completed.
- **`async_crawl`** _(bool, required)_ Run the crawl asynchronously. Defaults to `True`.

* * *

## GetCrawlStatus [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#getcrawlstatus)

See Example >

Retrieve the status of a crawl job.

**Auth:**

- **Environment Variables Required:**
  - `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

**Parameters**

- **`crawl_id`** _(string, required)_ The ID of the crawl job.

* * *

## GetCrawlData [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#getcrawldata)

See Example >

Retrieve data from a completed crawl job.

**Auth:**

- **Environment Variables Required:**
  - `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

**Parameters**

- **`crawl_id`** _(string, required)_ The ID of the crawl job.

* * *

## CancelCrawl [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#cancelcrawl)

See Example >

Cancel an ongoing crawl job.

**Auth:**

- **Environment Variables Required:**
  - `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

**Parameters**

- **`crawl_id`** _(string, required)_ The ID of the asynchronous crawl job to cancel.

* * *

## MapWebsite [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#mapwebsite)

See Example >

Map a website from a single URL to a map of the entire website.

**Auth:**

- **Environment Variables Required:**
  - `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

**Parameters**

- **`url`** _(string, required)_ The base URL to start crawling from.
- **`search`** _(string, optional)_ Search query to use for mapping.
- **`ignore_sitemap`** _(bool, required)_ Ignore the website sitemap. Defaults to `True`.
- **`include_subdomains`** _(bool, required)_ Include subdomains of the website. Defaults to `False`.
- **`limit`** _(int, required)_ Maximum number of links to return. Defaults to `5000`.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/web\#auth)

The Arcade Web toolkit uses [Firecrawl](https://www.firecrawl.dev/) to scrape, crawl, and map websites.

**Global Environment Variables:**

- `FIRECRAWL_API_KEY`: Your [Firecrawl](https://www.firecrawl.dev/) API key.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_web\\
```](https://docs.arcade.dev/home/install/overview)

[Reference](https://docs.arcade.dev/toolkits/development/web/reference "Reference") [Code Sandbox](https://docs.arcade.dev/toolkits/development/code-sandbox "Code Sandbox")

## Hubspot Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Hubspot

# Hubspot auth provider

The Hubspot auth provider enables tools and agents to call Hubspot APIs on behalf of a user. Behind the scenes, the Arcade Engine and the Hubspot auth provider seamlessly manage Hubspot OAuth 2.0 authorization for your users.

Want to quickly get started with Hubspot services in your agent or AI app? The
pre-built [Arcade Hubspot toolkit](https://docs.arcade.dev/toolkits/sales/hubspot) is what
you want!

## What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#whats-documented-here)

This page describes how to use and configure Hubspot auth with Arcade.

This auth provider is used by:

- The [Arcade Hubspot toolkit](https://docs.arcade.dev/toolkits/sales/hubspot), which provides pre-built tools for interacting with Hubspot
- Your [app code](https://docs.arcade.dev/home/auth-providers/hubspot#using-hubspot-auth-in-app-code) that needs to call Hubspot APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/hubspot#using-hubspot-auth-in-custom-tools) that need to call Hubspot APIs

## Use Arcade’s Default Hubspot Auth Provider [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#use-arcades-default-hubspot-auth-provider)

Arcade offers a default Hubspot auth provider that you can use in the Arcade Cloud. In this case, your users will see `Arcade` as the name of the application that’s requesting permission.

If you choose to use Arcade’s Hubspot auth, you don’t need to configure anything. Follow the [Hubspot toolkit examples](https://docs.arcade.dev/toolkits/sales/hubspot) to get started calling Hubspot tools.

## Use Your Own Hubspot App Credentials [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#use-your-own-hubspot-app-credentials)

In a production environment, you will most likely want to use your own Hubspot app credentials. This way, your users will see your application’s name requesting permission.

You can use your own Hubspot credentials in both the Arcade Cloud and in a [self-hosted Arcade Engine](https://docs.arcade.dev/home/install/local) instance.

Before showing how to configure your Hubspot app credentials, let’s go through the steps to create a Hubspot app.

## Create a Hubspot App [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#create-a-hubspot-app)

Hubspot has two types of apps: Public and Private. You will need to create a Public one.

Follow [Hubspot’s tutorial](https://developers.hubspot.com/docs/guides/apps/public-apps/overview) to create your Public App. You will need a [developer account](https://app.hubspot.com/signup-hubspot/developers) to do this.

When creating your app, use the following settings:

- Under **App Info**, choose a name, description, and logo for your app
- Under **Auth**, enter the **Redirect URL**: `https://cloud.arcade.dev/api/v1/oauth/callback`
- In the **Scopes** section, click **Add Scope** and add the following scopes with the **Conditionally Required** scope type:
  - `crm.objects.companies.read`
  - `crm.objects.contacts.read`
  - `crm.objects.contacts.write`
  - `crm.objects.deals.read`
  - `sales-email-read`

Create the app and take note of the **Client ID** and **Client Secret**. You don’t need to follow Hubspot’s instructions to install the app.

If you are implementing your own [Hubspot custom tools](https://docs.arcade.dev/home/auth-providers/hubspot#using-hubspot-auth-in-custom-tools), make sure to also add [any extra scopes](https://developers.hubspot.com/docs/guides/apps/authentication/scopes) necessary for the actions your tools need to perform. All extra scopes must be added to the app as `Conditionally Required` or `Optional`, never as `Required`, otherwise the Arcade Hubspot toolkit will not work. Read more about [Hubspot scope types](https://developers.hubspot.com/changelog/advanced-auth-and-scope-settings-for-public-apps).

## Configuring your own Hubspot Auth Provider in Arcade [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#configuring-your-own-hubspot-auth-provider-in-arcade)

There are two ways to configure your Hubspot app credentials in Arcade:

1. From the Arcade Dashboard GUI
2. By editing the `engine.yaml` file directly (only possible with a self-hosted Arcade Engine)

We show both options step-by-step below.

Dashboard GUIEngine Configuration YAML

### Configure Hubspot Auth Using the Arcade Dashboard GUI

#### Access the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#access-the-arcade-dashboard)

To access the Arcade Cloud dashboard, go to [api.arcade.dev/dashboard](https://api.arcade.dev/dashboard). If you are self-hosting, by default the dashboard will be available at `http://localhost:9099/dashboard`. Adjust the host and port number to match your environment.

#### Navigate to the OAuth Providers page [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#navigate-to-the-oauth-providers-page)

- Under the **OAuth** section of the Arcade Dashboard left-side menu, click **Providers**.
- Click **Add OAuth Provider** in the top right corner.
- Select the **Included Providers** tab at the top.
- In the **Provider** dropdown, select **Hubspot**.

#### Enter the provider details [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#enter-the-provider-details)

- Enter `hubspot` as the **ID** for your provider
- Optionally enter a **Description**.
- Enter the **Client ID** and **Client Secret** from your Hubspot app.

#### Create the provider [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#create-the-provider)

Hit the **Create** button and the provider will be ready to be used in the Arcade Engine.

### Configure Hubspot Auth Using the Engine Configuration YAML

Refer to [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how to set environment variables and configure the Arcade Engine.

#### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#set-environment-variables)

Set the following environment variables:

```nextra-code
export HUBSPOT_CLIENT_ID="<your client ID>"
export HUBSPOT_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
HUBSPOT_CLIENT_ID="<your client ID>"
HUBSPOT_CLIENT_SECRET="<your client secret>"
```

#### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#edit-the-engine-configuration)

To locate the `engine.yaml` file in your OS after installing the Arcade Engine, check the [Engine configuration file](https://docs.arcade.dev/home/configure/overview#engine-configuration-file) documentation.

Edit the `engine.yaml` file and add a Hubspot item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: hubspot
      description: "Custom Hubspot provider"
      enabled: true
      type: oauth2
      provider_id: hubspot
      client_id: ${env:HUBSPOT_CLIENT_ID}
      client_secret: ${env:HUBSPOT_CLIENT_SECRET}
```

#### Restart the Arcade Engine [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#restart-the-arcade-engine)

If the Arcade Engine is already running, you will need to restart it for the changes to take effect.

## Using the Arcade Hubspot Toolkit [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#using-the-arcade-hubspot-toolkit)

The [Arcade Hubspot toolkit](https://docs.arcade.dev/toolkits/sales/hubspot) provides tools to interact with various Hubspot objects, such as companies, contacts, deals, and email messages.

Refer to the [toolkit documentation and examples](https://docs.arcade.dev/toolkits/sales/hubspot) to learn how to use the toolkit to build agents and AI apps that interact with Hubspot services.

## Using Hubspot auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#using-hubspot-auth-in-app-code)

Use the Hubspot auth provider in your own agents and AI apps to get a user-scoped token for the Hubspot API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Hubspot API:

PythonJavaScript

If you are [self-hosting Arcade](https://docs.arcade.dev/home/install/overview), change the `base_url` parameter in the `Arcade` constructor to match your Arcade Engine URL. By default, the Engine will be available at `http://localhost:9099`.

```nextra-code
from arcadepy import Arcade

client = Arcade(base_url="https://api.arcade.dev")  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="hubspot",
    scopes=["oauth", "crm.objects.companies.read"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

If you are [self-hosting Arcade](https://docs.arcade.dev/home/install/overview), change the `baseURL` parameter in the `Arcade` constructor to match your Arcade Engine URL. By default, the Engine will be available at `http://localhost:9099`.

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade({ baseURL: "https://api.arcade.dev" }); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "hubspot", {
  scopes: ["oauth", "crm.objects.companies.read"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
const response = await client.auth.waitForCompletion(authResponse);

const token = response.context.token;
// Do something interesting with the token...
```

You can use the auth token to call [Hubspot Companies endpoints](https://developers.hubspot.com/docs/guides/api/crm/objects/companies) and read information about companies. By changing or adding scopes to the `client.auth.start` call, you can call other Hubspot endpoints.

The scopes supported by the Arcade Hubspot auth provider are the ones [listed above](https://docs.arcade.dev/home/auth-providers/hubspot#create-a-hubspot-app). If you created your own Hubspot app, make sure to add the scopes you intend to use in the `client.auth.start` call.

## Using Hubspot auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/hubspot\#using-hubspot-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Hubspot API.

Use the `Hubspot()` auth class to specify that a tool requires authorization with Hubspot. The authentication token needed to call the Hubspot API is available in the tool context through the `context.get_auth_token_or_empty()` method.

```nextra-code
from typing import Annotated

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Hubspot


@tool(
    requires_auth=Hubspot(
        scopes=["oauth", "crm.objects.companies.read"],
    )
)
async def get_company_details(
    context: ToolContext,
    company_id: Annotated[\
        str,\
        "The ID of the company to get the details of.",\
    ],
) -> Annotated[dict, "Details of the company"]:
    """Gets the details of a company."""
    url = f"https://api.hubapi.com/crm//v3/objects/companies/{company_id}"
    headers = {"Authorization": f"Bearer {context.get_auth_token_or_empty()}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

If you are [self-hosting Arcade](https://docs.arcade.dev/home/install/overview), you will need to restart the Arcade Worker and the Engine for the new tool to be available.

Your new tool can be called like demonstrated below:

PythonJavaScript

If you are self-hosting, change the `base_url` parameter in the `Arcade` constructor to match your Arcade Engine URL. By default, the Engine will be available at `http://localhost:9099`.

```nextra-code
from arcadepy import Arcade

client = Arcade(base_url="https://api.arcade.dev")  # Automatically finds the `ARCADE_API_KEY` env variable

USER_ID = "user@example.com"
TOOL_NAME = "Hubspot.GetCompanyDetails"

auth_response = client.tools.authorize(tool_name=TOOL_NAME, user_id=USER_ID)

if auth_response.status != "completed":
    print(f"Click this link to authorize: {auth_response.url}")

# Wait for the authorization to complete
client.auth.wait_for_completion(auth_response)

tool_input = {
    "company_id": "32134490789",
}

response = client.tools.execute(
    tool_name=TOOL_NAME,
    input=tool_input,
    user_id=USER_ID,
)
print(response.output.value)
```

If you are self-hosting, change the `baseURL` parameter in the `Arcade` constructor to match your Arcade Engine URL. By default, the Engine will be available at `http://localhost:9099`.

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade({ baseURL: "https://api.arcade.dev" }); // Automatically finds the `ARCADE_API_KEY` env variable

const USER_ID = "user@example.com";
const TOOL_NAME = "Hubspot.GetCompanyDetails";

// Start the authorization process
const authResponse = await client.tools.authorize({
  tool_name: TOOL_NAME,
  user_id: USER_ID,
});

if (authResponse.status !== "completed") {
  console.log(`Click this link to authorize: ${authResponse.url}`);
}

// Wait for the authorization to complete
await client.auth.waitForCompletion(authResponse);

const toolInput = {
  company_id: "1234567890",
};

const response = await client.tools.execute({
  tool_name: TOOL_NAME,
  input: toolInput,
  user_id: USER_ID,
});

console.log(response.output.value);
```

[Google](https://docs.arcade.dev/home/auth-providers/google "Google") [Linkedin](https://docs.arcade.dev/home/auth-providers/linkedin "Linkedin")

## 404 Error Page
# 404

## This page could not be found.

## Google Drive Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Productivity & Docs [Google](https://docs.arcade.dev/toolkits/productivity/google/calendar "Google") Drive

# Drive

**Description:** Enable agents to interact with Google Drive.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/google)

**Auth:** User authorizationvia the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_google)](https://pypi.org/project/arcade_google/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_google)](https://pypi.org/project/arcade_google/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_google)](https://pypi.org/project/arcade_google/)[![Downloads](https://img.shields.io/pypi/dm/arcade_google)](https://pypi.org/project/arcade_google/)

The Arcade Drive toolkit provides a pre-built set of tools for interacting with Google Drive. These tools make it easy to build agents and AI apps that can:

- Search Google documents in the user’s Google Drive
- Search and retrieve the contents of Google documents in the user’s Google Drive

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/drive\#available-tools)

These tools are currently available in the Arcade Drive toolkit.

| Tool Name | Description |
| --- | --- |
| SearchDocuments | Search for documents in the user's Google Drive. Note: This tool currently requires a self-hosted instance of Arcade. |
| SearchAndRetrieveDocuments | Search and retrieve the contents of Google documents in the user's Google Drive. Note: This tool currently requires a self-hosted instance of Arcade. |
| GetFileTreeStructure | Get the file/folder tree structure of the user's Google Drive. |
| GenerateGoogleFilePickerUrl | Generate a Google File Picker URL for user-driven file selection and authorization |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Google auth\\
provider](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-custom-tools).

## SearchDocuments [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/drive\#searchdocuments)

See Example >

Search Google documents in the user’s Google Drive. Excludes documents that are in the trash.

**Parameters**

- **`document_contains`** _(list\[str\], optional)_ Keywords or phrases that must be in the document title or body. Provide a list of keywords or phrases if needed.
- **`document_not_contains`** _(list\[str\], optional)_ Keywords or phrases that must not be in the document title or body. Provide a list of keywords or phrases if needed.
- **`search_only_in_shared_drive_id`** _(str, optional)_ The ID of the shared drive to restrict the search to. If provided, the search will only return documents from this drive. Defaults to None, which searches across all drives.
- **`include_shared_drives`** _(bool, optional)_ Whether to include documents from shared drives in the search results. Defaults to False (searches only in the user’s ‘My Drive’).
- **`include_organization_domain_documents`** _(bool, optional)_ Whether to include documents from the organization’s domain. This is applicable to admin users who have permissions to view organization-wide documents in a Google Workspace account. Defaults to False.
- **`order_by`** _(enum ( [OrderBy](https://docs.arcade.dev/toolkits/productivity/google/reference#orderby)), optional)_ Sort order. Defaults to listing the most recently modified documents first.
- **`limit`** _(int, optional)_ The number of documents to list. Defaults to `50`.
- **`pagination_token`** _(str, optional)_ The pagination token to continue a previous request

## SearchAndRetrieveDocuments [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/drive\#searchandretrievedocuments)

See Example >

Searches for documents in the user’s Google Drive and returns a list of documents (with text content) matching the search criteria. Excludes documents that are in the trash.

**Parameters**

- **`document_format`** _(enum ( [DocumentFormat](https://docs.arcade.dev/toolkits/productivity/google/reference#documentformat)), optional)_ The format of the document to be returned. Defaults to Markdown.
- **`document_contains`** _(list\[str\], optional)_ Keywords or phrases that must be in the document title or body. Provide a list of keywords or phrases if needed.
- **`document_not_contains`** _(list\[str\], optional)_ Keywords or phrases that must not be in the document title or body. Provide a list of keywords or phrases if needed.
- **`search_only_in_shared_drive_id`** _(str, optional)_ The ID of the shared drive to restrict the search to. If provided, the search will only return documents from this drive. Defaults to None, which searches across all drives.
- **`include_shared_drives`** _(bool, optional)_ Whether to include documents from shared drives in the search results. Defaults to False (searches only in the user’s ‘My Drive’).
- **`include_organization_domain_documents`** _(bool, optional)_ Whether to include documents from the organization’s domain. This is applicable to admin users who have permissions to view organization-wide documents in a Google Workspace account. Defaults to False.
- **`order_by`** _(enum ( [OrderBy](https://docs.arcade.dev/toolkits/productivity/google/reference#orderby)), optional)_ Sort order. Defaults to listing the most recently modified documents first.
- **`limit`** _(int, optional)_ The number of documents to list. Defaults to `50`.
- **`pagination_token`** _(str, optional)_ The pagination token to continue a previous request

## GetFileTreeStructure [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/drive\#getfiletreestructure)

See Example >

Get the file/folder tree structure of the user’s Google Drive.

**Parameters**

- **`include_shared_drives`** _(bool, optional)_ Whether to include shared drives in the file tree structure. Defaults to False.
- **`restrict_to_shared_drive_id`** _(str, optional)_ If provided, only include files from this shared drive in the file tree structure. Defaults to None, which will include files and folders from all drives.
- **`include_organization_domain_documents`** _(bool, optional)_ Whether to include documents from the organization’s domain. This is applicable to admin users who have permissions to view organization-wide documents in a Google Workspace account. Defaults to False.
- **`order_by`** _(enum ( [OrderBy](https://docs.arcade.dev/toolkits/productivity/google/reference#orderby)), optional)_ Sort order. Defaults to listing the most recently modified documents first.
- **`limit`** _(int, optional)_ The number of files and folders to list. Defaults to None, which will list all files and folders.

## GenerateGoogleFilePickerUrl [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/drive\#generategooglefilepickerurl)

See Example >

Generate a Google File Picker URL for user-driven file selection and authorization.

This tool generates a URL that directs the end-user to a Google File Picker interface where
where they can select or upload Google Drive files. Users can grant permission to access their
Drive files, providing a secure and authorized way to interact with their files.

This is particularly useful when prior tools (e.g., those accessing or modifying
Google Docs, Google Sheets, etc.) encountered failures due to file non-existence
(Requested entity was not found) or permission errors. Once the user completes the file
picker flow, the prior tool can be retried.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/drive\#auth)

The Arcade Drive toolkit uses the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google) to connect to users’ Google accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Google auth provider](https://docs.arcade.dev/home/auth-providers/google#configuring-google-auth) with your own Google app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_google\\
```](https://docs.arcade.dev/home/install/overview)

[Docs](https://docs.arcade.dev/toolkits/productivity/google/docs "Docs") [Gmail](https://docs.arcade.dev/toolkits/productivity/google/gmail "Gmail")

## Spotify Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Spotify

# Spotify auth provider

At this time, Arcade does not offer a default Spotify Auth Provider. To use
Spotify auth, you must create a custom Auth Provider with your own Spotify
OAuth 2.0 credentials as described below.

The Spotify auth provider enables tools and agents to call the Spotify API on behalf of a user. Behind the scenes, the Arcade Engine and the Spotify auth provider seamlessly manage Spotify OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#whats-documented-here)

This page describes how to use and configure Spotify auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/spotify#using-spotify-auth-in-app-code) that needs to call Spotify APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/spotify#using-spotify-auth-in-custom-tools) that need to call Spotify APIs

## Configuring Spotify auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#configuring-spotify-auth)

How you configure the Spotify auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

When you are ready to go to production, you’ll want to configure the Spotify auth provider with your own Spotify app credentials, so users see your app name when they authorize access.

### Create a Spotify app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#create-a-spotify-app)

- Follow Spotify’s guide to [registering an app](https://developer.spotify.com/documentation/web-api/tutorials/getting-started)
- Choose the “Web API” product (at a minimum)
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the client ID and client secret to use below

Next, add the Spotify app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Spotify auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#configuring-spotify-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Spotify** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-spotify-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Spotify app.
5. Click **Save**.

When you use tools that require Spotify auth using your Arcade account credentials, the Arcade Engine will automatically use this Spotify OAuth provider.

### Configuring Spotify auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#configuring-spotify-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#set-environment-variables)

Set the following environment variables:

```nextra-code
export SPOTIFY_CLIENT_ID="<your client ID>"
export SPOTIFY_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
SPOTIFY_CLIENT_ID="<your client ID>"
SPOTIFY_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `spotify` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-spotify
      description: "The default Spotify provider"
      enabled: true
      type: oauth2
      provider_id: spotify
      client_id: ${env:SPOTIFY_CLIENT_ID}
      client_secret: ${env:SPOTIFY_CLIENT_SECRET}
```

## Using Spotify auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#using-spotify-auth-in-app-code)

Use the Spotify auth provider in your own agents and AI apps to get a user token for the Spotify API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Spotify API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="spotify",
    scopes=["user-read-playback-state"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "spotify", [\
  "user-read-playback-state",\
]);

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Spotify auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/spotify\#using-spotify-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Spotify API.

Use the `Spotify()` auth class to specify that a tool requires authorization with Spotify. The `context.authorization.token` field will be automatically populated with the user’s Spotify token:

```nextra-code
from typing import Annotated

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Spotify


@tool(
    requires_auth=Spotify(
        scopes=["user-read-playback-state"],
    )
)
async def get_playback_state(
    context: ToolContext,
) -> Annotated[dict, "Information about the user's current playback state"]:
    """Get information about the user's current playback state, including track or episode, progress, and active device."""
    endpoint = "/me/player"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"https://api.spotify.com/v1/{endpoint}",
            headers=headers,
        )
        response.raise_for_status()

        if response.status_code == 204:
            return {"status": "Playback not available or active"}
        return response.json()
```

[Slack](https://docs.arcade.dev/home/auth-providers/slack "Slack") [Twitch](https://docs.arcade.dev/home/auth-providers/twitch "Twitch")

## Microsoft Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Microsoft

# Microsoft auth provider

At this time, Arcade does not offer a default Microsoft Auth Provider. To use
Microsoft auth, you must create a custom Auth Provider with your own Microsoft
OAuth 2.0 credentials as described below.

The Microsoft auth provider enables tools and agents to call the Microsoft Graph API on behalf of a user. Behind the scenes, the Arcade Engine and the Microsoft auth provider seamlessly manage Microsoft OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#whats-documented-here)

This page describes how to use and configure Microsoft auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/microsoft#using-microsoft-auth-in-app-code) that needs to call Microsoft Graph APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/microsoft#using-microsoft-auth-in-custom-tools) that need to call Microsoft Graph APIs

## Configuring Microsoft auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#configuring-microsoft-auth)

How you configure the Microsoft auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

When you are ready to go to production, you’ll want to configure the Microsoft auth provider with your own Microsoft app credentials, so users see your app name when they authorize access.

### Create a Microsoft app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#create-a-microsoft-app)

- Follow Microsoft’s guide to [registering an app with the Microsoft identity platform](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
- Choose the permissions (scopes) you need for your app
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the client ID and client secret to use below

Next, add the Microsoft app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Microsoft auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#configuring-microsoft-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Microsoft** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-microsoft-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Microsoft app.
5. Click **Save**.

When you use tools that require Microsoft auth using your Arcade account credentials, the Arcade Engine will automatically use this Microsoft OAuth provider.

### Configuring Microsoft auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#configuring-microsoft-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#set-environment-variables)

Set the following environment variables:

```nextra-code
export MICROSOFT_CLIENT_ID="<your client ID>"
export MICROSOFT_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
MICROSOFT_CLIENT_ID="<your client ID>"
MICROSOFT_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `microsoft` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-microsoft
      description: "The default Microsoft provider"
      enabled: true
      type: oauth2
      provider_id: microsoft
      client_id: ${env:MICROSOFT_CLIENT_ID}
      client_secret: ${env:MICROSOFT_CLIENT_SECRET}
```

## Using Microsoft auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#using-microsoft-auth-in-app-code)

Use the Microsoft auth provider in your own agents and AI apps to get a user token for Microsoft Graph APIs. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for Microsoft Graph APIs:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="microsoft",
    scopes=["User.Read", "Files.Read"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# TODO: Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "microsoft", {
  scopes: ["User.Read", "Files.Read"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// TODO: Do something interesting with the token...
```

## Using Microsoft auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/microsoft\#using-microsoft-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with Microsoft Graph APIs.

Use the `Microsoft()` auth class to specify that a tool requires authorization with Microsoft. The `context.authorization.token` field will be automatically populated with the user’s Microsoft token:

```nextra-code
from typing import Annotated

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Microsoft


@tool(
    requires_auth=Microsoft(
        scopes=["User.Read", "Files.Read"],
    )
)
async def get_file_contents(
    context: ToolContext,
    file_id: Annotated[str, "The ID of the file to get the contents of"],
) -> Annotated[str, "The contents of the file"]:
    """Get the contents of a file from Microsoft Graph."""
    url = f"https://graph.microsoft.com/v1.0/me/drive/items/{file_id}"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(
            url=url,
            headers=headers,
        )
        response.raise_for_status()
        return response.json()
```

[Linkedin](https://docs.arcade.dev/home/auth-providers/linkedin "Linkedin") [Notion](https://docs.arcade.dev/home/auth-providers/notion "Notion")

## Arcade Toolkit Template
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Community Toolkit Template

# Arcade YOUR-TOOLKIT-NAME Toolkit

The Arcade YOUR-TOOLKIT-NAME Toolkit is a community contributed toolkit meaning that it is created and maintained by the community. To learn more about the toolkit, please visit the [Arcade YOUR-TOOLKIT-NAME GitHub repository](https://github.com/YOUR-GITHUB-USERNAME/YOUR-TOOLKIT-REPO-NAME).

[Contribute a toolkit](https://docs.arcade.dev/toolkits/contribute-a-toolkit "Contribute a toolkit")

## Arcade LinkedIn Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Social & Communication](https://docs.arcade.dev/toolkits/social-communication/twilio "Social & Communication") Linkedin

# LinkedIn

**Description:** Enable agents to interact with LinkedIn.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/linkedin)

**Auth:** User authorizationvia the [LinkedIn auth provider](https://docs.arcade.dev/home/auth-providers/linkedin)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_linkedin)](https://pypi.org/project/arcade_linkedin/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_linkedin)](https://pypi.org/project/arcade_linkedin/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_linkedin)](https://pypi.org/project/arcade_linkedin/)[![Downloads](https://img.shields.io/pypi/dm/arcade_linkedin)](https://pypi.org/project/arcade_linkedin/)

The Arcade LinkedIn toolkit provides a pre-built set of tools for interacting with LinkedIn. These tools make it easy to build agents and AI apps that can:

- Create a post

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/linkedin\#available-tools)

These tools are currently available in the Arcade LinkedIn toolkit.

| Tool Name | Description |
| --- | --- |
| CreateTextPost | Share a new text post to LinkedIn. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [LinkedIn auth\\
provider](https://docs.arcade.dev/home/auth-providers/linkedin#using-linkedin-auth-in-custom-tools).

## CreateTextPost [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/linkedin\#createtextpost)

See Example >

Share a new text post to LinkedIn.

**Parameters**

- **`text`** _(string, required)_ The text content of the post.

* * *

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/linkedin\#auth)

The Arcade LinkedIn toolkit uses the [LinkedIn auth provider](https://docs.arcade.dev/home/auth-providers/linkedin) to connect to users’ LinkedIn accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the LinkedIn auth provider](https://docs.arcade.dev/home/auth-providers/linkedin#configuring-linkedin-auth) with your own LinkedIn app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_linkedin\\
```](https://docs.arcade.dev/home/install/overview)

[Discord](https://docs.arcade.dev/toolkits/social-communication/discord "Discord") [Reddit](https://docs.arcade.dev/toolkits/social-communication/reddit "Reddit")

## Discord Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Discord

# Discord auth provider

At this time, Arcade does not offer a default Discord Auth Provider. To use
Discord auth, you must create a custom Auth Provider with your own Discord
OAuth 2.0 credentials as described below.

The Discord auth provider enables tools and agents to call the Discord API on behalf of a user. Behind the scenes, the Arcade Engine and the Discord auth provider seamlessly manage Discord OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#whats-documented-here)

This page describes how to use and configure Discord auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/discord#using-discord-auth-in-app-code) that needs to call Discord APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/discord#using-discord-auth-in-custom-tools) that need to call Discord APIs

## Configuring Discord auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#configuring-discord-auth)

### Create a Discord app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#create-a-discord-app)

- Create a Discord Application in the [Discord developer portal](https://discord.com/developers/applications)
- In the OAuth2 tab, set the redirect URI to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the Client ID and Client Secret (you may need to reset the secret to see it)

Next, add the Discord app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Discord auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#configuring-discord-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Discord** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-discord-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Discord app.
5. Click **Save**.

When you use tools that require Discord auth using your Arcade account credentials, the Arcade Engine will automatically use this Discord OAuth provider.

### Configuring Discord auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#configuring-discord-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#set-environment-variables)

Set the following environment variables:

```nextra-code
export DISCORD_CLIENT_ID="<your client ID>"
export DISCORD_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
DISCORD_CLIENT_SECRET="<your client secret>"
DISCORD_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `discord` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-discord
      description: "The default Discord provider"
      enabled: true
      type: oauth2
      provider_id: discord
      client_id: ${env:DISCORD_CLIENT_ID}
      client_secret: ${env:DISCORD_CLIENT_SECRET}
```

## Using Discord auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#using-discord-auth-in-app-code)

Use the Discord auth provider in your own agents and AI apps to get a user token for the Discord API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Discord API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="discord",
    scopes=["identify", "email", "guilds", "guilds.join"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "discord", {
  scopes: ["identify", "email", "guilds", "guilds.join"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Discord auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/discord\#using-discord-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Discord API.

Use the `Discord()` auth class to specify that a tool requires authorization with Discord. The `context.authorization.token` field will be automatically populated with the user’s Discord token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Discord


@tool(
    requires_auth=Discord(
        scopes=["guilds"],
    )
)
async def list_servers(
    context: ToolContext,
    user_id: Annotated[\
        Optional[str],\
        "The user's user ID. Defaults to '@me' for the current user.",\
    ] = "@me",
) -> Annotated[dict, "List of servers the user is a member of"]:
    """List a Discord user's servers they are a member of."""
    url = f"https://discord.com/api/users/{user_id}/guilds"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[Atlassian](https://docs.arcade.dev/home/auth-providers/atlassian "Atlassian") [Dropbox](https://docs.arcade.dev/home/auth-providers/dropbox "Dropbox")

## Groq Model Setup
[Home](https://docs.arcade.dev/home "Home") [Model Providers](https://docs.arcade.dev/home/supported-models "Model Providers") Groq

# Groq

## Connecting [Permalink for this section](https://docs.arcade.dev/home/supported-models/groq\#connecting)

You can send requests to Groq for OpenAI Client compatible models.

Groq is currently not supported on Arcade Cloud, but can be used with a custom engine configuration

```nextra-code
import os
from openai import OpenAI

client = OpenAI(
    base_url="http://localhost:9099/v1",
    api_key=os.environ.get("ARCADE_API_KEY"))


response = client.chat.completions.create(
    model = "llama3",
    user = "user@arcade.dev",
    messages = [\
        {"role": "user", "content": "Summarize my last 10 emails"}\
    ]
)
```

## Configuration [Permalink for this section](https://docs.arcade.dev/home/supported-models/groq\#configuration)

This is a simple example on enabling Groq in the Arcade Engine

```nextra-code
llm:
  models:
    - id: groq
      openai:
        base_url: "https://api.groq.com/openai/v1"
        api_key: ${env:GROQ_API_KEY}
```

For more advanced configuration, see the [model docs](https://docs.arcade.dev/home/configure/models#openai)

[Anthropic](https://docs.arcade.dev/home/supported-models/anthropic "Anthropic") [Ollama](https://docs.arcade.dev/home/supported-models/ollama "Ollama")

## LinkedIn Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Linkedin

# LinkedIn auth provider

The LinkedIn auth provider enables tools and agents to call the LinkedIn API on behalf of a user. Behind the scenes, the Arcade Engine and the LinkedIn auth provider seamlessly manage LinkedIn OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#whats-documented-here)

This page describes how to use and configure LinkedIn auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/linkedin#using-linkedin-auth-in-app-code) that needs to call LinkedIn APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/linkedin#using-linkedin-auth-in-custom-tools) that need to call LinkedIn APIs

## Configuring LinkedIn auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#configuring-linkedin-auth)

How you configure the LinkedIn auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

With the Arcade Cloud Engine, you can start building and testing LinkedIn auth without any configuration. Your users will see `Arcade (demo)` as the name of the application that’s requesting permission.

When you are ready to go to production, you’ll want to configure the LinkedIn auth provider with your own LinkedIn app credentials, so users see your app name when they authorize access.

### Create a LinkedIn app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#create-a-linkedin-app)

- Follow LinkedIn’s guide to [setting up user authorization](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication)
- On the Products tab, add the products you need for your app (e.g. “Share on LinkedIn”)
  - At a minimum, you _must_ add the “Sign In with LinkedIn using OpenID Connect” product
- On the Auth tab, set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the client ID and client secret to use below

Next, add the LinkedIn app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring LinkedIn auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#configuring-linkedin-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **LinkedIn** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-linkedin-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your LinkedIn app.
5. Click **Save**.

When you use tools that require LinkedIn auth using your Arcade account credentials, the Arcade Engine will automatically use this LinkedIn OAuth provider.

### Configuring LinkedIn auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#configuring-linkedin-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#set-environment-variables)

Set the following environment variables:

```nextra-code
export LINKEDIN_CLIENT_ID="<your client ID>"
export LINKEDIN_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
LINKEDIN_CLIENT_ID="<your client ID>"
LINKEDIN_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `linkedin` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-linkedin
      description: "The default LinkedIn provider"
      enabled: true
      type: oauth2
      provider_id: linkedin
      client_id: ${env:LINKEDIN_CLIENT_ID}
      client_secret: ${env:LINKEDIN_CLIENT_SECRET}
```

## Using LinkedIn auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#using-linkedin-auth-in-app-code)

Use the LinkedIn auth provider in your own agents and AI apps to get a user token for LinkedIn APIs. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for LinkedIn APIs:

PythonJavaScript

```nextra-code
import requests

from arcadepy import Arcade


client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

"""
In this example, we will use Arcade to authenticate with LinkedIn and post a
message to the user's LinkedIn feed.

There is a tool for that in the Arcade SDK, which simplifies the process for
you to post messages to the user's LinkedIn feed either through our Python or
JavaScript SDKs or via LLM tool calling.

Below we are just showing how to use Arcade as an auth provider, if you ever
need to.
"""

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="linkedin",
    scopes=["w_member_social"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

if not auth_response.context.token:
    raise ValueError("No token found in auth response")

token = auth_response.context.token

user_id = (
    None
    if not auth_response.context.authorization
    else auth_response.context.authorization.user_info.get("sub")
)

if not user_id:
    raise ValueError("User ID not found.")

# Prepare the payload data for the LinkedIn API
message = "Hello, from Arcade.dev!"
payload = {
    "author": f"urn:li:person:{user_id}",
    "lifecycleState": "PUBLISHED",
    "specificContent": {
        "com.linkedin.ugc.ShareContent": {
            "shareCommentary": {"text": message},
            "shareMediaCategory": "NONE",
        }
    },
    "visibility": {"com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"},
}

response = requests.post(
    "https://api.linkedin.com/v2/ugcPosts",
    headers={"Authorization": f"Bearer {token}"},
    json=payload,
)
response.raise_for_status()
print(response.json())
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

/*
In this example, we will use Arcade to authenticate with LinkedIn and post a
message to the user's LinkedIn feed.

There is a tool for that in the Arcade SDK, which simplifies the process for
you to post messages to the user's LinkedIn feed either through our Python or
JavaScript SDKs or via LLM tool calling.

Below we are just showing how to use Arcade as an auth provider, if you ever
need to.
*/

// Start the authorization process
let authResponse = await client.auth.start(userId, "linkedin", {
  scopes: ["w_member_social"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

if (!authResponse.context.token) {
  throw new Error("No token found in auth response");
}

const token = authResponse.context.token;

const linkedInUserId = authResponse.context.authorization?.user_info?.sub;

if (!linkedInUserId) {
  throw new Error("User ID not found.");
}

// Prepare the payload data for the LinkedIn API
const message = "Hello, from Arcade.dev!";
const payload = {
  author: `urn:li:person:${linkedInUserId}`,
  lifecycleState: "PUBLISHED",
  specificContent: {
    "com.linkedin.ugc.ShareContent": {
      shareCommentary: { text: message },
      shareMediaCategory: "NONE",
    },
  },
  visibility: { "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC" },
};

const response = await fetch("https://api.linkedin.com/v2/ugcPosts", {
  method: "POST",
  headers: {
    Authorization: `Bearer ${token}`,
    "Content-Type": "application/json",
  },
  body: JSON.stringify(payload),
});

if (!response.ok) {
  throw new Error(`HTTP error! status: ${response.status}`);
}

const data = await response.json();
console.log(data);
```

## Using LinkedIn auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/linkedin\#using-linkedin-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with LinkedIn APIs.

Use the `LinkedIn()` auth class to specify that a tool requires authorization with LinkedIn. The `context.authorization.token` field will be automatically populated with the user’s LinkedIn token:

```nextra-code
from typing import Annotated

import httpx

from arcade.sdk.errors import ToolExecutionError
from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import LinkedIn


@tool(
    requires_auth=LinkedIn(
        scopes=["w_member_social"],
    )
)
async def create_text_post(
    context: ToolContext,
    text: Annotated[str, "The text content of the post"],
) -> Annotated[str, "URL of the shared post"]:
    """Share a new text post to LinkedIn."""
    endpoint = "/ugcPosts"

    # The LinkedIn user ID is required to create a post, even though we're using the user's access token.
    # Arcade Engine gets the current user's info from LinkedIn and automatically populates context.authorization.user_info.
    # LinkedIn calls the user ID "sub" in their user_info data payload. See:
    # https://learn.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/sign-in-with-linkedin-v2#api-request-to-retreive-member-details
    user_id = context.authorization.user_info.get("sub")
    if not user_id:
        raise ToolExecutionError(
            "User ID not found.",
            developer_message="User ID not found in `context.authorization.user_info.sub`",
        )

    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    author_id = f"urn:li:person:{user_id}"
    payload = {
        "author": author_id,
        "lifecycleState": "PUBLISHED",
        "specificContent": {
            "com.linkedin.ugc.ShareContent": {
                "shareCommentary": {"text": text},
                "shareMediaCategory": "NONE",
            }
        },
        "visibility": {"com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"},
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(
            url=f"https://api.linkedin.com/v2/{endpoint}",
            headers=headers,
            json=payload,
        )
        response.raise_for_status()
        share_id = response.json().get("id")
        return f"https://www.linkedin.com/feed/update/{share_id}/"
```

[Hubspot](https://docs.arcade.dev/home/auth-providers/hubspot "Hubspot") [Microsoft](https://docs.arcade.dev/home/auth-providers/microsoft "Microsoft")

## Reddit OAuth Configuration
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Reddit

# Reddit auth provider

At this time, Arcade does not offer a default Reddit Auth Provider. To use
Reddit auth, you must create a custom Auth Provider with your own Reddit
OAuth 2.0 credentials as described below.

The Reddit auth provider enables tools and agents to call the Reddit API on behalf of a user. Behind the scenes, the Arcade Engine and the Reddit auth provider seamlessly manage Reddit OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#whats-documented-here)

This page describes how to use and configure Reddit auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/home/auth-providers/reddit#using-reddit-auth-in-app-code) that needs to call Reddit APIs
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/reddit#using-reddit-auth-in-custom-tools) that need to call Reddit APIs

## Configuring Reddit auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#configuring-reddit-auth)

### Create a Reddit app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#create-a-reddit-app)

- Create a Reddit Application in the [Reddit App Console](https://www.reddit.com/prefs/apps)
- Set the OAuth Redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the App key (Client ID) and App secret (Client Secret), which you’ll need below

Next, add the Reddit app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Reddit auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#configuring-reddit-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Reddit** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-reddit-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Reddit app.
5. Click **Save**.

When you use tools that require Reddit auth using your Arcade account credentials, the Arcade Engine will automatically use this Reddit OAuth provider.

### Configuring Reddit auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#configuring-reddit-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#set-environment-variables)

The Client ID is the Reddit “App key” and the Client Secret is the Reddit
“App secret”.

Set the following environment variables:

```nextra-code
export REDDIT_CLIENT_ID="<your client ID>"
export REDDIT_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
REDDIT_CLIENT_SECRET="<your client secret>"
REDDIT_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `reddit` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-reddit
      description: "The default Reddit provider"
      enabled: true
      type: oauth2
      provider_id: reddit
      client_id: ${env:REDDIT_CLIENT_ID}
      client_secret: ${env:REDDIT_CLIENT_SECRET}
```

## Using Reddit auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#using-reddit-auth-in-app-code)

Use the Reddit auth provider in your own agents and AI apps to get a user-scoped token for the Reddit API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Reddit API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="reddit",
    scopes=["identity"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# TODO: Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "reddit", {
  scopes: ["identity"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Reddit auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/reddit\#using-reddit-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Reddit API.

Use the `Reddit()` auth class to specify that a tool requires authorization with Reddit. The `context.authorization.token` field will be automatically populated with the user’s Reddit token:

```nextra-code
from typing import Annotated

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Reddit


@tool(
    requires_auth=Reddit(
        scopes=["identity"],
    )
)
async def get_user_info(
    context: ToolContext,
) -> Annotated[dict, "The user info"]:
    """Get the user info for the current user."""
    url = "https://oauth.reddit.com/api/v1/me"
    headers = {
        "Authorization": f"Bearer {context.authorization.token}",
        "User-Agent": "YourAppName v1.0 by u/YourRedditUsername",
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[OAuth 2.0](https://docs.arcade.dev/home/auth-providers/oauth2 "OAuth 2.0") [Slack](https://docs.arcade.dev/home/auth-providers/slack "Slack")

## Google Calendar Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Productivity & DocsGoogleCalendar

# Calendar

**Description:** Enable agents to interact with Google Calendar events.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/google)

**Auth:** User authorizationvia the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_google)](https://pypi.org/project/arcade_google/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_google)](https://pypi.org/project/arcade_google/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_google)](https://pypi.org/project/arcade_google/)[![Downloads](https://img.shields.io/pypi/dm/arcade_google)](https://pypi.org/project/arcade_google/)

The Arcade Calendar toolkit provides a pre-built set of tools for interacting with Google Calendar. These tools make it easy to build agents and AI apps that can:

- Create, update, list, and delete events

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#available-tools)

These tools are currently available in the Arcade Calendar toolkit.

| Tool Name | Description |
| --- | --- |
| ListCalendars | List the calendars that the user can see. |
| CreateEvent | Create a new event in Google Calendar. |
| ListEvents | List events from Google Calendar. |
| UpdateEvent | Update an existing event in Google Calendar. |
| DeleteEvent | Delete an event from Google Calendar. |
| FindTimeSlotsWhenEveryoneIsFree | Provides time slots when everyone is free within a given date range and time boundaries. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Google auth\\
provider](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-custom-tools).

## ListCalendars [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#listcalendars)

See Example >

List the calendars that the user can access.

**Parameters**

- **`max_results`** _(int, optional)_ The maximum number of calendars to return. Up to 250 calendars, defaults to 10.
- **`show_deleted`** _(boolean, optional)_ Whether to show deleted calendars. Defaults to False.
- **`show_hidden`** _(boolean, optional)_ Whether to show hidden calendars. Defaults to False.
- **`next_page_token`** _(string, optional)_ The token to retrieve the next page of calendars. Optional.

* * *

## CreateEvent [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#createevent)

See Example >

Create a new event in the specified calendar.

**Parameters**

- **`summary`** _(string, required)_ The title of the event
- **`start_datetime`** _(string, required)_ The datetime when the event starts in ISO 8601 format, e.g., ‘2024-12-31T15:30:00’.
- **`end_datetime`** _(string, required)_ The datetime when the event ends in ISO 8601 format, e.g., ‘2024-12-31T17:30:00’.
- **`calendar_id`** _(string, optional, Defaults to `'primary'`)_ The ID of the calendar to create the event in, usually ‘primary’.
- **`description`** _(string, optional)_ The description of the event
- **`location`** _(string, optional)_ The location of the event
- **`visibility`** _(string, optional)_ The visibility of the event
- **`attendee_emails`** _(array, optional)_ The list of attendee emails. Must be valid email addresses e.g., `username@domain.com`.

* * *

## ListEvents [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#listevents)

See Example >

List events from the specified calendar within the given datetime range.

min\_end\_datetime serves as the lower bound (exclusive) for an event’s end time. max\_start\_datetime serves as the upper bound (exclusive) for an event’s start time.

For example: If min\_end\_datetime is set to 2024-09-15T09:00:00 and max\_start\_datetime is set to 2024-09-16T17:00:00, the function will return events that:

1. End after 09:00 on September 15, 2024 (exclusive)
2. Start before 17:00 on September 16, 2024 (exclusive) This means an event starting at 08:00 on September 15 and ending at 10:00 on September 15 would be included, but an event starting at 17:00 on September 16 would not be included.

**Parameters**

- **`min_end_datetime`** _(string, required)_ Filter by events that end on or after this datetime in ISO 8601 format, e.g., ‘2024-09-15T09:00:00’.
- **`max_start_datetime`** _(string, required)_ Filter by events that start before this datetime in ISO 8601 format, e.g., ‘2024-09-16T17:00:00’.
- **`calendar_id`** _(string, optional)_ The ID of the calendar to list events from
- **`max_results`** _(integer, optional)_ The maximum number of events to return

* * *

## UpdateEvent [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#updateevent)

See Example >

Update an existing event in the specified calendar with the provided details. Only the provided fields will be updated; others will remain unchanged.

`updated_start_datetime` and `updated_end_datetime` are independent and can be provided separately.

**Parameters**

- **`event_id`** _(string, required)_ The ID of the event to update
- **`updated_start_datetime`** _(string, optional)_ The updated datetime that the event starts in ISO 8601 format, e.g., ‘2024-12-31T15:30:00’.
- **`updated_end_datetime`** _(string, optional)_ The updated datetime that the event ends in ISO 8601 format, e.g., ‘2024-12-31T17:30:00’.
- **`updated_calendar_id`** _(string, optional)_ The updated ID of the calendar containing the event.
- **`updated_summary`** _(string, optional)_ The updated title of the event
- **`updated_description`** _(string, optional)_ The updated description of the event
- **`updated_location`** _(string, optional)_ The updated location of the event
- **`updated_visibility`** _(enum ( [EventVisibility](https://docs.arcade.dev/toolkits/productivity/google/reference#eventvisibility)), optional)_ The visibility of the event
- **`attendee_emails_to_add`** _(array, optional)_ The list of attendee emails to add. Must be valid email addresses e.g., `username@domain.com`.
- **`attendee_emails_to_remove`** _(array, optional)_ The list of attendee emails to remove. Must be valid email addresses e.g., `username@domain.com`.
- **`send_updates`** _(enum ( [SendUpdatesOptions](https://docs.arcade.dev/toolkits/productivity/google/reference#sendupdatesoptions)), optional, Defaults to `'all'`)_ Should attendees be notified of the update? (none, all, external\_only)

* * *

## DeleteEvent [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#deleteevent)

See Example >

Delete an event from Google Calendar.

**Parameters**

- **`event_id`** _(string, required)_ The ID of the event to delete
- **`calendar_id`** _(string, optional, Defaults to `'primary'`)_ The ID of the calendar containing the event
- **`send_updates`** _(enum ( [SendUpdatesOptions](https://docs.arcade.dev/toolkits/productivity/google/reference#sendupdatesoptions)), optional, Defaults to `'all'`)_ Specifies which attendees to notify about the deletion

## FindTimeSlotsWhenEveryoneIsFree [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#findtimeslotswheneveryoneisfree)

See Example >

Provides time slots when everyone is free within a given date range and time boundaries.

**Parameters**

When using [model calling](https://docs.arcade.dev/home/use-tools/call-tools-with-models) with the `Google.FindTimeSlotsWhenEveryoneIsFree` tool, always ground the LLM with the current date and day of the week by appending it to the prompt. See examples above for “Execute the Tool with OpenAI”. Consider your user’s timezone when appropriate.

- **`email_addresses`** _(list of strings, defaults to `None`)_ The list of email addresses from people in the same organization domain (apart from the currently logged in user) to search for free time slots. Defaults to None, which will return free time slots for the current user only.
- **`start_date`** _(string, optional, Defaults to `None`)_ The start date to search for time slots in the format ‘YYYY-MM-DD’. Defaults to today’s date. It will search starting from this date at the time 00:00:00.
- **`end_date`** _(string, optional, Defaults to `None`)_ The end date to search for time slots in the format ‘YYYY-MM-DD’. Defaults to seven days from the start date. It will search until this date at the time 23:59:59.
- **`start_time_boundary`** _(string, defaults to “08:00”)_ Will return free slots in any given day starting from this time in the format ‘HH:MM’. Defaults to ‘08:00’, which is a usual business hour start time.
- **`end_time_boundary`** _(string, defaults to “18:00”)_ Will return free slots in any given day ending at this time in the format ‘HH:MM’. Defaults to ‘18:00’, which is a usual business hour end time.

* * *

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/calendar\#auth)

The Arcade Calendar toolkit uses the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google) to connect to users’ Google accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Google auth provider](https://docs.arcade.dev/home/auth-providers/google#configuring-google-auth) with your own Google app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_google\\
```](https://docs.arcade.dev/home/install/overview)

[Overview](https://docs.arcade.dev/toolkits "Overview") [Contacts](https://docs.arcade.dev/toolkits/productivity/google/contacts "Contacts")

## Web Toolkit Reference
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Developer Tools](https://docs.arcade.dev/toolkits/development/github "Developer Tools") WebReference

# Reference for Web Toolkit

## Formats [Permalink for this section](https://docs.arcade.dev/toolkits/development/web/reference\#formats)

The format of the scraped web page.

- **`MARKDOWN`**: Returns the scraped web page in Markdown format.
- **`HTML`**: Returns the scraped web page in HTML format.
- **`RAW_HTML`**: Returns the raw HTML of the scraped web page.
- **`LINKS`**: Returns only the links from the scraped web page.
- **`SCREENSHOT`**: Takes a screenshot of the scraped web page.
- **`SCREENSHOT_AT_FULL_PAGE`**: Takes a full-page screenshot of the scraped web page.

[Reference](https://docs.arcade.dev/toolkits/development/github/reference "Reference") [Web](https://docs.arcade.dev/toolkits/development/web/web "Web")

## Slack Toolkit Integration
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Social & Communication](https://docs.arcade.dev/toolkits/social-communication/twilio "Social & Communication") Slack

# Slack

**Description:** Enable agents to interact with Slack by sending messages, retrieving user and conversation information.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/slack)

**Auth:** User authorizationvia the [Slack auth provider](https://docs.arcade.dev/home/auth-providers/slack)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_slack)](https://pypi.org/project/arcade_slack/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_slack)](https://pypi.org/project/arcade_slack/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_slack)](https://pypi.org/project/arcade_slack/)[![Downloads](https://img.shields.io/pypi/dm/arcade_slack)](https://pypi.org/project/arcade_slack/)

The Arcade Slack toolkit provides a comprehensive set of tools for interacting with Slack. With these tools, you can build agents and AI applications that can:

- Send direct messages to users
- Send messages to channels
- Retrieve members of conversations
- Access conversation messages
- Manage conversation metadata
- Retrieve user information
- List users
- List conversations
- Retrieve messages in a channel, direct or multi-person conversation
- Retrieve conversation metadata

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#available-tools)

These tools are currently available in the Arcade Slack toolkit.

| Tool Name | Description |
| --- | --- |
| SendDmToUser | Send a direct message to a user in Slack. |
| SendMessageToChannel | Send a message to a channel in Slack. |
| GetMembersInConversationById | Retrieve members of a conversation using its ID. |
| GetMembersInChannelByName | Retrieve members of a channel using its name. |
| GetMessagesInConversationById | Fetch the messages in a conversation using its ID. |
| GetMessagesInChannelByName | Fetch the messages in a channel using its name. |
| GetMessagesInDirectMessageConversationByUsername | Fetch the messages in a direct message conversation using the username of the other participant. |
| GetMessagesInMultiPersonDmConversationByUsername | Fetch the messages in a multi-person direct message conversation using the usernames of the other participants. |
| GetConversationMetadataById | Retrieve metadata of a conversation using its ID. |
| GetChannelMetadataByName | Retrieve metadata of a channel using its name. |
| GetDirectMessageConversationMetadataByUsername | Retrieve metadata of a direct message conversation using the username of the other participant. |
| GetMultiPersonDmConversationMetadataByUsername | Retrieve metadata of a multi-person direct message conversation using the usernames of the other participants. |
| ListConversationsMetadata | List metadata for Slack conversations. |
| ListPublicChannelsMetadata | List metadata for public channels in Slack. |
| ListPrivateChannelsMetadata | List metadata for private channels in Slack. |
| ListGroupDirectMessageConversationsMetadata | List metadata for group direct message conversations in Slack. |
| ListDirectMessageConversationsMetadata | List metadata for direct message conversations in Slack. |
| GetUserInfoById | Retrieve information of a user by their ID. |
| ListUsers | List all users in the authenticated Slack team. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your own\\
tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Slack auth\\
provider](https://docs.arcade.dev/home/auth-providers/slack#using-slack-auth-in-custom-tools).

## SendDmToUser [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#senddmtouser)

See Example >

Send a direct message to a user in Slack.

**Parameters**

- **`user_name`** _(string, required)_ The Slack username of the person you want to message. Slack usernames are ALWAYS lowercase.
- **`message`** _(string, required)_ The message you want to send.

* * *

## SendMessageToChannel [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#sendmessagetochannel)

See Example >

Send a message to a channel in Slack.

**Parameters**

- **`channel_name`** _(string, required)_ The Slack channel name where you want to send the message. Slack channel names are ALWAYS lowercase.
- **`message`** _(string, required)_ The message you want to send.

* * *

## GetMembersInConversationById [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmembersinconversationbyid)

See Example >

Get the members of a conversation in Slack by the conversation’s ID.

**Parameters**

- **`conversation_id`** _(string, required)_ The ID of the conversation to get members for.
- **`limit`** _(int, optional)_ The maximum number of members to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## GetMembersInChannelByName [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmembersinchannelbyname)

See Example >

Get the members of a channel in Slack by the channel’s name.

**Parameters**

- **`channel_name`** _(string, required)_ The name of the channel to get members for.
- **`limit`** _(int, optional)_ The maximum number of members to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## GetMessagesInConversationById [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmessagesinconversationbyid)

See Example >

Get the history of a conversation in Slack.

**Parameters**

- **`conversation_id`** _(string, required)_ The ID of the conversation to get history for.
- **`oldest_relative`** _(string, optional)_ The oldest message to include, in ‘DD:HH:MM’ format.
- **`latest_relative`** _(string, optional)_ The latest message to include, in ‘DD:HH:MM’ format.
- **`oldest_datetime`** _(string, optional)_ The oldest message to include, in ‘YYYY-MM-DD HH:MM:SS’ format.
- **`latest_datetime`** _(string, optional)_ The latest message to include, in ‘YYYY-MM-DD HH:MM:SS’ format.
- **`limit`** _(int, optional)_ The maximum number of messages to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination, if continuing from a previous search.

* * *

## GetMessagesInChannelByName [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmessagesinchannelbyname)

See Example >

Get the messages in a channel in Slack.

**Parameters**

- **`channel_name`** _(string, required)_ The name of the channel to get messages for.
- **`oldest_relative`** _(string, optional)_ The oldest message to include in the results, specified as a time offset from the current time in the format ‘DD:HH:MM’.
- **`latest_relative`** _(string, optional)_ The latest message to include in the results, specified as a time offset from the current time in the format ‘DD:HH:MM’.
- **`oldest_datetime`** _(string, optional)_ The oldest message to include in the results, specified as a datetime string in the format ‘YYYY-MM-DD HH:MM:SS’.
- **`latest_datetime`** _(string, optional)_ The latest message to include in the results, specified as a datetime string in the format ‘YYYY-MM-DD HH:MM:SS’.
- **`limit`** _(int, optional)_ The maximum number of messages to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## GetMessagesInDirectMessageConversationByUsername [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmessagesindirectmessageconversationbyusername)

See Example >

Get the messages in a Direct Message conversation with another user in Slack.

**Parameters**

- **`username`** _(string, required)_ The username of the user to get messages with.
- **`oldest_relative`** _(string, optional)_ The oldest message to include in the results, specified as a time offset from the current time in the format ‘DD:HH:MM’.
- **`latest_relative`** _(string, optional)_ The latest message to include in the results, specified as a time offset from the current time in the format ‘DD:HH:MM’.
- **`oldest_datetime`** _(string, optional)_ The oldest message to include in the results, specified as a datetime string in the format ‘YYYY-MM-DD HH:MM:SS’.
- **`latest_datetime`** _(string, optional)_ The latest message to include in the results, specified as a datetime string in the format ‘YYYY-MM-DD HH:MM:SS’.
- **`limit`** _(int, optional)_ The maximum number of messages to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## GetMessagesInMultiPersonDmConversationByUsername [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmessagesinmultipersondmconversationbyusername)

See Example >

Get the messages in a multi-person direct message conversation in Slack by the usernames of the participants (other than the currently authenticated user).

**Parameters**

- **`usernames`** _(list of strings, required)_ The usernames of the users to get messages with.
- **`oldest_relative`** _(string, optional)_ The oldest message to include in the results, specified as a time offset from the current time in the format ‘DD:HH:MM’.
- **`latest_relative`** _(string, optional)_ The latest message to include in the results, specified as a time offset from the current time in the format ‘DD:HH:MM’.
- **`oldest_datetime`** _(string, optional)_ The oldest message to include in the results, specified as a datetime string in the format ‘YYYY-MM-DD HH:MM:SS’.
- **`latest_datetime`** _(string, optional)_ The latest message to include in the results, specified as a datetime string in the format ‘YYYY-MM-DD HH:MM:SS’.
- **`limit`** _(int, optional)_ The maximum number of messages to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## GetConversationMetadataById [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getconversationmetadatabyid)

See Example >

Get the metadata of a conversation in Slack searching by its ID.

**Parameters**

- **`conversation_id`** _(string, required)_ The ID of the conversation to get metadata for.

* * *

## GetChannelMetadataByName [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getchannelmetadatabyname)

See Example >

Get the metadata of a channel in Slack searching by its name.

**Parameters**

- **`channel_name`** _(string, required)_ The name of the channel to get metadata for.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination, if continuing from a previous search.

* * *

## GetDirectMessageConversationMetadataByUsername [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getdirectmessageconversationmetadatabyusername)

See Example >

Get the metadata of a direct message conversation in Slack searching by the username of the other participant.

**Parameters**

- **`username`** _(string, required)_ The username of the user/person to get messages with.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination, if continuing from a previous search.

* * *

## GetMultiPersonDmConversationMetadataByUsername [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getmultipersondmconversationmetadatabyusername)

See Example >

Get the metadata of a multi-person direct message conversation in Slack searching by the usernames of the participants (other than the currently authenticated user).

**Parameters**

- **`usernames`** _(list of strings, required)_ The usernames of the users to get messages with.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination, if continuing from a previous search.

* * *

## ListConversationsMetadata [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#listconversationsmetadata)

See Example >

List metadata for Slack conversations (channels and/or direct messages) that the user is a member of.

**Parameters**

- **`conversation_types`** _(list of str, optional)_ The type(s) of conversations to list. Defaults to all types. Each must be one of: ‘public\_channel’, ‘private\_channel’, ‘multi\_person\_direct\_message’, or ‘direct\_message’.
- **`limit`** _(int, optional)_ The maximum number of conversations to list. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## ListPublicChannelsMetadata [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#listpublicchannelsmetadata)

See Example >

List metadata for public channels in Slack that the user is a member of.

**Parameters**

- **`limit`** _(int, optional)_ The maximum number of channels to list. Defaults to 200.

* * *

## ListPrivateChannelsMetadata [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#listprivatechannelsmetadata)

See Example >

List metadata for private channels in Slack that the user is a member of.

**Parameters**

- **`limit`** _(int, optional)_ The maximum number of channels to list. Defaults to 200.

* * *

## ListGroupDirectMessageConversationsMetadata [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#listgroupdirectmessageconversationsmetadata)

See Example >

List metadata for group direct message conversations in Slack that the user is a member of.

**Parameters**

- **`limit`** _(int, optional)_ The maximum number of conversations to list. Defaults to 200.

* * *

## ListDirectMessageConversationsMetadata [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#listdirectmessageconversationsmetadata)

See Example >

List metadata for direct message conversations in Slack that the user is a member of.

**Parameters**

- **`limit`** _(int, optional)_ The maximum number of channels to list. Defaults to 200.

* * *

## GetUserInfoById [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#getuserinfobyid)

See Example >

Get the information of a user in Slack.

**Parameters**

- **`user_id`** _(string, required)_ The ID of the user to get.

* * *

## ListUsers [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#listusers)

See Example >

List all users in the authenticated user’s Slack team.

**Parameters**

- **`exclude_bots`** _(bool, optional)_ Whether to exclude bots from the results. Defaults to `True`.
- **`limit`** _(int, optional)_ The maximum number of users to return. Defaults to 200.
- **`next_cursor`** _(string, optional)_ The cursor to use for pagination.

* * *

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/slack\#auth)

The Arcade Slack toolkit uses the [Slack auth provider](https://docs.arcade.dev/home/auth-providers/slack) to connect to users’ Slack accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Slack auth provider](https://docs.arcade.dev/home/auth-providers/slack#configuring-slack-auth) with your own Slack app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_slack\\
```](https://docs.arcade.dev/home/install/overview)

[Reddit](https://docs.arcade.dev/toolkits/social-communication/reddit "Reddit") [X](https://docs.arcade.dev/toolkits/social-communication/x "X")

## Google Contacts Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Productivity & Docs [Google](https://docs.arcade.dev/toolkits/productivity/google/calendar "Google") Contacts

# Calendar

**Description:** Enable agents to interact with Google Contacts.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/google)

**Auth:** User authorizationvia the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google)

[![PyPI Version](https://img.shields.io/pypi/v/arcade_google)](https://pypi.org/project/arcade_google/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_google)](https://pypi.org/project/arcade_google/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_google)](https://pypi.org/project/arcade_google/)[![Downloads](https://img.shields.io/pypi/dm/arcade_google)](https://pypi.org/project/arcade_google/)

The Arcade Contacts toolkit provides a pre-built set of tools for interacting with Google Contacts. These tools make it easy to build agents and AI apps that can:

- Create new contacts
- Search for contacts by name or email

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/contacts\#available-tools)

These tools are currently available in the Arcade Contacts toolkit.

| Tool Name | Description |
| --- | --- |
| SearchContactsByEmail | Search the user's contacts in Google Contacts by email address. |
| SearchContactsByName | Search the user's contacts in Google Contacts by name. |
| CreateContact | Create a new contact record in Google Contacts. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) with the [Google auth\\
provider](https://docs.arcade.dev/home/auth-providers/google#using-google-auth-in-custom-tools).

## SearchContactsByEmail [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/contacts\#searchcontactsbyemail)

Search the user’s contacts in Google Contacts by email address.

See Example >

**Parameters**

- **`email`** _(string, required)_: The email address to search for.
- **`limit`** _(integer, optional)_: The maximum number of contacts to return (30 is the max allowed by the Google API).

* * *

## SearchContactsByName [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/contacts\#searchcontactsbyname)

Search the user’s contacts in Google Contacts by name.

See Example >

**Parameters**

- **`name`** _(string, required)_: The full name to search for.
- **`limit`** _(integer, optional)_: The maximum number of contacts to return (30 is the max allowed by the Google API).

* * *

## CreateContact [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/contacts\#createcontact)

Create a new contact record in Google Contacts.

See Example >

**Parameters**

- **`given_name`** _(string, required)_: The given name of the contact.
- **`family_name`** _(string, optional)_: The optional family name of the contact.
- **`email`** _(string, optional)_: The optional email address of the contact.

* * *

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/contacts\#auth)

The Arcade Contacts toolkit uses the [Google auth provider](https://docs.arcade.dev/home/auth-providers/google) to connect to users’ Google accounts.

With the hosted Arcade Engine, there’s nothing to configure. Your users will see `Arcade` as the name of the application that’s requesting permission.

With a self-hosted installation of Arcade, you need to [configure the Google auth provider](https://docs.arcade.dev/home/auth-providers/google#configuring-google-auth) with your own Google app credentials.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade_google\\
```](https://docs.arcade.dev/home/install/overview)

[Calendar](https://docs.arcade.dev/toolkits/productivity/google/calendar "Calendar") [Docs](https://docs.arcade.dev/toolkits/productivity/google/docs "Docs")

## Slack Auth Provider
[Home](https://docs.arcade.dev/home "Home") [Auth Providers](https://docs.arcade.dev/home/auth-providers "Auth Providers") Slack

# Slack auth provider

The Slack auth provider enables tools and agents to call [Slack APIs](https://api.slack.com/docs) on behalf of a user. Behind the scenes, the Arcade Engine and the Slack auth provider seamlessly manage Slack OAuth 2.0 authorization for your users.

Want to quickly get started with Slack in your agent or AI app? The pre-built
[Arcade Slack toolkit](https://docs.arcade.dev/toolkits/social-communication/slack) is what you want!

### What’s documented here [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#whats-documented-here)

This page describes how to use and configure Slack auth with Arcade.

This auth provider is used by:

- The [Arcade Slack toolkit](https://docs.arcade.dev/toolkits/social-communication/slack), which provides pre-built tools for interacting with Slack
- Your [app code](https://docs.arcade.dev/home/auth-providers/slack#using-slack-auth-in-app-code) that needs to call the Slack API
- Or, your [custom tools](https://docs.arcade.dev/home/auth-providers/slack#using-slack-auth-in-custom-tools) that need to call the Slack API

## Configuring Slack auth [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#configuring-slack-auth)

How you configure the Slack auth provider depends on whether you use the Arcade Cloud Engine or a [self-hosted Engine](https://docs.arcade.dev/home/install/overview).

With the Arcade Cloud Engine, you can start building and testing Slack auth without any configuration. Your users will see `Arcade (demo)` as the name of the application that’s requesting permission.

When you are ready to go to production, you’ll want to configure the Slack auth provider with your own Slack app credentials, so users see your app name when they authorize access.

### Create a Slack app [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#create-a-slack-app)

- Follow Slack’s guide to [registering a Slack app](https://api.slack.com/quickstart)
- Choose the scopes (permissions) you need for your app
- Set the redirect URL to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the client ID and client secret

Next, add the Slack app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Slack auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#configuring-slack-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Slack** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-slack-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Slack app.
5. Click **Save**.

When you use tools that require Slack auth using your Arcade account credentials, the Arcade Engine will automatically use this Slack OAuth provider.

### Configuring Slack auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#configuring-slack-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#set-environment-variables)

Set the following environment variables:

```nextra-code
export SLACK_CLIENT_ID="<your client ID>"
export SLACK_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
SLACK_CLIENT_ID="<your client ID>"
SLACK_CLIENT_SECRET="<your client secret>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `slack` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-slack
      description: "The default Slack provider"
      enabled: true
      type: oauth2
      provider_id: slack
      client_id: ${env:SLACK_CLIENT_ID}
      client_secret: ${env:SLACK_CLIENT_SECRET}
```

## Using Slack auth in app code [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#using-slack-auth-in-app-code)

Use the Slack auth provider in your own agents and AI apps to get a user token for the Slack API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Slack API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="slack",
    scopes=[\
        "chat:write",\
        "im:write",\
        "users.profile:read",\
        "users:read",\
    ],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade(); // Automatically finds the `ARCADE_API_KEY` env variable

const userId = "user@example.com";

// Start the authorization process
let authResponse = await client.auth.start(userId, "slack", {
  scopes: ["chat:write", "im:write", "users.profile:read", "users:read"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Slack auth in custom tools [Permalink for this section](https://docs.arcade.dev/home/auth-providers/slack\#using-slack-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can use the pre-built [Arcade Slack toolkit](https://docs.arcade.dev/toolkits/social-communication/slack) to quickly build agents and AI apps that interact with Slack.

If the pre-built tools in the Slack toolkit don’t meet your needs, you can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Slack API.

Use the `Slack()` auth class to specify that a tool requires authorization with Slack. The `context.authorization.token` field will be automatically populated with the user’s Slack token:

```nextra-code
from typing import Annotated

from slack_sdk import WebClient

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Slack
from arcade.sdk.errors import RetryableToolError


@tool(
    requires_auth=Slack(
        scopes=[\
            "chat:write",\
            "im:write",\
            "users.profile:read",\
            "users:read",\
        ],
    )
)
def send_dm_to_user(
    context: ToolContext,
    user_name: Annotated[\
        str,\
        "The Slack username of the person you want to message. Slack usernames are ALWAYS lowercase.",\
    ],
    message: Annotated[str, "The message you want to send"],
):
    """Send a direct message to a user in Slack."""

    slackClient = WebClient(token=context.authorization.token)

    # Retrieve the user's Slack ID based on their username
    userListResponse = slackClient.users_list()
    user_id = None
    for user in userListResponse["members"]:
        if user["name"].lower() == user_name.lower():
            user_id = user["id"]
            break

    if not user_id:
        raise RetryableToolError(
            "User not found",
            developer_message=f"User with username '{user_name}' not found.",
        )

    # Step 2: Retrieve the DM channel ID with the user
    im_response = slackClient.conversations_open(users=[user_id])
    dm_channel_id = im_response["channel"]["id"]

    # Step 3: Send the message as if it's from you (because we're using a user token)
    slackClient.chat_postMessage(channel=dm_channel_id, text=message)
```

[Reddit](https://docs.arcade.dev/home/auth-providers/reddit "Reddit") [Spotify](https://docs.arcade.dev/home/auth-providers/spotify "Spotify")

## Discord Auth Configuration
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Social & Communication](https://docs.arcade.dev/toolkits/social-communication/twilio "Social & Communication") Discord

# Discord auth provider

The Discord auth provider enables tools and agents to call the Discord API on behalf of a user. Behind the scenes, the Arcade Engine and the Discord auth provider seamlessly manage Discord OAuth 2.0 authorization for your users.

### What’s documented here [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#whats-documented-here)

This page describes how to use and configure Discord auth with Arcade.

This auth provider is used by:

- Your [app code](https://docs.arcade.dev/toolkits/social-communication/discord#using-discord-auth-in-app-code) that needs to call Discord APIs
- Or, your [custom tools](https://docs.arcade.dev/toolkits/social-communication/discord#using-discord-auth-in-custom-tools) that need to call Discord APIs

## Configuring Discord auth [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#configuring-discord-auth)

### Create a Discord app [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#create-a-discord-app)

- Create a Discord Application in the [Discord developer portal](https://discord.com/developers/applications)
- In the OAuth2 tab, set the redirect URI to: `https://cloud.arcade.dev/api/v1/oauth/callback`
- Copy the Client ID and Client Secret (you may need to reset the secret to see it)

Next, add the Discord app to your Arcade Engine configuration. You can do this in the Arcade Dashboard, or by editing the `engine.yaml` file directly (for a self-hosted instance).

### Configuring Discord auth with the Arcade Dashboard [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#configuring-discord-auth-with-the-arcade-dashboard)

1. Navigate to the OAuth section of the Arcade Dashboard and click **Add OAuth Provider**.
2. Select **Discord** as the provider.
3. Choose a unique **ID** for your provider (e.g. “my-discord-provider”) with an optional **Description**.
4. Enter your **Client ID** and **Client Secret** from your Discord app.
5. Click **Save**.

When you use tools that require Discord auth using your Arcade account credentials, the Arcade Engine will automatically use this Discord OAuth provider.

### Configuring Discord auth in self-hosted Arcade Engine configuration [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#configuring-discord-auth-in-self-hosted-arcade-engine-configuration)

### Set environment variables [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#set-environment-variables)

Set the following environment variables:

```nextra-code
export DISCORD_CLIENT_ID="<your client ID>"
export DISCORD_CLIENT_SECRET="<your client secret>"
```

Or, you can set these values in a `.env` file:

```nextra-code
DISCORD_CLIENT_SECRET="<your client secret>"
DISCORD_CLIENT_ID="<your client ID>"
```

See [Engine configuration](https://docs.arcade.dev/home/configure/engine) for more information on how
to set environment variables and configure the Arcade Engine.

### Edit the Engine configuration [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#edit-the-engine-configuration)

Edit the `engine.yaml` file and add a `discord` item to the `auth.providers` section:

```nextra-code
auth:
  providers:
    - id: default-discord
      description: "The default Discord provider"
      enabled: true
      type: oauth2
      provider_id: discord
      client_id: ${env:DISCORD_CLIENT_ID}
      client_secret: ${env:DISCORD_CLIENT_SECRET}
```

## Using Discord auth in app code [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#using-discord-auth-in-app-code)

Use the Discord auth provider in your own agents and AI apps to get a user token for the Discord API. See [authorizing agents with Arcade](https://docs.arcade.dev/home/auth/how-arcade-helps) to understand how this works.

Use `client.auth.start()` to get a user token for the Discord API:

PythonJavaScript

```nextra-code
from arcadepy import Arcade

client = Arcade()  # Automatically finds the `ARCADE_API_KEY` env variable

user_id = "user@example.com"

# Start the authorization process
auth_response = client.auth.start(
    user_id=user_id,
    provider="discord",
    scopes=["identify", "email", "guilds", "guilds.join"],
)

if auth_response.status != "completed":
    print("Please complete the authorization challenge in your browser:")
    print(auth_response.url)

# Wait for the authorization to complete
auth_response = client.auth.wait_for_completion(auth_response)

token = auth_response.context.token
# Do something interesting with the token...
```

```nextra-code
import { Arcade } from "@arcadeai/arcadejs";

const client = new Arcade();

const userId = "user@example.com";

// Start the authorization process
const authResponse = await client.auth.start(userId, "discord", {
  scopes: ["identify", "email", "guilds", "guilds.join"],
});

if (authResponse.status !== "completed") {
  console.log("Please complete the authorization challenge in your browser:");
  console.log(authResponse.url);
}

// Wait for the authorization to complete
authResponse = await client.auth.waitForCompletion(authResponse);

const token = authResponse.context.token;
// Do something interesting with the token...
```

## Using Discord auth in custom tools [Permalink for this section](https://docs.arcade.dev/toolkits/social-communication/discord\#using-discord-auth-in-custom-tools)

The Arcade [Model API](https://docs.arcade.dev/home/use-tools/call-tools-with-models) is a convenient way to call language models and automatically invoke tools. You can author your own [custom tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit) that interact with the Discord API.

Use the `Discord()` auth class to specify that a tool requires authorization with Discord. The `context.authorization.token` field will be automatically populated with the user’s Discord token:

```nextra-code
from typing import Annotated, Optional

import httpx

from arcade.sdk import ToolContext, tool
from arcade.sdk.auth import Discord


@tool(
    requires_auth=Discord(
        scopes=["guilds"],
    )
)
async def list_servers(
    context: ToolContext,
    user_id: Annotated[\
        Optional[str],\
        "The user's user ID. Defaults to '@me' for the current user.",\
    ] = "@me",
) -> Annotated[dict, "List of servers the user is a member of"]:
    """List a Discord user's servers they are a member of."""
    url = f"https://discord.com/api/users/{user_id}/guilds"
    headers = {"Authorization": f"Bearer {context.authorization.token}"}

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
```

[Reference](https://docs.arcade.dev/toolkits/social-communication/twilio/reference "Reference") [Linkedin](https://docs.arcade.dev/toolkits/social-communication/linkedin "Linkedin")

## Contribute a Toolkit
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Contribute a toolkit

# How to contribute a toolkit

Arcade welcomes your toolkit contributions. By adding your toolkit to the Arcade documentation, you help other developers discover and use your tools. Follow these steps to submit your own toolkit.

## Prerequisites [Permalink for this section](https://docs.arcade.dev/toolkits/contribute-a-toolkit\#prerequisites)

- Build your toolkit. See [build a toolkit](https://docs.arcade.dev/home/build-tools/create-a-toolkit) for guidance.
- Publish your toolkit on PyPI.

## Submit your toolkit [Permalink for this section](https://docs.arcade.dev/toolkits/contribute-a-toolkit\#submit-your-toolkit)

Open a pull request in the [Arcade Documentation GitHub repository](https://github.com/ArcadeAI/docs) that completes the [community toolkit checklist](https://github.com/ArcadeAI/docs/blob/main/.github/PULL_REQUEST_TEMPLATE/community_contributed_toolkit.md). The checklist will guide you through the necessary steps to ensure your toolkit contribution is successful.

## Review and merge [Permalink for this section](https://docs.arcade.dev/toolkits/contribute-a-toolkit\#review-and-merge)

After submitting your pull request:

- Double-check all checklist items have been completed.
- Address any feedback from the reviewers.
- Once approved, your toolkit will be added to the Arcade documentation for other developers to discover and use!

[Hubspot](https://docs.arcade.dev/toolkits/sales/hubspot "Hubspot")

## Arcade Code Sandbox
[Integrations](https://docs.arcade.dev/toolkits "Integrations") [Developer Tools](https://docs.arcade.dev/toolkits/development/github "Developer Tools") Code Sandbox

# Code Sandbox

**Description:** Enable agents to run code in a sandboxed environment.

**Author:** Arcade

**Code:** [GitHub](https://github.com/ArcadeAI/arcade-ai/tree/main/toolkits/code_sandbox)

**Auth:** API Key

[![PyPI Version](https://img.shields.io/pypi/v/arcade_code_sandbox)](https://pypi.org/project/arcade_code_sandbox/)[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/arcadeai/arcade-ai/blob/main/LICENSE)[![Python Versions](https://img.shields.io/pypi/pyversions/arcade_code_sandbox)](https://pypi.org/project/arcade_code_sandbox/)[![Wheel Status](https://img.shields.io/pypi/wheel/arcade_code_sandbox)](https://pypi.org/project/arcade_code_sandbox/)[![Downloads](https://img.shields.io/pypi/dm/arcade_code_sandbox)](https://pypi.org/project/arcade_code_sandbox/)

The Arcade Code Sandbox toolkit provides a pre-built set of tools for running code in a sandboxed environment. These tools make it easy to build agents and AI apps that can:

- Run code in a sandboxed environment
- Create a static matplotlib chart

## Available Tools [Permalink for this section](https://docs.arcade.dev/toolkits/development/code-sandbox\#available-tools)

These tools are currently available in the Arcade Code Sandbox toolkit.

| Tool Name | Description |
| --- | --- |
| RunCode | Run code in a sandboxed environment. |
| CreateStaticMatplotlibChart | Create a static matplotlib chart. |

If you need to perform an action that’s not listed here, you can [get in touch\\
with us](mailto:contact@arcade.dev) to request a new tool, or [create your\\
own tools](https://docs.arcade.dev/home/build-tools/create-a-toolkit).

## RunCode [Permalink for this section](https://docs.arcade.dev/toolkits/development/code-sandbox\#runcode)

See Example >

Run code in a sandbox and return the output.

**Auth:**

- **Environment Variables Required:**
  - `E2B_API_KEY`: Your API key for authentication.

**Parameters**

- **`code`** _(string, required)_ The code to run.
- **`language`** _(string, optional)_ The language of the code. Valid values are ‘python’, ‘js’, ‘r’, ‘java’, ‘bash’. Defaults to ‘python’.

* * *

## CreateStaticMatplotlibChart [Permalink for this section](https://docs.arcade.dev/toolkits/development/code-sandbox\#createstaticmatplotlibchart)

See Example >

Run the provided Python code to generate a static matplotlib chart. The resulting chart is returned as a base64 encoded image.

**Auth:**

- **Environment Variables Required:**
  - `E2B_API_KEY`: Your API key for authentication.

**Parameters**

- **`code`** _(string, required)_ The Python code to run.

## Auth [Permalink for this section](https://docs.arcade.dev/toolkits/development/code-sandbox\#auth)

The Arcade Code Sandbox toolkit uses [E2B](https://e2b.dev/) to run code in a sandboxed environment.

**Global Environment Variables:**

- `E2B_API_KEY`: Your [E2B](https://e2b.dev/) API key.

## Get Building

[Use tools hosted on Arcade Cloud\\
\\
Arcade tools are hosted by our cloud platform and ready to be used in your agents. Learn how.](https://docs.arcade.dev/home/quickstart)

[Self Host Arcade tools\\
\\
Arcade tools can be self-hosted on your own infrastructure. Learn more about self-hosting.\\
\\
```\\
pip install arcade-code-sandbox\\
```](https://docs.arcade.dev/home/install/overview)

[Web](https://docs.arcade.dev/toolkits/development/web/web "Web") [Stripe](https://docs.arcade.dev/toolkits/payments/stripe "Stripe")

## Google Toolkit Reference
[Integrations](https://docs.arcade.dev/toolkits "Integrations") Productivity & Docs [Google](https://docs.arcade.dev/toolkits/productivity/google/calendar "Google") Reference

# Reference for Google Toolkit

## OrderBy [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#orderby)

Sort keys for ordering files in Google Drive. Each key has both ascending and descending options.

- **`CREATED_TIME`**: When the file was created (ascending).
- **`CREATED_TIME_DESC`**: When the file was created (descending).
- **`FOLDER`**: The folder ID, sorted using alphabetical ordering (ascending).
- **`FOLDER_DESC`**: The folder ID, sorted using alphabetical ordering (descending).
- **`MODIFIED_BY_ME_TIME`**: The last time the file was modified by the user (ascending).
- **`MODIFIED_BY_ME_TIME_DESC`**: The last time the file was modified by the user (descending).
- **`MODIFIED_TIME`**: The last time the file was modified by anyone (ascending).
- **`MODIFIED_TIME_DESC`**: The last time the file was modified by anyone (descending).
- **`NAME`**: The name of the file, sorted using alphabetical ordering (ascending).
- **`NAME_DESC`**: The name of the file, sorted using alphabetical ordering (descending).
- **`NAME_NATURAL`**: The name of the file, sorted using natural sort ordering (ascending).
- **`NAME_NATURAL_DESC`**: The name of the file, sorted using natural sort ordering (descending).
- **`QUOTA_BYTES_USED`**: The number of storage quota bytes used by the file (ascending).
- **`QUOTA_BYTES_USED_DESC`**: The number of storage quota bytes used by the file (descending).
- **`RECENCY`**: The most recent timestamp from the file’s date-time fields (ascending).
- **`RECENCY_DESC`**: The most recent timestamp from the file’s date-time fields (descending).
- **`SHARED_WITH_ME_TIME`**: When the file was shared with the user, if applicable (ascending).
- **`SHARED_WITH_ME_TIME_DESC`**: When the file was shared with the user, if applicable (descending).
- **`STARRED`**: Whether the user has starred the file (ascending).
- **`STARRED_DESC`**: Whether the user has starred the file (descending).
- **`VIEWED_BY_ME_TIME`**: The last time the file was viewed by the user (ascending).
- **`VIEWED_BY_ME_TIME_DESC`**: The last time the file was viewed by the user (descending).

## DocumentFormat [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#documentformat)

The format of the document to be returned.

- **`MARKDOWN`**: Markdown format.
- **`HTML`**: HTML format.
- **`GOOGLE_API_JSON`**: Original JSON format returned by the Google API.

## DateRange [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#daterange)

Represents different date ranges for filtering events.

- **`TODAY`**: Today.
- **`TOMORROW`**: Tomorrow.
- **`THIS_WEEK`**: This week.
- **`NEXT_WEEK`**: Next week.
- **`THIS_MONTH`**: This month.
- **`NEXT_MONTH`**: Next month.

## Day [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#day)

Represents specific days for scheduling.

- **`YESTERDAY`**: Yesterday.
- **`TODAY`**: Today.
- **`TOMORROW`**: Tomorrow.
- **`THIS_SUNDAY`**: This Sunday.
- **`THIS_MONDAY`**: This Monday.
- **`THIS_TUESDAY`**: This Tuesday.
- **`THIS_WEDNESDAY`**: This Wednesday.
- **`THIS_THURSDAY`**: This Thursday.
- **`THIS_FRIDAY`**: This Friday.
- **`THIS_SATURDAY`**: This Saturday.
- **`NEXT_SUNDAY`**: Next Sunday.
- **`NEXT_MONDAY`**: Next Monday.
- **`NEXT_TUESDAY`**: Next Tuesday.
- **`NEXT_WEDNESDAY`**: Next Wednesday.
- **`NEXT_THURSDAY`**: Next Thursday.
- **`NEXT_FRIDAY`**: Next Friday.
- **`NEXT_SATURDAY`**: Next Saturday.

## TimeSlot [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#timeslot)

Represents time slots in a day.

- **`_0000`**: 00:00
- **`_0015`**: 00:15
- **`_0030`**: 00:30
- **`_0045`**: 00:45
- **`_0100`**: 01:00
- **`_0115`**: 01:15
- **`_0130`**: 01:30
- **`_0145`**: 01:45
- **`_0200`**: 02:00
- **`_0215`**: 02:15
- **`_0230`**: 02:30
- **`_0245`**: 02:45
- **`_0300`**: 03:00
- **`_0315`**: 03:15
- **`_0330`**: 03:30
- **`_0345`**: 03:45
- **`_0400`**: 04:00
- **`_0415`**: 04:15
- **`_0430`**: 04:30
- **`_0445`**: 04:45
- **`_0500`**: 05:00
- **`_0515`**: 05:15
- **`_0530`**: 05:30
- **`_0545`**: 05:45
- **`_0600`**: 06:00
- **`_0615`**: 06:15
- **`_0630`**: 06:30
- **`_0645`**: 06:45
- **`_0700`**: 07:00
- **`_0715`**: 07:15
- **`_0730`**: 07:30
- **`_0745`**: 07:45
- **`_0800`**: 08:00
- **`_0815`**: 08:15
- **`_0830`**: 08:30
- **`_0845`**: 08:45
- **`_0900`**: 09:00
- **`_0915`**: 09:15
- **`_0930`**: 09:30
- **`_0945`**: 09:45
- **`_1000`**: 10:00
- **`_1015`**: 10:15
- **`_1030`**: 10:30
- **`_1045`**: 10:45
- **`_1100`**: 11:00
- **`_1115`**: 11:15
- **`_1130`**: 11:30
- **`_1145`**: 11:45
- **`_1200`**: 12:00
- **`_1215`**: 12:15
- **`_1230`**: 12:30
- **`_1245`**: 12:45
- **`_1300`**: 13:00
- **`_1315`**: 13:15
- **`_1330`**: 13:30
- **`_1345`**: 13:45
- **`_1400`**: 14:00
- **`_1415`**: 14:15
- **`_1430`**: 14:30
- **`_1445`**: 14:45
- **`_1500`**: 15:00
- **`_1515`**: 15:15
- **`_1530`**: 15:30
- **`_1545`**: 15:45
- **`_1600`**: 16:00
- **`_1615`**: 16:15
- **`_1630`**: 16:30
- **`_1645`**: 16:45
- **`_1700`**: 17:00
- **`_1715`**: 17:15
- **`_1730`**: 17:30
- **`_1745`**: 17:45
- **`_1800`**: 18:00
- **`_1815`**: 18:15
- **`_1830`**: 18:30
- **`_1845`**: 18:45
- **`_1900`**: 19:00
- **`_1915`**: 19:15
- **`_1930`**: 19:30
- **`_1945`**: 19:45
- **`_2000`**: 20:00
- **`_2015`**: 20:15
- **`_2030`**: 20:30
- **`_2045`**: 20:45
- **`_2100`**: 21:00
- **`_2115`**: 21:15
- **`_2130`**: 21:30
- **`_2145`**: 21:45
- **`_2200`**: 22:00
- **`_2215`**: 22:15
- **`_2230`**: 22:30
- **`_2245`**: 22:45
- **`_2300`**: 23:00
- **`_2315`**: 23:15
- **`_2330`**: 23:30
- **`_2345`**: 23:45

## EventVisibility [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#eventvisibility)

Defines the visibility of an event.

- **`DEFAULT`**: Default visibility.
- **`PUBLIC`**: Public visibility.
- **`PRIVATE`**: Private visibility.
- **`CONFIDENTIAL`**: Confidential visibility.

## EventType [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#eventtype)

Specifies the type of an event.

- **`BIRTHDAY`**: Birthday events.
- **`DEFAULT`**: Regular events.
- **`FOCUS_TIME`**: Focus time events.
- **`FROM_GMAIL`**: Events from Gmail.
- **`OUT_OF_OFFICE`**: Out of office events.
- **`WORKING_LOCATION`**: Working location events.

## SendUpdatesOptions [Permalink for this section](https://docs.arcade.dev/toolkits/productivity/google/reference\#sendupdatesoptions)

Options for sending updates about events.

- **`NONE`**: No notifications are sent.
- **`ALL`**: Notifications are sent to all guests.
- **`EXTERNAL_ONLY`**: Notifications are sent to non-Google Calendar guests only.

[Sheets](https://docs.arcade.dev/toolkits/productivity/google/sheets "Sheets") [Outlook Mail](https://docs.arcade.dev/toolkits/productivity/microsoft/outlook_mail "Outlook Mail")

