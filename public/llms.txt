# Arcade

> Arcade is an AI Tool-calling Platform. For the first time, AI can securely act on behalf of users through Arcade's authenticated integrations, or "tools" in AI lingo. Connect AI to email, files, calendars, and APIs to build assistants that don't just chat - they get work done. Start building in minutes with our pre-built connectors or custom SDK.

Arcade enables your AI agent to securely take real-world actions through user-specific permissions, pre-built MCP Servers for Gmail, Slack, GitHub, and more. You can also build your own agentic tools and MCP servers with our authoring and testing suite. Arcade is your tool engine, registry, and runtime.

## Getting Started

- [page](https://docs.arcade.dev/home): The Arcade Docs page provides users with comprehensive information and resources related to Arcade, helping them understand and utilize its features effectively.

## Agentic Development

- [Agentic Development](https://docs.arcade.dev/home/agentic-development): This documentation page provides guidance on enhancing development efficiency by integrating AI tools with Arcade.dev's resources through the LLMs.txt file format and the Context7 MCP server. Users will learn how to configure their AI IDEs, such as Claude Code and Cursor

## Api Keys

- [Getting Your API Key](https://docs.arcade.dev/home/api-keys): This documentation page guides users on how to obtain and manage their Arcade API key, detailing the steps for both the dashboard and CLI methods. It emphasizes the importance of securely storing the API key, as it grants administrative access to the Arcade platform. Users will

## API Reference

- [Arcade API Reference](https://docs.arcade.dev/references/api): The Arcade API Reference documentation provides users with essential information about the Arcade API, including the base URL for API requests and the requirement for a valid account. It features an interactive Swagger UI for exploring API endpoints and emphasizes adherence to the Terms of Service.
- [Arcade MCP (MCP Server SDK) - Python Overview](https://docs.arcade.dev/references/mcp/python/overview): The documentation page provides an overview of the Arcade MCP (MCP Server SDK) for Python, detailing its minimal API designed for programmatically building MCP servers. It outlines the basic usage, key classes like `MCPApp`, and essential methods for server
- [Claude Desktop](https://docs.arcade.dev/references/mcp/python/clients/claude-desktop): This documentation page provides a comprehensive guide for setting up and configuring Claude Desktop to work with Arcade MCP servers. It covers prerequisites, quick setup using Arcade CLI, manual configuration, advanced options, troubleshooting common issues, and best practices to ensure effective management of multiple
- [Cursor IDE](https://docs.arcade.dev/references/mcp/python/clients/cursor): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with the Cursor IDE, enabling users to enhance their development experience through configuration, tool usage, and debugging. It covers prerequisites, setup methods, workflow optimizations, and troubleshooting tips, ensuring users
- [Errors](https://docs.arcade.dev/references/mcp/python/errors): This documentation page provides an overview of domain-specific error types related to the MCP server and its components, detailing the exception hierarchy for improved error handling and debugging. Users can learn about various exceptions, such as `MCPError`, `ServerError`, and
- [MCP Inspector](https://docs.arcade.dev/references/mcp/python/clients/mcp-inspector): The MCP Inspector documentation provides users with a comprehensive guide to installing and utilizing the MCP Inspector tool for debugging and testing Arcade MCP servers. It covers features such as interactive testing, protocol monitoring, and resource browsing, along with advanced usage tips for tool development and
- [Middleware](https://docs.arcade.dev/references/mcp/python/middleware): This documentation page provides an overview of the Middleware component in the Arcade MCP Server SDK for Python, detailing how to intercept and modify MCP requests and responses through a series of customizable handlers. It outlines the base classes, methods for handling various message types, and
- [Server](https://docs.arcade.dev/references/mcp/python/server): This documentation page provides a reference for the `MCPServer` class in the Arcade MCP framework, detailing its purpose as a low-level server for hosting Arcade tools over MCP. Users will learn about the server's features, including middleware support, context injection
- [Settings](https://docs.arcade.dev/references/mcp/python/settings): This documentation page provides an overview of global configuration and environment-driven settings for the Arcade MCP Server, detailing the main settings container and various sub-settings related to server, middleware, notifications, transport, and arcade-specific configurations. Users can learn how to create settings
- [Sharing your MCP server](https://docs.arcade.dev/references/mcp/python/sharing): This documentation page guides users on how to make their MCP server accessible to others by creating secure tunnels and registering the server with Arcade. It provides step-by-step instructions for running the server, establishing a secure tunnel using various options, registering the server in Arcade
- [Transport Modes](https://docs.arcade.dev/references/mcp/python/transports): This documentation page provides an overview of the different transport modes available for MCP servers, specifically focusing on stdio and HTTP transports. It outlines the characteristics, usage, and configuration for each transport, helping users choose the appropriate mode based on their application needs,
- [Types](https://docs.arcade.dev/references/mcp/python/types): This documentation page provides an overview of core Pydantic models and enums used in the MCP protocol, specifically detailing the `CallToolResult` and `SessionMessage` types. It guides users on how to construct JSON-RPC requests and responses, as
- [Visual Studio Code](https://docs.arcade.dev/references/mcp/python/clients/visual-studio-code): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with Visual Studio Code (VSCode) using various methods such as terminal integration, task runners, and launch configurations. It outlines prerequisites, development workflows, testing tools, debugging tips, and best

## Arcade Cli

- [The Arcade CLI](https://docs.arcade.dev/home/arcade-cli): The Arcade CLI documentation provides users with guidance on installing and utilizing the Arcade command-line tool for managing Arcade deployments, generating toolkits, and executing various commands. It includes detailed instructions for installation within a Python virtual environment and offers insights into the functionality of specific

## Auth

- [Authorized Tool Calling](https://docs.arcade.dev/home/auth/auth-tool-calling): The "Authorized Tool Calling" documentation provides a comprehensive guide for developers on how to securely implement OAuth 2.0, API keys, and user tokens to enable AI agents to access external services on behalf of users. It outlines the steps for initializing the
- [Checking Tool Authorization Status](https://docs.arcade.dev/home/auth/tool-auth-status): This documentation page provides a comprehensive guide on how to check the authorization status of tools before execution, helping users understand permission requirements and tool availability. It includes instructions for initializing the client in Python or JavaScript, as well as methods for checking the authorization status
- [Direct Third-Party API Call](https://docs.arcade.dev/home/auth/call-third-party-apis-directly): This documentation page provides a comprehensive guide on how to retrieve an authorization token for directly calling third-party APIs, specifically using Arcade and the Gmail API as an example. Users will learn to manage user authentication flows, handle authorization requests, and utilize obtained tokens to
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/home/auth/how-arcade-helps): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details how Arcade's authorization system supports OAuth 2.0, API keys, and user tokens, enabling AI agents to securely perform tasks on
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/home/auth/how-arcade-helps): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details how Arcade's authorization system utilizes OAuth 2.0, API keys, and user tokens to enable AI agents to securely act on behalf
- [Secure and Brand the Auth Flow in Production](https://docs.arcade.dev/home/auth/secure-auth-production): This documentation page guides users on how to secure and customize their authentication flows using Arcade.dev in production environments. It outlines the use of the Arcade user verifier for development and the implementation of a custom user verifier for production, ensuring user safety and a tailored user

## Auth Providers

- [Asana](https://docs.arcade.dev/home/auth-providers/asana): This documentation page provides guidance on using the Asana authentication provider within the Arcade platform, enabling users to call Asana APIs on behalf of their applications. It outlines how to quickly set up the default Asana auth provider or configure custom app credentials, including
- [Atlassian](https://docs.arcade.dev/home/auth-providers/atlassian): This documentation page provides guidance on configuring a custom Atlassian Auth Provider for use with Arcade, enabling users to authenticate and call the Atlassian API on behalf of their applications or tools. It outlines the steps for creating an Atlassian app,
- [Auth Providers](https://docs.arcade.dev/home/auth-providers): The "Auth Providers" documentation page provides a comprehensive registry of available authentication providers within the Arcade ecosystem, enabling users to securely grant Arcade tools access to their data. It outlines the benefits of using Arcade's built-in providers versus configuring custom ones, including branding
- [ClickUp](https://docs.arcade.dev/home/auth-providers/clickup): This documentation page provides guidance on configuring and using the ClickUp authentication provider within the Arcade platform, enabling applications and custom tools to interact with the ClickUp API on behalf of users. It outlines the steps for creating a ClickUp app, setting up OAuth
- [Discord](https://docs.arcade.dev/home/auth-providers/discord): This documentation page provides guidance on configuring a custom Discord authentication provider for use with Arcade, enabling applications and tools to interact with the Discord API on behalf of users. It outlines the steps to create a Discord app, set up OAuth 2.0 credentials
- [Dropbox](https://docs.arcade.dev/home/auth-providers/dropbox): This documentation page provides guidance on configuring a custom Dropbox Auth Provider in Arcade, enabling users to authenticate and interact with the Dropbox API within their applications and tools. It outlines the steps to create a Dropbox app, set up OAuth 2.0 credentials,
- [GitHub](https://docs.arcade.dev/home/auth-providers/github): This documentation page provides guidance on configuring GitHub authentication for tools and applications using the Arcade platform, enabling users to interact with GitHub APIs on behalf of their users. It outlines the steps to create a GitHub app, configure it within the Arcade Dashboard
- [Google](https://docs.arcade.dev/home/auth-providers/google): This documentation page provides guidance on configuring the Google authentication provider for use with Arcade, enabling users to call Google/Google Workspace APIs on behalf of users. It outlines the steps for creating a Google app, setting up OAuth credentials, and integrating Google auth within
- [Hubspot](https://docs.arcade.dev/home/auth-providers/hubspot): This documentation page provides guidance on using and configuring the Hubspot authentication provider within the Arcade platform, enabling users to call Hubspot APIs seamlessly. It outlines how to utilize Arcade's default Hubspot auth provider, as well as instructions for setting up custom Hub
- [Linear](https://docs.arcade.dev/home/auth-providers/linear): This documentation page provides guidance on configuring the Linear authentication provider within the Arcade platform, enabling users to securely call Linear APIs on behalf of users through their applications or custom tools. It outlines the steps for creating a Linear app, setting up OAuth2 credentials,
- [LinkedIn](https://docs.arcade.dev/home/auth-providers/linkedin): This documentation page provides guidance on configuring and using the LinkedIn authentication provider with Arcade, enabling applications and custom tools to access LinkedIn APIs on behalf of users. It outlines the necessary steps for creating a LinkedIn app, setting up app credentials, and
- [Microsoft](https://docs.arcade.dev/home/auth-providers/microsoft): This documentation page provides guidance on how to create and configure a custom Microsoft Auth Provider for use with Arcade, enabling applications and tools to access the Microsoft Graph API on behalf of users. It details the steps required to register a Microsoft app, set necessary permissions
- [Notion](https://docs.arcade.dev/home/auth-providers/notion): This documentation page provides guidance on configuring the Notion authentication provider for use with Arcade, enabling applications and custom tools to access Notion APIs on behalf of users. It outlines the steps to create a Notion app, set up OAuth credentials, and utilize
- [OAuth 2.0](https://docs.arcade.dev/home/auth-providers/oauth2): This documentation page provides guidance on configuring OAuth 2.0 to authorize tools and agents with any OAuth 2.0-compatible API using the Arcade platform. It details the setup process for both the Arcade Cloud Engine and self-hosted environments, including supported
- [Reddit](https://docs.arcade.dev/home/auth-providers/reddit): This documentation page provides guidance on configuring a custom Reddit Auth Provider within the Arcade platform, enabling users to authenticate and interact with the Reddit API on behalf of their applications. It outlines the steps to create a Reddit app, set up OAuth credentials, and integrate
- [Salesforce](https://docs.arcade.dev/home/auth-providers/salesforce): This documentation page provides guidance on configuring the Salesforce auth provider for use with Arcade, enabling users to call Salesforce APIs through their applications. It outlines the steps necessary to create a Connected App in Salesforce, set up OAuth settings, and manage app credentials to ensure
- [Slack](https://docs.arcade.dev/home/auth-providers/slack): This documentation page provides guidance on configuring the Slack authentication provider for use with Arcade, enabling tools and agents to interact with Slack APIs on behalf of users. It outlines the steps for creating a Slack app, setting up app credentials, and integrating Slack auth within
- [Spotify](https://docs.arcade.dev/home/auth-providers/spotify): This documentation page provides guidance on configuring a custom Spotify Auth Provider within the Arcade platform, enabling users to authenticate and interact with the Spotify API on behalf of their users. It outlines the steps for creating a Spotify app, setting up OAuth credentials, and integrating
- [Twitch](https://docs.arcade.dev/home/auth-providers/twitch): This documentation page provides instructions for configuring a custom Twitch authentication provider within the Arcade platform, enabling users to access the Twitch API on behalf of their users. It outlines the steps for creating a Twitch app, setting up OAuth credentials, and integrating Twitch authentication into
- [X](https://docs.arcade.dev/home/auth-providers/x): This documentation page provides guidance on configuring and using the X (Twitter) authentication provider within the Arcade platform, enabling users to call the X API on behalf of users. It outlines the steps for creating an X app, setting up OAuth credentials, and integrating
- [Zendesk](https://docs.arcade.dev/home/auth-providers/zendesk): This documentation page provides guidance on configuring and using the Zendesk authentication provider with Arcade, enabling users to call Zendesk APIs on behalf of users. It outlines the steps for creating a Zendesk app, setting up OAuth clients, and integrating with Arcade tools
- [Zoom](https://docs.arcade.dev/home/auth-providers/zoom): This documentation page provides instructions for configuring a custom Zoom Auth Provider in Arcade, enabling users to authenticate and call the Zoom API through their applications and tools. It outlines the steps for creating a Zoom app, setting up OAuth credentials, and integrating Zoom authentication within

## Build Tools

- [Adding user authorization to your tools](https://docs.arcade.dev/home/build-tools/create-a-tool-with-auth): This documentation page guides users on how to implement user authorization in custom tools using the Arcade platform, specifically for integrating with Slack. It covers prerequisites, installation steps, and detailed instructions on defining authorized tools, handling OAuth flows, and utilizing the `ToolContext
- [Create a tool with secrets](https://docs.arcade.dev/home/build-tools/create-a-tool-with-secrets): This documentation page provides a step-by-step guide on how to create custom tools in Arcade that utilize sensitive information, known as secrets, such as passwords or API keys. Users will learn how to set up secrets in the Arcade Dashboard and access them within their
- [Creating an MCP Server with Arcade](https://docs.arcade.dev/home/build-tools/create-a-mcp-server): This documentation page guides users through the process of creating, testing, deploying, and publishing a custom MCP Server using the Arcade tools. It covers installation, server creation, running the server, and connecting it to various MCP Clients, ensuring users can effectively utilize
- [RetryableToolError in Arcade](https://docs.arcade.dev/home/build-tools/retry-tools-with-improved-prompt): This documentation page explains how to use the `RetryableToolError` in the Arcade Tool SDK to enhance tool calls by providing additional context for improved input parameters. It outlines when to raise this error and includes an example demonstrating its application in a tool that
- [Tool Error Handling](https://docs.arcade.dev/home/build-tools/handle-tool-errors): This documentation page provides guidance on handling errors when developing tools using Arcade's Tool Development Kit (TDK). It explains the error handling philosophy, including automatic error adaptation and structured error hierarchy, while also detailing when and how to explicitly raise errors. Users will
- [Understanding `Context` and tools](https://docs.arcade.dev/home/build-tools/tool-context): This documentation page explains the `Context` class in Arcade, which manages authorization and user information for tools that require authentication. It details how to utilize various runtime features such as logging, secrets management, user context, and progress reporting through the `Context`

## Changelog

- [Changelog](https://docs.arcade.dev/home/changelog): The Changelog documentation page provides users with a comprehensive overview of the latest updates, features, and bug fixes at Arcade.dev, organized by date. It highlights new toolkits, enhancements to existing services, and important documentation changes, enabling users to stay informed

## Contact Us

- [Contact Us](https://docs.arcade.dev/home/contact-us): The "Contact Us" documentation page provides users with various support channels to connect with the Arcade team, including a Discord community for real-time assistance, GitHub for reporting issues and feature requests, and email for general inquiries. It also highlights resources such as

## Crewai

- [page](https://docs.arcade.dev/home/crewai/use-arcade-tools): This documentation page provides a comprehensive guide on integrating Arcade tools into CrewAI applications, detailing the necessary prerequisites, setup, and configuration steps. Users will learn how to authorize tools, manage API keys, and create a Crew that utilizes these tools effectively. Additionally
- [Provide the tool manager callback to the ArcadeToolManager](https://docs.arcade.dev/home/crewai/custom-auth-flow): This documentation page guides users through creating a custom authentication flow for the ArcadeToolManager in CrewAI, allowing for tailored authorization processes before executing tools. It covers prerequisites, environment setup, API key configuration, and the implementation of a custom auth function. By

## Deployment

- [Engine Configuration](https://docs.arcade.dev/home/deployment/engine-configuration): This documentation page provides enterprise customers with advanced configuration options for self-hosting the Arcade Engine, including installation methods and details on the essential configuration files (`engine.yaml` and `engine.env`). Users will learn how to customize engine settings, manage environment variables,
- [On-premise MCP Servers](https://docs.arcade.dev/home/deployment/on-prem-mcp): This documentation page provides guidance on deploying on-premise MCP servers within a hybrid architecture, enabling users to leverage Arcade's cloud infrastructure while maintaining control over their local environment and sensitive data. It outlines the setup process, benefits, best practices, and troubleshooting tips

## Evaluate Tools

- [Evaluate tools](https://docs.arcade.dev/home/evaluate-tools/create-an-evaluation-suite): This documentation page provides a comprehensive guide on how to create and execute an evaluation suite for custom tools using Arcade, ensuring their correct functionality with an AI assistant. Users will learn to define evaluation cases, utilize various critic classes to assess performance, and run evaluations
- [Run evaluations with the Arcade CLI](https://docs.arcade.dev/home/evaluate-tools/run-evaluations): This documentation page provides guidance on using the Arcade CLI to run evaluations of tool-enabled language models efficiently. It details the `arcade evals` command, including how to execute evaluation suites, customize options, and interpret the results, enabling users to analyze
- [Why evaluate tools?](https://docs.arcade.dev/home/evaluate-tools/why-evaluate-tools): This documentation page outlines the importance of evaluating tools used in language models with tool-calling capabilities, emphasizing the need for effective tool utilization and accurate intent understanding. It introduces Arcade's Evaluation Framework, which provides a structured approach to assess the model's performance in

## Faq

- [Frequently Asked Questions](https://docs.arcade.dev/home/faq): This documentation page provides answers to common questions about the Arcade platform, including how to create and contribute tools, the differences between various API keys, and authentication methods. Users can learn how to build their own tools, collaborate effectively using project API keys, and

## Glossary

- [Arcade Glossary](https://docs.arcade.dev/home/glossary): The Arcade Glossary provides definitions and explanations of key terms related to the Arcade platform, helping users understand concepts such as agents, tools, and the Model Context Protocol (MCP). This resource is designed to assist developers in building, testing, and deploying

## Google Adk

- [Arcade with Google ADK](https://docs.arcade.dev/home/google-adk/overview): This documentation page provides a comprehensive guide for integrating the Arcade platform with the Google ADK library, enabling users to enhance AI agents with various tools such as Google Mail and GitHub. It covers installation, key features, basic usage, and authorization processes,
- [Initialize the Arcade client](https://docs.arcade.dev/home/google-adk/use-arcade-tools): This documentation page provides a comprehensive guide for integrating Arcade tools into Google ADK applications, detailing prerequisites, environment setup, API key configuration, and agent management. Users will learn how to effectively utilize Arcade tools, authorize them for agents, and run agents with

## Hosting Overview

- [Hosting Options](https://docs.arcade.dev/home/hosting-overview): This documentation page provides an overview of various hosting options for Arcade, including the recommended cloud service and alternatives for on-premise deployments. Users can learn how to connect local resources, customize authentication experiences, and deploy Arcade on their own infrastructure using Kubernetes. It

## Langchain

- [Fetch the "ScrapeUrl" tool from the "Firecrawl" MCP Server](https://docs.arcade.dev/home/langchain/use-arcade-tools): This documentation page provides a comprehensive guide on integrating Arcade tools into LangGraph applications, detailing the necessary prerequisites, setup instructions, and configuration steps. Users will learn how to manage Arcade tools, create AI models, and implement a ReAct-style agent while leveraging
- [Import necessary classes and modules](https://docs.arcade.dev/home/langchain/user-auth-interrupts): This documentation page guides users in creating a LangGraph workflow that incorporates user authorization for specific Arcade tools, ensuring that only authorized tools are accessible to the language model. It provides step-by-step instructions on setting up the environment, configuring API keys, defining workflow
- [page](https://docs.arcade.dev/home/langchain/auth-langchain-tools): This documentation page provides a step-by-step guide on how to authorize existing LangChain tools, such as the `GmailToolkit`, using the Arcade platform. It outlines the prerequisites, necessary package installations, and detailed code examples in both Python and JavaScript

## Mastra

- [Create a new Mastra project](https://docs.arcade.dev/home/mastra/use-arcade-tools): This documentation page provides a step-by-step guide for integrating Arcade tools into a new Mastra project, enabling users to leverage these tools within their Mastra applications. It covers prerequisites, project creation, client installation, API key configuration, and agent interaction methods
- [page](https://docs.arcade.dev/home/mastra/overview): This documentation page provides guidance on integrating Arcade's tool ecosystem with Mastra applications, enabling users to enhance their Mastra agents with access to a variety of third-party services. It outlines the key mechanisms for tool discovery, schema conversion, and execution delegation,
- [page](https://docs.arcade.dev/home/mastra/user-auth-interrupts): This documentation page provides guidance on managing user-specific authorization for Arcade tools within Mastra applications, enabling dynamic tool loading and secure authentication flows for multiple users. It outlines the steps to set up configuration, create API endpoints for tool access, and handle authorization effectively

## Mcp Clients

- [Use Arcade in Visual Studio Code](https://docs.arcade.dev/home/mcp-clients/visual-studio-code): This documentation page provides a step-by-step guide for connecting Visual Studio Code to Arcade.dev's MCP server, enabling users to utilize available tools within the editor. It outlines the setup process, including downloading Visual Studio Code and configuring the MCP server, while also
- [Use Arcade with Claude Desktop](https://docs.arcade.dev/home/mcp-clients/claude-desktop): This documentation page provides a step-by-step guide for connecting Claude Desktop to a local Arcade server, enabling users to utilize Arcade tools within the application. It outlines prerequisites, installation of necessary dependencies, and configuration settings required for successful integration. Users will learn how

## MCP Servers

- [page](https://docs.arcade.dev/mcp-servers): This documentation page provides a comprehensive registry of all MCP Servers available within the Arcade ecosystem, helping users locate and access various toolkits effectively.

## MCP Servers - Contribute A Server

- [How to contribute a MCP Server](https://docs.arcade.dev/mcp-servers/contribute-a-server): This documentation page provides a step-by-step guide for developers on how to contribute their MCP Server to the Arcade documentation, enhancing visibility and usability for other users. It outlines prerequisites, submission procedures via a pull request, and the review process to ensure successful integration

## MCP Servers - Customer Support

- [Zendesk](https://docs.arcade.dev/mcp-servers/customer-support/zendesk): This documentation page provides a comprehensive overview of the Zendesk MCP Server, enabling users to efficiently manage customer support tickets and knowledge base articles. It outlines various tools available for listing, commenting on, and solving tickets, as well as searching for Help Center articles
- [Zendesk Reference](https://docs.arcade.dev/mcp-servers/customer-support/zendesk/reference): The Zendesk Reference documentation provides a comprehensive list of enumerations related to ticket statuses, sorting orders, and article sorting criteria used in the Zendesk MCP Server. It helps users understand and implement these enumerations effectively in their applications.

## MCP Servers - Databases

- [Clickhouse](https://docs.arcade.dev/mcp-servers/databases/clickhouse): This documentation page provides users with a comprehensive guide on the Arcade Clickhouse MCP Server, which enables agents to interact with Clickhouse databases in a read-only capacity. It outlines key features such as schema discovery, table exploration, and safe query execution, along
- [Clickhouse](https://docs.arcade.dev/mcp-servers/databases/postgres/clickhouse): This documentation page provides an overview of the Arcade Clickhouse MCP Server, which enables agents to interact with Clickhouse databases in a read-only capacity. Users can learn to discover database schemas, explore table structures, and execute SELECT queries safely, while also understanding
- [MongoDB](https://docs.arcade.dev/mcp-servers/databases/mongodb): This documentation page provides users with a comprehensive guide on using the Arcade MongoDB MCP Server, which enables agents to interact with MongoDB databases in a read-only capacity. Users will learn how to discover databases and collections, explore document structures, and execute safe
- [MongoDB](https://docs.arcade.dev/mcp-servers/databases/postgres/mongodb): This documentation page provides an overview of the Arcade MongoDB MCP Server, which allows users to interact with MongoDB databases in a read-only capacity. It includes tools for discovering databases and collections, exploring document structures, executing safe queries, and performing data analysis
- [Postgres](https://docs.arcade.dev/mcp-servers/databases/postgres): This documentation page provides users with a comprehensive guide to the Arcade Postgres MCP Server, which enables agents to interact with PostgreSQL databases in a read-only capacity. Users can learn to discover database schemas, explore table structures, and execute SELECT queries safely,

## MCP Servers - Development

- [E2B](https://docs.arcade.dev/mcp-servers/development/e2b): The E2B documentation page provides users with tools to run code in a sandboxed environment and create static matplotlib charts, facilitating the development of agents and AI applications. It outlines the available tools, their functionalities, and provides examples for implementation in Python and
- [Firecrawl](https://docs.arcade.dev/mcp-servers/development/firecrawl): The Firecrawl documentation page provides users with tools and guidance for building agents and AI applications that can scrape, crawl, and map websites. It details various functionalities, such as scraping URLs, crawling websites, retrieving crawl statuses, and canceling ongoing crawls
- [GitHub](https://docs.arcade.dev/mcp-servers/development/github): This documentation page provides users with tools and guidance for integrating with GitHub repositories, enabling them to perform actions such as accessing repository information, managing issues, and interacting with pull requests through the Arcade GitHub MCP Server. Users can learn how to utilize various
- [Reference for Firecrawl Toolkit](https://docs.arcade.dev/mcp-servers/development/firecrawl/reference): The "Reference for Firecrawl Toolkit" documentation page provides users with a comprehensive overview of the various output formats available for scraped web pages, including Markdown, HTML, raw HTML, links, and screenshot options. This guide helps users understand how to effectively utilize
- [Reference for GitHub Toolkit](https://docs.arcade.dev/mcp-servers/development/github/reference): The GitHub Toolkit Reference documentation provides detailed specifications for sorting and filtering pull requests, review comments, and repository activities based on various properties and states. Users can learn how to customize their queries by selecting sorting criteria, repository types, time periods, and activity

## MCP Servers - Entertainment

- [Imgflip](https://docs.arcade.dev/mcp-servers/entertainment/imgflip): The Imgflip documentation page provides users with tools to create and manage memes using the Imgflip API, enabling the creation of custom memes, searching for meme templates, and retrieving popular meme templates. It outlines the available tools, their functionalities, and includes code
- [Imgflip](https://docs.arcade.dev/mcp-servers/entertainment/spotify/imgflip): The Imgflip documentation page provides users with tools to create and manage memes using the Imgflip API, enabling them to search for meme templates, retrieve popular memes, and create custom memes. It outlines the available features, including parameters for each tool, and
- [Spotify](https://docs.arcade.dev/mcp-servers/entertainment/spotify): This documentation page provides a comprehensive guide for using the Arcade Spotify MCP Server, which enables agents to interact with Spotify tracks through various tools. Users can learn how to retrieve track information, control playback, and search the Spotify catalog, all while requiring a self
- [Twitch auth provider](https://docs.arcade.dev/mcp-servers/entertainment/twitch): This documentation page provides guidance on configuring a custom Twitch authentication provider for use with Arcade, enabling users to call the Twitch API on behalf of their accounts. It outlines the necessary steps to create a Twitch application, set up OAuth credentials, and integrate Twitch auth

## MCP Servers - Payments

- [Stripe](https://docs.arcade.dev/mcp-servers/payments/stripe): This documentation page provides users with tools and guidance for interacting with the Stripe API, enabling them to build intelligent agents and applications for payment processing, customer management, and invoicing. It outlines various available tools, such as creating and listing customers, products,
- [StripeApi](https://docs.arcade.dev/mcp-servers/payments/stripe_api): The StripeApi documentation provides tools that enable users to interact programmatically with the Stripe API, allowing for comprehensive management of accounts, customers, payments, billing, and reporting. It is designed for developers building applications or agents that require extensive access to Stripe's

## MCP Servers - Productivity

- [Asana](https://docs.arcade.dev/mcp-servers/productivity/asana): This documentation page provides a comprehensive guide for using the Arcade Asana MCP Server, enabling users to build agents and AI applications that interact with Asana tasks, projects, and workspaces. It details various tools available for managing tasks, teams, and user
- [Asana Reference](https://docs.arcade.dev/mcp-servers/productivity/asana/reference): The Asana Reference documentation provides a comprehensive list of enumerations related to tag colors, task sorting criteria, and sort order options used in the Asana MCP Server. Users can utilize this reference to understand and implement these enumerations effectively in their tools and
- [BoxApi](https://docs.arcade.dev/mcp-servers/productivity/box-api): The BoxApi documentation provides a comprehensive overview of tools that enable users to manage Box content, metadata, security, and collaboration workflows through direct API interactions. It outlines key functionalities such as file management, document generation, and enterprise operations, empowering users to automate
- [Clickup](https://docs.arcade.dev/mcp-servers/productivity/clickup): This documentation page provides an overview of the ClickUp MCP Server, enabling users to build agents and applications that interact with ClickUp workspaces, tasks, and members. It details various tools available for managing tasks, comments, and workspace structures, along with
- [Clickup Reference](https://docs.arcade.dev/mcp-servers/productivity/clickup/reference): The Clickup Reference documentation provides users with a comprehensive guide to the enumerations utilized in various tools within the Clickup MCP Server, including task priorities, filter scopes, task ordering, and comment resolutions. It helps users understand the predefined values they can use
- [Close.io](https://docs.arcade.dev/mcp-servers/productivity/closeio): This documentation page introduces Close.io, a CRM tool designed for managing leads, contacts, and deals. It aims to provide users with guidance on effectively utilizing the platform. Currently, detailed content is not available as the page is marked "Coming Soon."
- [Confluence](https://docs.arcade.dev/mcp-servers/productivity/confluence): This documentation page provides a comprehensive overview of the Arcade Confluence MCP Server, which enables users to build agents and AI applications that interact with Confluence. It outlines various tools available for managing pages, spaces, and attachments, as well as searching for content
- [Dropbox](https://docs.arcade.dev/mcp-servers/productivity/dropbox): This documentation page provides users with tools and instructions for integrating with Dropbox through the Arcade MCP Server, enabling the creation of agents and AI applications that can browse, search, and download files and folders from Dropbox. It outlines specific functionalities, such as listing items
- [Gmail](https://docs.arcade.dev/mcp-servers/productivity/gmail): This documentation page provides tools for developers to integrate Gmail functionalities into their applications, enabling them to send, read, manage, and search emails using the Gmail API. It outlines various available tools, such as sending and managing email drafts, and offers code examples
- [Gmail Reference](https://docs.arcade.dev/mcp-servers/productivity/gmail/reference): The Gmail Reference documentation provides a comprehensive list of enumerations used in the Gmail MCP Server, specifically detailing options for reply recipients and date ranges. Users can refer to this page to understand the available values for configuring email replies and filtering messages by date. This
- [Google Calendar](https://docs.arcade.dev/mcp-servers/productivity/google-calendar): This documentation page provides users with tools and guidance for integrating and interacting with Google Calendar through the Arcade Google Calendar MCP Server. Users can learn how to list calendars, create, update, and delete events, and find available meeting times, enabling them to build
- [Google Contacts](https://docs.arcade.dev/mcp-servers/productivity/google-contacts): This documentation page provides a comprehensive guide for using the Arcade Google Contacts MCP Server, enabling users to interact with Google Contacts through pre-built tools. Users can create new contacts and search for existing ones by name or email, facilitating the development of agents and AI
- [Google Docs](https://docs.arcade.dev/mcp-servers/productivity/google-docs): This documentation page provides a comprehensive guide for using the Arcade Google Docs MCP Server, which enables developers to build agents and AI applications that interact with Google Docs. Users can learn how to create, update, list, and delete documents, as well as access
- [Google Drive](https://docs.arcade.dev/mcp-servers/productivity/google-drive): This documentation page provides users with tools to interact with Google Drive through the GoogleDrive MCP Server, enabling efficient file management and access. Users can retrieve their file structure, generate a Google File Picker URL for secure file selection, and search for specific files within
- [Google Sheets](https://docs.arcade.dev/mcp-servers/productivity/google-sheets): This documentation page provides an overview of the Arcade Google Sheets MCP Server, which enables users to build agents and AI applications that interact with Google Sheets. It outlines various tools available for creating spreadsheets, reading and writing data, and retrieving metadata, along with examples
- [Google Slides](https://docs.arcade.dev/mcp-servers/productivity/google-slides): This documentation page provides tools for interacting with Google Slides, enabling users to create presentations, add slides, comment on specific slides, and retrieve presentation content in markdown format. It outlines various functionalities, including searching for presentations in Google Drive and managing comments, along
- [GoogleCalendar Reference](https://docs.arcade.dev/mcp-servers/productivity/google-calendar/reference): The GoogleCalendar Reference documentation provides a comprehensive overview of key enumerations used in the GoogleCalendar MCP Server, including options for event visibility, update notifications, and Google Meet integration. Users can learn about the different settings available for managing calendar events effectively. This
- [GoogleDocs Reference](https://docs.arcade.dev/mcp-servers/productivity/google-docs/reference): The GoogleDocs Reference documentation provides a comprehensive list of enumerations related to sorting and document formats used in the GoogleDocs MCP Server. Users can learn how to effectively order documents by various criteria and understand the supported document formats for integration. This reference serves as
- [GoogleDrive Reference](https://docs.arcade.dev/mcp-servers/productivity/google-drive/reference): The GoogleDrive Reference documentation provides a comprehensive list of enumerations for sorting and categorizing files within the GoogleDrive MCP Server. Users can learn about various order options for file organization, such as by creation time or modification time, as well as the different
- [GoogleSheets Reference](https://docs.arcade.dev/mcp-servers/productivity/google-sheets/reference): The GoogleSheets Reference documentation provides a comprehensive list of enumerations used for ordering data in the GoogleSheets MCP Server. Users can learn about various sorting options, such as by creation time, modification time, and name, along with their corresponding code representations.
- [Jira](https://docs.arcade.dev/mcp-servers/productivity/jira): This documentation page provides an overview of the Jira MCP Server, which enables users and AI applications to effectively manage Jira issues and projects through various functionalities, such as creating, updating, and searching for issues, as well as managing labels and attachments. It also
- [Jira Environment Variables](https://docs.arcade.dev/mcp-servers/productivity/jira/environment-variables): This documentation page provides information on configuring key environment variables for optimizing interactions with the Jira API in the Arcade tool. Users will learn how to set limits on concurrent requests, define API request timeouts, and manage caching strategies to enhance performance during tool execution.
- [Jira Reference](https://docs.arcade.dev/mcp-servers/productivity/jira/reference): The Jira Reference documentation provides a comprehensive list of enumerations used in the Jira MCP Server, specifically for filtering sprints, ordering priority schemes, and sorting issue comments. Users can learn about the various states and ordering options available through the Jira API to effectively
- [Linear](https://docs.arcade.dev/mcp-servers/productivity/linear): This documentation page provides users with tools to interact with Linear's issue tracking and team management features through the Arcade Linear MCP Server. Users can retrieve detailed information about specific issues and team data without making modifications, facilitating analysis and reporting. Additionally, the page offers
- [Notion](https://docs.arcade.dev/mcp-servers/productivity/notion): This documentation page provides users with a comprehensive guide to the Arcade Notion MCP Server, which enables the development of agents and AI applications that interact with Notion. Users can learn how to utilize various tools for tasks such as retrieving page content, creating new
- [Obsidian](https://docs.arcade.dev/mcp-servers/productivity/obsidian): This documentation page provides an overview of the Arcade Obsidian Toolkit, a community-contributed MCP Sever verified by the Arcade team. It directs users to the GitHub repository for further information and resources related to the toolkit.
- [Outlook Calendar](https://docs.arcade.dev/mcp-servers/productivity/outlook-calendar): This documentation page provides users with tools for managing calendar events in Outlook through the Arcade Outlook Calendar MCP Server. Users can learn how to create, list, and retrieve events in their Outlook Calendar using the provided APIs, along with example code snippets in Python and
- [Outlook Mail](https://docs.arcade.dev/mcp-servers/productivity/outlook-mail): The Outlook Mail documentation page provides users with tools to read, write, and send emails using the Outlook API, enabling seamless email management. It outlines various functionalities, including creating, updating, and sending draft emails, as well as listing emails in a user's
- [OutlookMail Reference](https://docs.arcade.dev/mcp-servers/productivity/outlook-mail/reference): The OutlookMail Reference documentation provides a comprehensive list of enumerations, folder names, email filter properties, and filter operators used in the OutlookMail MCP Server. It helps users understand and utilize these elements effectively for managing and filtering emails within the OutlookMail environment
- [page](https://docs.arcade.dev/mcp-servers/productivity/dropbox/reference): This documentation page provides a comprehensive list of item categories used in Dropbox, including types such as image, document, PDF, spreadsheet, presentation, audio, video, folder, and paper. It helps users understand the classification of files within the Dropbox ecosystem for
- [Sharepoint](https://docs.arcade.dev/mcp-servers/productivity/sharepoint): This documentation page provides a comprehensive guide for users to interact with SharePoint through an MCP Server, enabling actions such as retrieving lists, items, pages, and metadata from SharePoint sites. It outlines various tools available for accessing and managing SharePoint resources efficiently
- [XeroApi](https://docs.arcade.dev/mcp-servers/productivity/xero-api): The XeroApi documentation provides tools for developers to interact with Xero's accounting data via the Xero API, enabling the management of various accounting entities such as invoices, payments, and financial reports. Users can access, create, and manage resources,

## MCP Servers - Sales

- [Hubspot](https://docs.arcade.dev/mcp-servers/sales/hubspot): This documentation page provides users with tools and guidance for integrating and automating interactions with HubSpot CRM through the Hubspot MCP Server. It details various functionalities, such as creating and managing contacts, deals, and activities, enabling agents to efficiently log interactions and
- [Hubspot Reference](https://docs.arcade.dev/mcp-servers/sales/hubspot/reference): The Hubspot Reference documentation provides a comprehensive list of enumerations related to various tools within the Hubspot MCP Server, including call directions, email statuses, meeting outcomes, communication channels, activity types, sort orders, deal types, and deal priorities. This
- [Salesforce CRM](https://docs.arcade.dev/mcp-servers/sales/salesforce): This documentation page provides guidance on using the Arcade Salesforce CRM MCP Server, which enables users to interact with Salesforce data, including accounts, leads, and contacts. It outlines the necessary steps to create a custom Salesforce Auth Provider, self-host the Arcade Engine,

## MCP Servers - Search

- [Google Finance](https://docs.arcade.dev/mcp-servers/search/google_finance): This documentation page provides users with the tools and instructions to access real-time and historical stock data from Google Finance using the Arcade platform. It outlines two main functionalities: retrieving current stock summaries and fetching historical stock data over specified time windows. Additionally, it includes
- [Google Flights](https://docs.arcade.dev/mcp-servers/search/google_flights): This documentation page provides users with the tools and instructions needed to integrate Google Flights search functionality into their applications using the Arcade platform. It specifically focuses on enabling one-way flight searches, detailing the required parameters and optional settings for customizing search results. Additionally, it
- [Google Hotels](https://docs.arcade.dev/mcp-servers/search/google_hotels): The Google Hotels documentation provides users with the tools and information necessary to integrate hotel search functionality into their applications using the Arcade platform. It details how to utilize the Google Hotels API to retrieve hotel search results based on various parameters, such as location, check-in
- [Google Jobs](https://docs.arcade.dev/mcp-servers/search/google_jobs): This documentation page provides users with tools to integrate Google Jobs functionality into their applications, allowing them to search for job openings through a simple API. It outlines the available tools, parameters for customizing searches, and authentication requirements. Users can also learn how to manage
- [Google Maps](https://docs.arcade.dev/mcp-servers/search/google_maps): This documentation page provides tools for integrating Google Maps functionality into agents and AI applications, specifically enabling users to obtain directions between two locations using either addresses or latitude/longitude coordinates. It outlines available tools, their parameters, and includes code examples in Python and Java
- [Google News](https://docs.arcade.dev/mcp-servers/search/google_news): This documentation page provides users with tools and guidance for integrating Google News search functionality into their agents and AI applications. It details the parameters and configurations needed to perform news searches, including options for language and country settings, and offers code examples for implementation in Python
- [Google Search](https://docs.arcade.dev/mcp-servers/search/google_search): This documentation page provides users with the tools and instructions necessary to enable agents to perform Google searches using the Arcade Search MCP Server and SerpAPI. It outlines how to utilize the GoogleSearch.Search tool to retrieve organic search results, including required parameters and authentication
- [Google Shopping Search](https://docs.arcade.dev/mcp-servers/search/google_shopping): The Google Shopping Search documentation provides users with the tools and instructions needed to integrate product search functionality from Google Shopping into their agents and AI applications. It details how to use the GoogleShopping.SearchProducts tool, including required parameters and authentication setup, enabling users to
- [Walmart Search](https://docs.arcade.dev/mcp-servers/search/walmart): The Walmart Search documentation provides tools for developers to create agents and AI applications that can search for products on Walmart and retrieve detailed information about them. It outlines the available functionalities, including searching for products and obtaining product details, along with necessary parameters and code examples
- [YouTube Search](https://docs.arcade.dev/mcp-servers/search/youtube): This documentation page provides users with tools to integrate YouTube video search and details retrieval into their applications using the Arcade YouTube Search MCP Server. It outlines how to search for videos and obtain specific video details through API calls, including required parameters and examples in

## MCP Servers - Social Communication

- [Arcade for Slack](https://docs.arcade.dev/mcp-servers/social-communication/slack/install): The documentation page for "Arcade for Slack" provides users with guidance on integrating Arcade's AI tools into their Slack workspace, enabling efficient communication and information management. It outlines the installation process, functionalities such as sending messages and generating content, and emphasizes the
- [Arcade for Zoom](https://docs.arcade.dev/mcp-servers/social-communication/zoom/install): The "Arcade for Zoom" documentation page guides users on integrating Arcade's AI tools with their Zoom accounts to enhance meeting management and information retrieval. It outlines the functionalities available, such as listing upcoming meetings and retrieving invitation details, while also providing instructions for
- [Discord](https://docs.arcade.dev/mcp-servers/social-communication/discord): This documentation page provides guidance on configuring and using the Discord authentication provider with Arcade, enabling users to call the Discord API on behalf of a user. It outlines the steps for creating a Discord app, setting up OAuth in the Arcade Dashboard, and implementing Discord
- [Environment Variables](https://docs.arcade.dev/mcp-servers/social-communication/slack/environment-variables): This documentation page provides guidance on configuring environment variables for optimizing Slack API interactions within tools. Users can learn to adjust settings for maximum concurrent requests, pagination size limits, and pagination timeout to enhance performance and manage API response handling effectively.
- [LinkedIn](https://docs.arcade.dev/mcp-servers/social-communication/linkedin): This documentation page provides an overview of the Arcade LinkedIn MCP Server, which enables users to build agents and AI applications that can interact with LinkedIn, specifically allowing them to create text posts. It includes details on available tools, authentication requirements, and example
- [Microsoft Teams](https://docs.arcade.dev/mcp-servers/social-communication/microsoft-teams): This documentation page provides users with a comprehensive guide to the Microsoft Teams MCP Server, enabling them to efficiently manage teams, channels, and chats within Microsoft Teams. Users can learn to retrieve information, send messages, and manage users and teams, streamlining collaboration
- [MicrosoftTeams Reference](https://docs.arcade.dev/mcp-servers/social-communication/microsoft-teams/reference): The MicrosoftTeams Reference documentation provides a comprehensive overview of enumerations related to the MicrosoftTeams MCP Server, including types of match criteria and team membership classifications. Users can learn about specific values and their corresponding meanings, which aids in understanding and implementing functionalities within Microsoft
- [Reddit](https://docs.arcade.dev/mcp-servers/social-communication/reddit): This documentation page provides users with tools and guidance for interacting with Reddit through the Arcade Reddit MCP Server. Users can learn how to build agents and AI applications that can submit posts, comment on content, retrieve posts and comments, and check subreddit access, among
- [Reference](https://docs.arcade.dev/mcp-servers/social-communication/slack/reference): This documentation page provides a reference for enumerations related to conversation types used in the Slack MCP Server, including definitions for public channels, private channels, multi-person direct messages, and direct messages. Users can refer to this information to understand the different conversation types
- [Reference](https://docs.arcade.dev/mcp-servers/social-communication/twilio/reference): This documentation page provides a reference for the `arcade_twilio` package, which enables users to integrate Twilio for sending SMS and WhatsApp messages. It includes installation instructions, a brief description of the package, and detailed information about the two main
- [Slack](https://docs.arcade.dev/mcp-servers/social-communication/slack): This documentation page provides a comprehensive overview of the Slack MCP Server, which enables agents to interact with the Slack platform through various tools. Users can learn how to manage conversations, retrieve user information, send messages, and access metadata for channels and direct messages,
- [SlackApi](https://docs.arcade.dev/mcp-servers/social-communication/slack_api): The SlackApi documentation provides a comprehensive guide for administrators and developers to manage and automate various aspects of Slack workspaces, including user management, messaging, channel operations, and file sharing. It details the functionalities available through the Slack API, such as creating teams
- [SlackApi](https://docs.arcade.dev/mcp-servers/social-communication/slack-api): The SlackApi documentation page provides a comprehensive guide for administrators and developers to effectively manage and automate various aspects of Slack workspaces, including user management, messaging, channel operations, and file sharing. It outlines key functionalities, such as creating and managing teams,
- [Teams Reference](https://docs.arcade.dev/mcp-servers/social-communication/teams/reference): The Teams Reference documentation provides a comprehensive overview of enumerations related to Teams MCP Server tools, including types of matches and team membership classifications. It helps users understand the various match types, such as exact and partial matches, as well as the distinctions between direct
- [Twilio](https://docs.arcade.dev/mcp-servers/social-communication/twilio): This documentation page provides users with a comprehensive guide to utilizing Twilio's MCP Server for sending SMS and WhatsApp messages. It outlines the necessary prerequisites for setting up a Twilio account, configuration details, and offers practical usage examples to demonstrate the server's
- [X (formerly Twitter)](https://docs.arcade.dev/mcp-servers/social-communication/x): This documentation page provides a comprehensive guide for developers on how to utilize the Arcade X (formerly Twitter) MCP Server tools to interact with the X platform. Users can learn to perform various actions such as posting, replying to, and deleting tweets, as well
- [Zoom](https://docs.arcade.dev/mcp-servers/social-communication/zoom): This documentation page provides an overview of the Arcade Zoom MCP Server, which enables users to build agents and AI applications that interact with Zoom by listing upcoming meetings and retrieving meeting invitations. It details the available tools, their functionalities, and the authentication process required to

## Oai Agents

- [Arcade with OpenAI Agents](https://docs.arcade.dev/home/oai-agents/overview): This documentation page provides a comprehensive guide on integrating Arcade with the OpenAI Agents library, enabling users to enhance their AI agents with various tools such as Gmail, LinkedIn, and GitHub. It covers installation steps, key features, basic usage examples,
- [Or set it directly when initializing the client](https://docs.arcade.dev/home/oai-agents/use-arcade-tools): This documentation page provides a comprehensive guide for integrating Arcade tools into OpenAI Agents applications, detailing the setup process, configuration of API keys, and management of tools. Users will learn how to create and run agents with Arcade tools, handle authentication, and explore
- [Set your API key](https://docs.arcade.dev/home/oai-agents/user-auth-interrupts): This documentation page provides a comprehensive guide on managing user authorization for Arcade tools within OpenAI Agents applications. It covers the steps to obtain an API key, set up the environment, handle authorization errors, and manage the authorization flow, ensuring users can effectively integrate

## Quickstart

- [Arcade Quickstart](https://docs.arcade.dev/home/quickstart): The Arcade Quickstart documentation provides users with a step-by-step guide to install the Arcade client, authenticate their first tool, and execute a tool call, enabling them to build AI agents that can perform actions in real-world applications. It outlines prerequisites, installation

## Registry Early Access

- [The Arcade Registry](https://docs.arcade.dev/home/registry-early-access): The Arcade Registry documentation page provides an overview of the Arcade Registry, a platform for developers to share and monetize their tools for agentic applications. It explains how the registry collects real-time usage metrics and feedback to enhance tool effectiveness, while inviting users to participate

## Serve Tools

- [Deploying to the cloud with Arcade Deploy](https://docs.arcade.dev/home/serve-tools/arcade-deploy): This documentation page provides a step-by-step guide on how to deploy a worker using Arcade Deploy, including prerequisites such as Python and Arcade account setup. Users will learn to create a deployment configuration file, execute the deployment command, and list their deployed workers.

## Use Tools

- [Get Formatted Tool Definitions](https://docs.arcade.dev/home/use-tools/get-tool-definitions): This documentation page provides guidance on retrieving formatted tool definitions using the Arcade Client, allowing users to obtain single or multiple tool definitions in specific model provider formats, such as OpenAI. It also covers converting these tool definitions into Zod schemas for enhanced type safety
- [Types of Tools](https://docs.arcade.dev/home/use-tools/types-of-tools): This documentation page explains the two types of tools offered by Arcade: Starter tools and Optimized tools. It highlights the differences in design and functionality, emphasizing that Optimized tools are specifically tailored for AI-powered chat interfaces to improve performance, while Starter tools provide
- [What are tools?](https://docs.arcade.dev/home/use-tools/tools-overview): This documentation page provides an overview of tool calling in language models, explaining how users can leverage external tools through APIs to enhance the capabilities of AI models, such as performing calculations or retrieving data. It details the process of integrating these tools with the Arcade SDK

## Vercelai

- [page](https://docs.arcade.dev/home/vercelai/using-arcade-tools): This documentation page provides a comprehensive guide on integrating Arcade tools with the Vercel AI SDK, enabling users to enhance their AI applications with production-ready tools for popular services like Google and Slack. It outlines the steps for installation, API key setup, and
