# Arcade

> Arcade is an AI Tool-calling Platform. For the first time, AI can securely act on behalf of users through Arcade's authenticated integrations, or "tools" in AI lingo. Connect AI to email, files, calendars, and APIs to build assistants that don't just chat - they get work done. Start building in minutes with our pre-built connectors or custom SDK.

Arcade enables your AI agent to securely take real-world actions through user-specific permissions, pre-built MCP Servers for Gmail, Slack, GitHub, and more. You can also build your own agentic tools and MCP servers with our authoring and testing suite. Arcade is your tool engine, registry, and runtime.

## Getting Started

- [page](https://docs.arcade.dev/en/home.md): The Arcade Docs page serves as a comprehensive resource for users to access all necessary information about Arcade. It provides guidance and insights to help users effectively utilize the platform.

## Agentic Development

- [Agentic Development](https://docs.arcade.dev/en/home/agentic-development.md): This documentation page provides guidance on enhancing development efficiency by integrating AI tools with Arcade.dev's resources in IDEs. It explains how to utilize the LLMs.txt file format for accessing documentation and introduces Context7, a server that supplies up-to-date coding

## Api Keys

- [Getting Your API Key](https://docs.arcade.dev/en/home/api-keys.md): This documentation page guides users on how to obtain and manage their Arcade API key, detailing the steps for both the dashboard and CLI methods. It emphasizes the importance of securely storing the API key, as it serves as an administrator credential for accessing Arcade services.

## API Reference

- [Arcade API Reference](https://docs.arcade.dev/en/references/api.md): The Arcade API Reference documentation provides users with essential information on how to utilize the Arcade API, including the base URL for API requests and the requirement for a valid account. It features an interactive Swagger UI for exploring API endpoints and emphasizes adherence to the Terms of
- [Arcade MCP (MCP Server SDK) - Python Overview](https://docs.arcade.dev/en/references/mcp/python/overview.md): The documentation page provides an overview of the Arcade MCP (MCP Server SDK) for Python, detailing its minimal API designed for programmatically building MCP servers. It explains the core components, such as the `MCPApp` class, which facilitates server
- [Claude Desktop](https://docs.arcade.dev/en/references/mcp/python/clients/claude-desktop.md): This documentation page provides a comprehensive guide for setting up and configuring the Claude Desktop application with Arcade MCP servers. It covers prerequisites, quick setup options using Arcade CLI, manual configuration, advanced settings, troubleshooting common issues, and best practices for managing multiple servers and
- [Cursor IDE](https://docs.arcade.dev/en/references/mcp/python/clients/cursor.md): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with Cursor, an AI-powered IDE, to enhance development capabilities. It covers prerequisites, configuration methods, development workflows, integration features, best practices, troubleshooting tips, and a complete setup example.
- [Errors](https://docs.arcade.dev/en/references/mcp/python/errors.md): This documentation page provides an overview of domain-specific error types used in the MCP server and its components, detailing the exception hierarchy for improved error handling and debugging. It outlines various exceptions, such as `MCPError`, `ServerError`, and `Authorization
- [MCP Inspector](https://docs.arcade.dev/en/references/mcp/python/clients/mcp-inspector.md): The MCP Inspector documentation provides users with a comprehensive guide to install, configure, and utilize the MCP Inspector tool for debugging and testing MCP servers. It covers features such as interactive testing, protocol monitoring, and resource browsing, while also offering best practices for development
- [Middleware](https://docs.arcade.dev/en/references/mcp/python/middleware.md): This documentation page provides an overview of the Middleware component in the Arcade MCP Server SDK for Python, detailing how users can intercept and modify MCP requests and responses through a series of built-in and custom middleware handlers. It outlines the base classes, methods for processing
- [Server](https://docs.arcade.dev/en/references/mcp/python/server.md): This documentation page provides a reference for the `MCPServer` class in the Arcade MCP Python library, detailing its features and functionalities for hosting Arcade tools over MCP. Users can learn how to set up the server with middleware support, manage tools and resources
- [Settings](https://docs.arcade.dev/en/references/mcp/python/settings.md): This documentation page provides an overview of the global configuration and environment-driven settings for the Arcade MCP Server, detailing various settings containers such as MCPSettings, ServerSettings, and NotificationSettings. It includes methods for creating settings from environment variables, converting settings to a
- [Sharing your MCP server](https://docs.arcade.dev/en/references/mcp/python/sharing.md): This documentation page guides users on how to share their MCP server with others by creating secure tunnels and registering the server with Arcade. It outlines the necessary steps, including running the server, establishing a secure tunnel using options like ngrok or Cloudflare Tunnel,
- [Transport Modes](https://docs.arcade.dev/en/references/mcp/python/transports.md): This documentation page provides an overview of the different transport modes available for MCP servers, specifically focusing on stdio and HTTP transports. It outlines their characteristics, usage scenarios, and configuration options, helping users determine the best transport mode for their applications based on their
- [Types](https://docs.arcade.dev/en/references/mcp/python/types.md): This documentation page provides an overview of core Pydantic models and enums used in the MCP protocol, specifically detailing the `CallToolResult` and `SessionMessage` types. It guides users on how to construct JSON-RPC requests and responses, as
- [Visual Studio Code](https://docs.arcade.dev/en/references/mcp/python/clients/visual-studio-code.md): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with Visual Studio Code (VSCode) through various methods, including terminal integration, task runners, and launch configurations. It covers prerequisites, project setup, debugging tips, and best practices to enhance

## Arcade Cli

- [The Arcade CLI](https://docs.arcade.dev/en/home/arcade-cli.md): The Arcade CLI documentation provides users with instructions on how to install and utilize the Arcade command-line tool for managing Arcade deployments and toolkits. It includes detailed guidance on installation within a Python virtual environment and offers usage examples for various commands. Users can learn to

## Auth

- [Authorized Tool Calling](https://docs.arcade.dev/en/home/auth/auth-tool-calling.md): The "Authorized Tool Calling" documentation provides a comprehensive guide for developers on how to securely authorize and call external services using AI agents within the Arcade platform. It outlines the steps for initializing the client, obtaining user authorization, checking authorization status, and executing authorized
- [Checking Tool Authorization Status](https://docs.arcade.dev/en/home/auth/tool-auth-status.md): This documentation page provides a comprehensive guide on how to check the authorization status of tools before execution, helping users understand the necessary permissions and tool availability. It includes instructions for initializing the client in Python or JavaScript, as well as methods for checking the authorization
- [Direct Third-Party API Call](https://docs.arcade.dev/en/home/auth/call-third-party-apis-directly.md): This documentation page provides a comprehensive guide on how to retrieve an authorization token for directly calling third-party APIs, specifically using the Arcade platform and Google's Gmail API as an example. Users will learn to manage user authentication flows, handle authorization requests, and utilize tokens
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/en/home/auth/how-arcade-helps.md): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details the challenges of authentication for AI agents and describes how Arcade's authorization system, which supports OAuth 2.0, API keys, and
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/en/home/auth/how-arcade-helps.md): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details how Arcade's authorization system, which supports OAuth 2.0, API keys, and user tokens, enables AI agents to securely perform
- [Secure and Brand the Auth Flow in Production](https://docs.arcade.dev/en/home/auth/secure-auth-production.md): This documentation page guides users on how to secure and customize their authentication flows using Arcade.dev in production environments. It explains the use of the default Arcade user verifier for development and the implementation of a custom user verifier for production, ensuring user safety and control over

## Auth Providers

- [Asana](https://docs.arcade.dev/en/home/auth-providers/asana.md): This documentation page provides guidance on using the Asana authentication provider within the Arcade platform, enabling users to call Asana APIs on behalf of their applications. It outlines how to quickly set up the default Asana auth provider or configure custom app credentials for production
- [Atlassian](https://docs.arcade.dev/en/home/auth-providers/atlassian.md): This documentation page provides guidance on configuring a custom Atlassian Auth Provider for use with Arcade, enabling users to authenticate and interact with the Atlassian API. It outlines the steps to create an Atlassian app, set up OAuth credentials, and
- [Auth Providers](https://docs.arcade.dev/en/home/auth-providers.md): This documentation page provides a comprehensive registry of authentication providers available within the Arcade ecosystem, enabling users to securely connect Arcade tools to various data sources. It outlines the benefits of using Arcade's built-in auth providers versus configuring custom ones, including branding and rate limit
- [ClickUp](https://docs.arcade.dev/en/home/auth-providers/clickup.md): This documentation page provides guidance on configuring and using the ClickUp authentication provider with Arcade, enabling applications and custom tools to access the ClickUp API on behalf of users. It outlines the steps to create a ClickUp app, set up OAuth credentials, and
- [Discord](https://docs.arcade.dev/en/home/auth-providers/discord.md): This documentation page provides guidance on configuring a custom Discord authentication provider within the Arcade platform, enabling users to integrate Discord API calls in their applications and tools. It outlines the steps for creating a Discord app, setting up OAuth 2.0 credentials, and
- [Dropbox](https://docs.arcade.dev/en/home/auth-providers/dropbox.md): This documentation page provides guidance on configuring a custom Dropbox authentication provider within the Arcade platform, enabling users to call the Dropbox API on behalf of their applications. It outlines the steps for creating a Dropbox app, setting up OAuth 2.0 credentials, and
- [GitHub](https://docs.arcade.dev/en/home/auth-providers/github.md): This documentation page provides guidance on configuring GitHub authentication for tools and agents using the Arcade platform, enabling them to interact with GitHub APIs on behalf of users. It outlines the steps for creating a GitHub app, setting up app credentials, and integrating
- [Google](https://docs.arcade.dev/en/home/auth-providers/google.md): This documentation page provides guidance on configuring and using the Google authentication provider within the Arcade platform, enabling users to access Google/Google Workspace APIs on behalf of users. It outlines the steps for creating a Google app, setting up OAuth credentials, and integrating Google
- [Hubspot](https://docs.arcade.dev/en/home/auth-providers/hubspot.md): This documentation page provides guidance on using and configuring the Hubspot authentication provider within the Arcade platform, enabling users to call Hubspot APIs seamlessly. It outlines the steps for utilizing Arcade's default auth provider or configuring custom Hubspot app credentials, along with instructions
- [Linear](https://docs.arcade.dev/en/home/auth-providers/linear.md): This documentation page provides guidance on configuring and using the Linear authentication provider with Arcade, enabling users to call Linear APIs on behalf of users through their applications or custom tools. It outlines the steps for creating a Linear app, setting up OAuth2 credentials, and
- [LinkedIn](https://docs.arcade.dev/en/home/auth-providers/linkedin.md): This documentation page provides guidance on configuring and using the LinkedIn authentication provider with Arcade, enabling applications and custom tools to access LinkedIn APIs on behalf of users. It details the steps for creating a LinkedIn app, setting up app credentials, and implementing
- [Microsoft](https://docs.arcade.dev/en/home/auth-providers/microsoft.md): This documentation page provides guidance on creating and configuring a custom Microsoft Auth Provider for use with Arcade, enabling users to authenticate and call the Microsoft Graph API. It outlines the necessary steps to register a Microsoft app, set permissions, and integrate the app with Arcade
- [Notion](https://docs.arcade.dev/en/home/auth-providers/notion.md): This documentation page provides guidance on configuring and using the Notion authentication provider with Arcade, enabling applications and custom tools to access Notion APIs on behalf of users. It outlines the steps to create a Notion app, set up OAuth credentials, and implement
- [OAuth 2.0](https://docs.arcade.dev/en/home/auth-providers/oauth2.md): This documentation page provides guidance on configuring OAuth 2.0 for authorizing tools and agents with any OAuth 2.0-compatible API using Arcade. It outlines the steps for setting up the OAuth 2.0 provider in both the Arcade Cloud Engine
- [Reddit](https://docs.arcade.dev/en/home/auth-providers/reddit.md): This documentation page provides guidance on how to create and configure a custom Reddit Auth Provider for use with Arcade, enabling applications and tools to access the Reddit API on behalf of users. It outlines the necessary steps to set up Reddit app credentials, integrate them into
- [Salesforce](https://docs.arcade.dev/en/home/auth-providers/salesforce.md): This documentation page provides guidance on configuring the Salesforce auth provider for use with Arcade, enabling users to call Salesforce APIs through their applications or custom tools. It outlines the steps to create a Connected App in Salesforce, including necessary OAuth settings and environment variable configurations.
- [Slack](https://docs.arcade.dev/en/home/auth-providers/slack.md): This documentation page provides guidance on configuring the Slack authentication provider for use with Arcade, enabling tools and agents to interact with Slack APIs on behalf of users. It includes steps for creating a Slack app, setting up app credentials, and integrating Slack with the Arcade
- [Spotify](https://docs.arcade.dev/en/home/auth-providers/spotify.md): This documentation page provides guidance on configuring a custom Spotify Auth Provider within the Arcade platform, enabling users to authenticate and interact with the Spotify API on behalf of their users. It outlines the steps for creating a Spotify app, setting up OAuth credentials, and integrating
- [Twitch](https://docs.arcade.dev/en/home/auth-providers/twitch.md): This documentation page provides guidance on configuring a custom Twitch Auth Provider for use with Arcade, enabling users to authenticate and call the Twitch API on their behalf. It outlines the steps for creating a Twitch application, setting up OAuth credentials, and integrating Twitch authentication into
- [X](https://docs.arcade.dev/en/home/auth-providers/x.md): This documentation page provides guidance on configuring and using the X (Twitter) authentication provider within the Arcade platform, enabling users to call the X API on behalf of their users. It outlines the steps for creating an X app, setting up OAuth credentials, and
- [Zendesk](https://docs.arcade.dev/en/home/auth-providers/zendesk.md): This documentation page provides guidance on configuring a custom Zendesk authentication provider for use with Arcade, enabling users to call Zendesk APIs on behalf of a user. It outlines the steps necessary to create a Zendesk app, set up OAuth clients, and integrate
- [Zoom](https://docs.arcade.dev/en/home/auth-providers/zoom.md): This documentation page provides guidance on configuring a custom Zoom Auth Provider within the Arcade platform, enabling users to authenticate and call the Zoom API on behalf of users. It outlines the necessary steps to create a Zoom app, set up OAuth credentials, and integrate Zoom

## Build Tools

- [Add user authorization to your MCP tools](https://docs.arcade.dev/en/home/build-tools/create-a-tool-with-auth.md): This documentation page guides users on how to implement user authorization in their custom MCP tools using Arcade, OAuth, and various auth providers, such as Reddit. It provides step-by-step instructions for creating tools that require user authentication, including code examples and explanations of
- [Create an MCP tool with secrets](https://docs.arcade.dev/en/home/build-tools/create-a-tool-with-secrets.md): This documentation page guides users on how to create custom MCP tools that securely handle secrets using the Arcade platform. It covers the prerequisites, step-by-step instructions for accessing secrets from environment variables or `.env` files, and emphasizes best practices for security. Users
- [Creating an MCP Server with Arcade](https://docs.arcade.dev/en/home/build-tools/create-a-mcp-server.md): This documentation page provides a comprehensive guide for users to create, test, deploy, and publish a custom MCP Server using the Arcade tools. It outlines the necessary prerequisites, step-by-step instructions for installation and server creation, and highlights key features such as transport
- [Providing useful tool errors](https://docs.arcade.dev/en/home/build-tools/providing-useful-tool-errors.md): This documentation page teaches users how to effectively handle errors when building tools with Arcade MCP, emphasizing the importance of robust error management. It explains the automatic error adaptation process, outlines when to raise specific errors, and provides guidance on common error scenarios. By following
- [RetryableToolError in Arcade](https://docs.arcade.dev/en/home/build-tools/retry-tools-with-improved-prompt.md): This documentation page explains how to use the `RetryableToolError` in the Arcade Tool SDK to enhance tool calls by providing additional context for improved input parameters. It outlines when to raise this error and includes an example of its application in a Slack messaging
- [Understanding `Context` and tools](https://docs.arcade.dev/en/home/build-tools/tool-context.md): This documentation page explains the `Context` class in Arcade, which manages authorization and user information for tools that require authentication. It details how to utilize various runtime features such as logging, secrets management, user context, and progress reporting through the `Context`

## Changelog

- [Changelog](https://docs.arcade.dev/en/home/changelog.md): The Changelog documentation page provides users with a comprehensive overview of the latest updates and features added to Arcade.dev, including new toolkits, enhancements to MCP servers, and bug fixes. Users can track changes by date and access links to relevant documentation for further

## Contact Us

- [Contact Us](https://docs.arcade.dev/en/home/contact-us.md): The "Contact Us" documentation page provides users with various channels to seek support and connect with the Arcade team, including a Discord community for real-time assistance, GitHub for technical issues, and email for general inquiries. It also outlines resources for self-help

## Crewai

- [page](https://docs.arcade.dev/en/home/crewai/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into CrewAI applications, detailing the necessary prerequisites, setup, and configuration steps. Users will learn how to authorize and utilize these tools within their CrewAI agent teams, ensuring a tailored and efficient application
- [Provide the tool manager callback to the ArcadeToolManager](https://docs.arcade.dev/en/home/crewai/custom-auth-flow.md): This documentation page guides users through the process of creating a custom authentication flow for the ArcadeToolManager within their CrewAI agent team. It outlines the necessary prerequisites, environment setup, and configuration steps to implement a tailored authorization process, allowing for unique interfaces and

## Deployment

- [Engine Configuration](https://docs.arcade.dev/en/home/deployment/engine-configuration.md): This documentation page provides enterprise customers with advanced guidance on configuring the Arcade Engine for self-hosting, including installation methods and detailed explanations of the engine's configuration and environment files. Users will learn how to customize settings through the `engine.yaml` and `engine
- [On-premise MCP Servers](https://docs.arcade.dev/en/home/deployment/on-prem-mcp.md): This documentation page provides guidance on deploying on-premises MCP servers within a hybrid architecture, allowing users to leverage Arcade's cloud infrastructure while maintaining control over their local environment and sensitive data. It outlines the setup process, connection requirements, and benefits of using on

## Evaluate Tools

- [Evaluate tools](https://docs.arcade.dev/en/home/evaluate-tools/create-an-evaluation-suite.md): This documentation page provides a comprehensive guide on how to create and run an evaluation suite for custom tools using Arcade, ensuring they function correctly with the AI assistant. Users will learn to define evaluation cases, utilize various critic classes to assess performance, and execute the
- [Run evaluations with the Arcade CLI](https://docs.arcade.dev/en/home/evaluate-tools/run-evaluations.md): This documentation page guides users on how to run evaluations of tool-enabled language models using the Arcade CLI. It provides detailed instructions on utilizing the `arcade evals` command to execute evaluation suites, customize the evaluation process with various options, and interpret the
- [Why evaluate tools?](https://docs.arcade.dev/en/home/evaluate-tools/why-evaluate-tools.md): This documentation page explains the importance of evaluating tools used by language models in production environments, focusing on their efficiency in tool utilization and intent understanding. It outlines a comprehensive evaluation framework that assesses the model's ability to select and execute the correct tools for specific tasks

## Faq

- [Frequently Asked Questions](https://docs.arcade.dev/en/home/faq.md): This documentation page provides answers to common questions about the Arcade platform, including how to create and contribute tools, the differences between API keys, and authentication processes. It guides users in building their own tools, collaborating effectively with project API keys, and understanding OAuth

## Glossary

- [Arcade Glossary](https://docs.arcade.dev/en/home/glossary.md): The Arcade Glossary documentation provides definitions and explanations of key terms related to the Arcade platform, including concepts like agents, tools, and the MCP server. It helps users understand the components and functionalities necessary for building, testing, and deploying applications that utilize large

## Google Adk

- [Arcade with Google ADK](https://docs.arcade.dev/en/home/google-adk/overview.md): This documentation page provides a comprehensive guide for integrating the `google-adk-arcade` package with Arcade, enabling users to enhance their AI agents with various tools such as Google Mail and GitHub. It covers installation, key features, basic usage examples
- [Initialize the Arcade client](https://docs.arcade.dev/en/home/google-adk/use-arcade-tools.md): This documentation page provides a comprehensive guide for integrating Arcade tools into Google ADK applications, detailing the necessary prerequisites, environment setup, and configuration steps. Users will learn how to create and manage Arcade tools, authorize them for agents, and run these agents within

## Hosting Overview

- [Hosting Options](https://docs.arcade.dev/en/home/hosting-overview.md): This documentation page provides an overview of the various hosting options for Arcade, including the benefits of using the cloud service and instructions for deploying on-premise solutions. Users can learn how to connect their tools to local resources, customize authentication experiences, and set up

## Langchain

- [Fetch the "ScrapeUrl" tool from the "Firecrawl" MCP Server](https://docs.arcade.dev/en/home/langchain/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into LangGraph applications, detailing the necessary prerequisites, environment setup, API key configuration, and tool management. Users will learn how to create and manage AI models, configure agents, and stream responses while
- [Import necessary classes and modules](https://docs.arcade.dev/en/home/langchain/user-auth-interrupts.md): This documentation page guides users in creating a LangGraph workflow that incorporates user authorization for specific Arcade tools, ensuring that only authorized tools are accessible to the language model. It provides step-by-step instructions on setting up the environment, configuring API keys, defining workflow
- [page](https://docs.arcade.dev/en/home/langchain/auth-langchain-tools.md): This documentation page provides a step-by-step guide for users to authorize existing LangChain tools, such as the `GmailToolkit`, using the Arcade platform. It outlines the necessary prerequisites, installation of required packages, and detailed coding examples in both Python and

## Mastra

- [Create a new Mastra project](https://docs.arcade.dev/en/home/mastra/use-arcade-tools.md): This documentation page provides a step-by-step guide for integrating Arcade tools into a new Mastra project, enabling users to leverage these tools within their Mastra applications. It covers prerequisites, project setup, API key configuration, and interaction methods with the Mastra
- [page](https://docs.arcade.dev/en/home/mastra/overview.md): This documentation page provides guidance on integrating Arcade's tool ecosystem with Mastra applications, enabling users to enhance their Mastra agents with access to various third-party services. It outlines the benefits of tool management, including simplified discovery and execution, and explains the mechanisms
- [page](https://docs.arcade.dev/en/home/mastra/user-auth-interrupts.md): This documentation page provides guidance on managing user-specific authorization for Arcade tools within Mastra applications, enabling dynamic tool loading and tailored authentication flows for each user. It outlines the steps to configure agents, create API endpoints for tool access, and enhance user experience during

## Mcp Clients

- [page](https://docs.arcade.dev/en/home/mcp-clients/cursor.md): This documentation page indicates that content is forthcoming and currently does not provide any information or guidance for users.
- [Use Arcade in Visual Studio Code](https://docs.arcade.dev/en/home/mcp-clients/visual-studio-code.md): This documentation page provides a step-by-step guide for connecting Visual Studio Code to Arcade.dev's MCP server, enabling users to utilize available tools within the IDE. It outlines the setup process, including downloading Visual Studio Code, adding the MCP server, and using
- [Use Arcade with Claude Desktop](https://docs.arcade.dev/en/home/mcp-clients/claude-desktop.md): This documentation page provides a step-by-step guide for connecting Claude Desktop to a local Arcade server, enabling users to leverage Arcade tools within the application. It outlines the prerequisites, installation of dependencies, and configuration necessary for successful integration. By following these instructions,

## MCP Servers

- [page](https://docs.arcade.dev/en/mcp-servers.md): This documentation page provides a registry of all MCP Servers available within the Arcade ecosystem, helping users locate and access various toolkits. It serves as a centralized resource for understanding the available server options.

## MCP Servers - Contribute A Server

- [How to contribute a MCP Server](https://docs.arcade.dev/en/mcp-servers/contribute-a-server.md): This documentation page provides a step-by-step guide for developers on how to contribute their MCP Server to the Arcade documentation, enhancing visibility and usability for others. It outlines prerequisites, submission procedures via a pull request, and the review process to ensure successful integration.

## MCP Servers - Customer Support

- [Zendesk](https://docs.arcade.dev/en/mcp-servers/customer-support/zendesk.md): This documentation page provides a comprehensive guide for using the Zendesk MCP Server, which enables agents to efficiently manage customer support tickets and knowledge base articles. Users can learn how to list, comment on, and mark tickets as solved, as well as search for
- [Zendesk Reference](https://docs.arcade.dev/en/mcp-servers/customer-support/zendesk/reference.md): The Zendesk Reference documentation provides a comprehensive list of enumerations related to ticket statuses, sorting orders, and article sorting criteria used in the Zendesk MCP Server. Users can refer to this page to understand the specific values and options available for managing tickets and

## MCP Servers - Databases

- [Clickhouse](https://docs.arcade.dev/en/mcp-servers/databases/clickhouse.md): This documentation page provides a comprehensive guide for using the Arcade Clickhouse MCP Server, which allows users to interact with Clickhouse databases in a read-only capacity. It outlines key features such as schema discovery, table exploration, and safe query execution, along with
- [Clickhouse](https://docs.arcade.dev/en/mcp-servers/databases/postgres/clickhouse.md): This documentation page provides users with a comprehensive guide to the Arcade Clickhouse MCP Server, which enables agents to interact with Clickhouse databases in a read-only capacity. Users can learn how to discover database schemas, explore table structures, and execute SELECT queries safely
- [MongoDB](https://docs.arcade.dev/en/mcp-servers/databases/mongodb.md): This documentation page provides an overview of the Arcade MongoDB MCP Server, which allows users to interact with MongoDB databases in a read-only capacity. It outlines key features such as database discovery, collection exploration, schema inference, and safe query execution, along
- [MongoDB](https://docs.arcade.dev/en/mcp-servers/databases/postgres/mongodb.md): This documentation page provides an overview of the Arcade MongoDB MCP Server, which allows users to interact with MongoDB databases in a read-only capacity. It outlines key features such as database discovery, collection exploration, schema inference, and safe query execution, enabling
- [Postgres](https://docs.arcade.dev/en/mcp-servers/databases/postgres.md): This documentation page provides an overview of the Arcade Postgres MCP Server, which enables agents to interact with PostgreSQL databases in a read-only capacity. Users can learn to discover database schemas, explore table structures, and execute SELECT queries safely, while also understanding

## MCP Servers - Development

- [E2B](https://docs.arcade.dev/en/mcp-servers/development/e2b.md): The E2B documentation page provides users with tools and guidance for running code in a sandboxed environment, enabling the development of agents and AI applications. It details two primary functionalities: executing code across various programming languages and generating static matplotlib charts. Users can
- [Firecrawl](https://docs.arcade.dev/en/mcp-servers/development/firecrawl.md): The Firecrawl documentation provides users with tools and guidance for enabling agents to scrape, crawl, and map websites effectively. It outlines various functionalities, such as scraping URLs, crawling websites, retrieving crawl statuses, and managing ongoing crawls, all accessible via an
- [GitHub](https://docs.arcade.dev/en/mcp-servers/development/github.md): This documentation page provides users with tools and guidance for integrating and interacting with GitHub repositories, issues, and pull requests through the Arcade GitHub MCP Server. It outlines available functionalities, such as creating issues, managing pull requests, and accessing repository information,
- [Reference for Firecrawl Toolkit](https://docs.arcade.dev/en/mcp-servers/development/firecrawl/reference.md): The Firecrawl Toolkit documentation provides a reference for users on the various output formats available for scraped web pages, including Markdown, HTML, raw HTML, links, and screenshots. It helps users understand how to utilize these formats for their web scraping needs effectively.
- [Reference for GitHub Toolkit](https://docs.arcade.dev/en/mcp-servers/development/github/reference.md): The GitHub Toolkit Reference documentation provides users with detailed specifications for sorting and filtering pull requests, review comments, and repository activities based on various properties and states. It outlines options for sorting by creation date, update date, popularity, and more, while also

## MCP Servers - Entertainment

- [Imgflip](https://docs.arcade.dev/en/mcp-servers/entertainment/imgflip.md): The Imgflip documentation page provides users with tools to create and manage memes using the Imgflip API. It outlines functionalities such as searching for meme templates, retrieving popular memes, and creating custom memes with specific text and formatting options. Users can easily integrate these
- [Imgflip](https://docs.arcade.dev/en/mcp-servers/entertainment/spotify/imgflip.md): The Imgflip documentation page provides users with tools to create and manage memes using the Imgflip API, enabling functionalities such as searching for meme templates, retrieving popular templates, and creating custom memes. It outlines the available tools, their parameters, and includes code
- [Spotify](https://docs.arcade.dev/en/mcp-servers/entertainment/spotify.md): This documentation page provides a comprehensive guide for using the Arcade Spotify MCP Server, which enables agents to interact with Spotify tracks through various tools. Users can learn how to retrieve track information, control playback, and search the Spotify catalog, all while requiring a self
- [Twitch auth provider](https://docs.arcade.dev/en/mcp-servers/entertainment/twitch.md): This documentation page provides guidance on creating and configuring a custom Twitch Auth Provider for use with Arcade, enabling applications and tools to call the Twitch API on behalf of users. It outlines the necessary steps to set up a Twitch application, integrate it with the Arcade

## MCP Servers - Payments

- [Stripe](https://docs.arcade.dev/en/mcp-servers/payments/stripe.md): This documentation page provides users with tools and guidance for interacting with the Stripe API, enabling the creation and management of customers, products, invoices, and payment processes. It includes detailed descriptions of available tools, their parameters, and code examples for implementation in Python
- [StripeApi](https://docs.arcade.dev/en/mcp-servers/payments/stripe_api.md): The StripeApi documentation provides tools for developers to interact with the Stripe API, enabling them to manage various aspects of accounts, customers, payments, billing, and reporting. Users can perform a wide range of operations, including retrieving account details, managing payment methods

## MCP Servers - Productivity

- [Asana](https://docs.arcade.dev/en/mcp-servers/productivity/asana.md): This documentation page provides a comprehensive overview of the Arcade Asana MCP Server, which enables users to build agents and AI applications that interact with Asana tasks, projects, and workspaces. It outlines available tools for managing teams, creating and updating tasks,
- [Asana Reference](https://docs.arcade.dev/en/mcp-servers/productivity/asana/reference.md): The Asana Reference documentation provides users with a comprehensive list of enumerations related to tag colors, task sorting options, and sort orders used in the Asana MCP Server. This reference aids developers in understanding and implementing these enumerations effectively within their tools.
- [BoxApi](https://docs.arcade.dev/en/mcp-servers/productivity/box-api.md): The BoxApi documentation provides users with tools to effectively manage and automate Box content, including file handling, metadata management, collaboration, document generation, and enterprise settings. It outlines key functionalities such as managing users and groups, handling Box Sign requests, and retrieving
- [Clickup](https://docs.arcade.dev/en/mcp-servers/productivity/clickup.md): This documentation page provides users with tools and guidance for interacting with ClickUp workspaces, enabling the creation, modification, and management of tasks, comments, and user assignments. It outlines various functions available for building agents and applications that can efficiently navigate and manipulate
- [Clickup Reference](https://docs.arcade.dev/en/mcp-servers/productivity/clickup/reference.md): The Clickup Reference documentation provides users with a comprehensive overview of enumerations related to task management within the Clickup MCP Server. It details the available values for task priorities, filter scopes, task ordering, and comment resolutions, enabling users to effectively utilize the
- [Close.io](https://docs.arcade.dev/en/mcp-servers/productivity/closeio.md): This documentation page for Close.io provides an overview of the CRM platform, focusing on managing leads, contacts, and deals. It serves as a preliminary introduction to the features and functionalities users can expect from Close.io. Further details are anticipated to be available soon
- [Confluence](https://docs.arcade.dev/en/mcp-servers/productivity/confluence.md): This documentation page provides a comprehensive guide for using the Arcade Confluence MCP Server, which enables users to build agents and AI applications that interact with Confluence. It outlines available tools for managing pages, spaces, and attachments, as well as searching for content
- [Dropbox](https://docs.arcade.dev/en/mcp-servers/productivity/dropbox.md): This documentation page provides users with tools to interact with Dropbox, enabling them to browse, search, and download files and folders easily. It outlines specific functionalities such as listing items in a folder, searching for files, and downloading files, along with code examples
- [Gmail](https://docs.arcade.dev/en/mcp-servers/productivity/gmail.md): This documentation page provides a comprehensive guide to the Arcade Gmail MCP Server, enabling users to build agents and AI applications that can send, read, and manage emails through the Gmail API. It outlines various tools available for tasks such as composing drafts, deleting emails
- [Gmail Reference](https://docs.arcade.dev/en/mcp-servers/productivity/gmail/reference.md): The Gmail Reference documentation provides a list of enumerations related to the Gmail MCP Server, specifically detailing options for replying to emails and defining date ranges for email retrieval. Users can learn how to utilize these enumerations effectively in their applications. This reference serves as
- [Google Calendar](https://docs.arcade.dev/en/mcp-servers/productivity/google-calendar.md): This documentation page provides a comprehensive guide for using the Arcade Google Calendar MCP Server, enabling users to build agents and applications that interact with Google Calendar. It outlines available tools for managing calendars and events, including listing calendars, creating and updating events, and finding
- [Google Contacts](https://docs.arcade.dev/en/mcp-servers/productivity/google-contacts.md): This documentation page provides a comprehensive guide for using the Arcade Google Contacts MCP Server, enabling users to build agents and AI applications that can create and search for contacts in Google Contacts. It details available tools, including methods for searching contacts by name or email and
- [Google Docs](https://docs.arcade.dev/en/mcp-servers/productivity/google-docs.md): This documentation page provides a comprehensive overview of the Arcade Google Docs MCP Server, which enables users to build agents and AI applications that interact with Google Docs. It outlines available tools for creating, updating, listing, and deleting documents, as well as managing comments
- [Google Drive](https://docs.arcade.dev/en/mcp-servers/productivity/google-drive.md): This documentation page provides users with tools and instructions for interacting with Google Drive through the GoogleDrive MCP Server. Users can manage their files by retrieving the file structure, generating a Google File Picker URL for secure file selection, and searching for specific files. The
- [Google Sheets](https://docs.arcade.dev/en/mcp-servers/productivity/google-sheets.md): This documentation page provides a comprehensive overview of the Arcade Google Sheets MCP Server, which enables users to create and manipulate Google Sheets through various tools. Users can learn to perform actions such as creating spreadsheets, reading and writing data, and retrieving metadata, all while
- [Google Slides](https://docs.arcade.dev/en/mcp-servers/productivity/google-slides.md): This documentation page provides tools for interacting with Google Slides presentations, enabling users to create, comment on, and manage presentations through an API. Users can perform actions such as creating new presentations, adding slides, listing comments, and converting content to markdown format.
- [GoogleCalendar Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-calendar/reference.md): The GoogleCalendar Reference documentation provides a comprehensive list of enumerations related to event visibility, update options for sending notifications, and managing Google Meet integrations within the GoogleCalendar MCP Server. Users can utilize this reference to understand and implement various settings effectively in their applications
- [GoogleDocs Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-docs/reference.md): The GoogleDocs Reference documentation provides a comprehensive list of enumerations used in the GoogleDocs MCP Server, specifically focusing on sorting options (OrderBy) and document formats. Users can refer to this page to understand the different criteria available for organizing documents and the
- [GoogleDrive Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-drive/reference.md): The GoogleDrive Reference documentation provides a comprehensive list of enumerations related to ordering and file types used in the GoogleDrive MCP Server. Users can learn about various sorting options, such as created time and modified time, as well as different file types like spreadsheets
- [GoogleSheets Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-sheets/reference.md): The GoogleSheets Reference documentation provides a comprehensive list of enumerations used in the GoogleSheets MCP Server, specifically for ordering data. Users can learn about various order options, such as sorting by creation time, modification time, and other criteria, to effectively manage
- [Jira](https://docs.arcade.dev/en/mcp-servers/productivity/jira.md): This documentation page provides a comprehensive overview of the Jira MCP Server, which enables users and AI applications to efficiently manage Jira issues and projects through various functionalities, such as creating, updating, and searching for issues, as well as managing labels and attachments. It
- [Jira Environment Variables](https://docs.arcade.dev/en/mcp-servers/productivity/jira/environment-variables.md): This documentation page provides guidance on configuring key environment variables for optimizing Jira API interactions within the Arcade platform. Users will learn how to set limits on concurrent requests, manage API request timeouts, and control caching behavior to enhance performance during tool execution. Each variable
- [Jira Reference](https://docs.arcade.dev/en/mcp-servers/productivity/jira/reference.md): This documentation page provides a reference for enumerations used in the Jira MCP Server, specifically detailing the various sprint states, priority scheme order options, and issue comment order options available through the Jira API. Users can utilize this information to effectively filter and organize s
- [Linear](https://docs.arcade.dev/en/mcp-servers/productivity/linear.md): This documentation page provides users with tools to interact with Linear's issue tracking and team management features through the Arcade Linear MCP Server. Users can retrieve detailed information about specific issues and team data, enabling them to analyze and read relevant information without making any modifications.
- [Notion](https://docs.arcade.dev/en/mcp-servers/productivity/notion.md): This documentation page provides users with a comprehensive guide to the Arcade Notion MCP Server, which enables the creation of agents and AI applications that interact with Notion. Users can learn how to utilize various tools to retrieve page content, create new pages, search
- [Obsidian](https://docs.arcade.dev/en/mcp-servers/productivity/obsidian.md): This documentation page provides an overview of the Arcade Obsidian Toolkit, a community-contributed MCP Sever verified by the Arcade team. It directs users to the GitHub repository for further information and resources related to the toolkit.
- [Outlook Calendar](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-calendar.md): This documentation page provides users with tools and guidance for integrating with the Outlook Calendar API, enabling them to create, list, and retrieve calendar events. It outlines available functionalities, including user information retrieval and event management, along with example code snippets for implementation in
- [Outlook Mail](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-mail.md): The Outlook Mail documentation page provides users with tools and guidance for integrating email functionalities using the Outlook API. It enables agents to read, write, and send emails, offering various pre-built tools for actions like composing drafts, sending emails, and listing mailbox contents
- [OutlookMail Reference](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-mail/reference.md): The OutlookMail Reference documentation provides a comprehensive list of enumerations, well-known folder names, email filter properties, and filter operators used in the OutlookMail MCP Server. This page helps users understand and utilize these elements effectively for managing and filtering emails within the
- [page](https://docs.arcade.dev/en/mcp-servers/productivity/dropbox/reference.md): This documentation page provides a comprehensive list of item categories used in Dropbox, including types such as image, document, PDF, spreadsheet, presentation, audio, video, folder, and paper. It helps users understand the classification of files and folders within the Dropbox
- [Sharepoint](https://docs.arcade.dev/en/mcp-servers/productivity/sharepoint.md): This documentation page provides a comprehensive guide for users to interact with SharePoint through the SharePoint MCP Server, enabling agents and chatbots to efficiently access and manage SharePoint resources. Users can learn how to retrieve lists, items, pages, and metadata,
- [XeroApi](https://docs.arcade.dev/en/mcp-servers/productivity/xero-api.md): The XeroApi documentation page provides tools for developers to interact with Xero's accounting data using OAuth2 authentication. Users can access, manage, and retrieve various accounting entities and reports, as well as perform actions like creating or deleting resources and managing organizational

## MCP Servers - Sales

- [Hubspot](https://docs.arcade.dev/en/mcp-servers/sales/hubspot.md): This documentation page provides a comprehensive overview of tools available for integrating with HubSpot CRM, enabling users to automate tasks such as logging interactions, managing contacts, and querying data. Users can learn how to utilize various functionalities, including creating activities, managing deals,
- [Hubspot Reference](https://docs.arcade.dev/en/mcp-servers/sales/hubspot/reference.md): The Hubspot Reference documentation provides a comprehensive list of enumerations related to various tools within the Hubspot MCP Server, including call directions, email statuses, meeting outcomes, communication channels, activity types, sort orders, deal types, and deal priorities. This
- [Salesforce CRM](https://docs.arcade.dev/en/mcp-servers/sales/salesforce.md): This documentation page provides guidance on using the Arcade Salesforce CRM MCP Server, which enables users to interact with Salesforce accounts, leads, and contacts through pre-built tools. It outlines the steps required to create a custom Salesforce Auth Provider, self-host the Arcade Engine

## MCP Servers - Search

- [Google Finance](https://docs.arcade.dev/en/mcp-servers/search/google_finance.md): This documentation page provides users with the tools and guidance needed to retrieve real-time and historical stock data from Google Finance using the Arcade platform. It details two main functionalities: fetching current stock summaries and historical stock data, along with example code snippets for implementation.
- [Google Flights](https://docs.arcade.dev/en/mcp-servers/search/google_flights.md): This documentation page provides users with the tools and instructions to integrate the Arcade Google Flights MCP Server for searching one-way flights. It details the required parameters for flight searches, available options for sorting and filtering results, and offers code examples in Python and JavaScript
- [Google Hotels](https://docs.arcade.dev/en/mcp-servers/search/google_hotels.md): The Google Hotels documentation page provides users with the tools and information necessary to build intelligent agents that can search for hotels worldwide using the Google Hotels API. It details the parameters for the hotel search functionality, including location, dates, and pricing options, and offers
- [Google Jobs](https://docs.arcade.dev/en/mcp-servers/search/google_jobs.md): This documentation page provides users with tools and guidance for integrating Google Jobs into their applications, enabling them to search for job openings using the Arcade Google Jobs MCP Server. It details the available API functionalities, including parameters for customizing job searches, and offers examples in
- [Google Maps](https://docs.arcade.dev/en/mcp-servers/search/google_maps.md): This documentation page provides tools for integrating Google Maps functionality into agents and AI applications, specifically enabling users to obtain directions between two locations using either addresses or latitude/longitude coordinates. It includes detailed descriptions of available tools, parameters for API calls, and example code
- [Google News](https://docs.arcade.dev/en/mcp-servers/search/google_news.md): This documentation page provides users with tools to search for news stories using Google News through the Arcade Google News MCP Server. It outlines the available functionalities, such as the `GoogleNews.SearchNews` tool, and details the required parameters and authentication process. Additionally
- [Google Search](https://docs.arcade.dev/en/mcp-servers/search/google_search.md): This documentation page provides users with the tools and guidance necessary to enable agents to perform Google searches using SerpAPI through the Arcade Search MCP Server. It outlines the available functionality, specifically the GoogleSearch.Search tool, and includes instructions for authentication and example code
- [Google Shopping Search](https://docs.arcade.dev/en/mcp-servers/search/google_shopping.md): The Google Shopping Search documentation provides users with tools and guidance to integrate product search capabilities from Google Shopping into their agents and AI applications. It outlines how to utilize the `GoogleShopping.SearchProducts` tool, including required parameters and authentication details, enabling users to
- [Walmart Search](https://docs.arcade.dev/en/mcp-servers/search/walmart.md): The Walmart Search documentation provides tools for developers to create agents and AI applications that can search for products and retrieve product details from Walmart. It outlines the available functionalities, including the parameters for searching products and obtaining product details, as well as authentication requirements. Users
- [YouTube Search](https://docs.arcade.dev/en/mcp-servers/search/youtube.md): This documentation page provides users with tools to enable agents to search for videos on YouTube and retrieve video details using the Arcade YouTube Search MCP Server. It outlines the available functionalities, including the parameters required for searching and obtaining video information, as well as

## MCP Servers - Social Communication

- [Arcade for Slack](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/install.md): The Arcade for Slack documentation provides users with guidance on integrating Arcade's AI tools into their Slack workspace, enabling efficient communication and task management. It outlines the installation process, features such as message generation and information retrieval, and emphasizes the importance of reviewing AI-generated
- [Arcade for Zoom](https://docs.arcade.dev/en/mcp-servers/social-communication/zoom/install.md): The "Arcade for Zoom" documentation page provides users with guidance on integrating Arcade's AI tools with their Zoom accounts to enhance meeting management and information retrieval. Users can learn how to connect Arcade to Zoom, utilize various features such as listing upcoming meetings and
- [Discord](https://docs.arcade.dev/en/mcp-servers/social-communication/discord.md): This documentation page provides guidance on configuring and using the Discord authentication provider with Arcade, enabling users to call the Discord API on behalf of a user. It outlines the steps to create a Discord application, set up OAuth credentials, and integrate Discord auth into app
- [Environment Variables](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/environment-variables.md): This documentation page provides guidance on configuring environment variables related to Slack API interactions, specifically `SLACK_MAX_CONCURRENT_REQUESTS`, `MAX_PAGINATION_SIZE_LIMIT`, and `MAX_PAGINATION_TIMEOUT_SECONDS`. Users will learn how to adjust these settings
- [LinkedIn](https://docs.arcade.dev/en/mcp-servers/social-communication/linkedin.md): This documentation page provides an overview of the Arcade LinkedIn MCP Server, which enables users to build agents and AI applications that interact with LinkedIn, specifically allowing them to create text posts. It includes details on available tools, authentication requirements, and example code
- [Microsoft Teams](https://docs.arcade.dev/en/mcp-servers/social-communication/microsoft-teams.md): This documentation page provides users with a comprehensive overview of the Microsoft Teams MCP Server, enabling them to effectively manage teams, channels, and chats within Microsoft Teams. Users can learn how to retrieve information, send messages, and search for users and messages, stream
- [MicrosoftTeams Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/microsoft-teams/reference.md): The MicrosoftTeams Reference documentation provides a comprehensive overview of enumerations used in the MicrosoftTeams MCP Server, detailing various match types and team membership classifications. Users can learn about specific enumeration values such as `PARTIAL_ALL`, `EXACT`, and `DIRECT
- [Reddit](https://docs.arcade.dev/en/mcp-servers/social-communication/reddit.md): This documentation page provides a comprehensive guide for using the Arcade Reddit MCP Server, which enables developers to create agents and AI applications that interact with Reddit. Users can learn how to perform various actions such as submitting posts, commenting, retrieving post data, and checking
- [Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/reference.md): This documentation page provides a reference for the enumerations used in the Slack MCP Server, specifically detailing the different types of conversations such as public channels, private channels, multi-person direct messages, and direct messages. Users can refer to this information to understand and
- [Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/twilio/reference.md): This documentation page provides a reference for the `arcade_twilio` package, which enables users to integrate Twilio services for sending SMS and WhatsApp messages. It includes installation instructions, a brief description of the package, and detailed usage information for the
- [Slack](https://docs.arcade.dev/en/mcp-servers/social-communication/slack.md): This documentation page provides a comprehensive overview of the Slack MCP Server, which enables agents and AI applications to interact with the Slack platform effectively. Users can learn how to manage conversations, retrieve user information, send messages, and access conversation metadata, thereby enhancing communication
- [SlackApi](https://docs.arcade.dev/en/mcp-servers/social-communication/slack_api.md): The SlackApi documentation provides a comprehensive guide for administrators and applications to effectively manage and interact with Slack workspaces using various API tools. Users can learn to automate tasks such as messaging, channel management, user operations, and file sharing, as well as perform
- [SlackApi](https://docs.arcade.dev/en/mcp-servers/social-communication/slack-api.md): The SlackApi documentation provides a comprehensive guide for administrators and applications to manage and interact with Slack workspaces through various functionalities, including user and team management, messaging, channel operations, and file sharing. Users can learn how to automate tasks, retrieve workspace settings
- [Teams Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/teams/reference.md): The Teams Reference documentation provides a comprehensive overview of enumerations related to Teams MCP Server tools, including various match types and team membership classifications. Users can learn about specific terms and their corresponding definitions, which aids in understanding how to implement and utilize these features effectively
- [Twilio](https://docs.arcade.dev/en/mcp-servers/social-communication/twilio.md): This documentation page provides users with a guide to using Twilio for sending SMS and WhatsApp messages through an MCP Server, including setup prerequisites, configuration details, and practical usage examples. It helps users establish their Twilio account, configure necessary credentials, and
- [X (formerly Twitter)](https://docs.arcade.dev/en/mcp-servers/social-communication/x.md): This documentation page provides a comprehensive guide for using the Arcade X MCP Server, which enables developers to create agents and AI applications that interact with X (formerly Twitter). Users can learn how to perform various actions such as posting, replying to, and deleting tweets
- [Zoom](https://docs.arcade.dev/en/mcp-servers/social-communication/zoom.md): This documentation page provides an overview of the Arcade Zoom MCP Server, which enables users to build agents and AI applications that interact with Zoom by listing upcoming meetings and retrieving meeting invitations. It details the available tools, their functionalities, and the authentication process required to

## Oai Agents

- [Arcade with OpenAI Agents](https://docs.arcade.dev/en/home/oai-agents/overview.md): This documentation page provides a comprehensive guide for integrating Arcade with the OpenAI Agents library, enabling users to enhance their AI agents with various tools such as Gmail, LinkedIn, and GitHub. It covers installation, key features, basic usage examples, and
- [Or set it directly when initializing the client](https://docs.arcade.dev/en/home/oai-agents/use-arcade-tools.md): This documentation page provides a comprehensive guide for integrating Arcade tools into OpenAI Agents applications, detailing the setup process, configuration of API keys, and management of tools. Users will learn how to create and run agents utilizing Arcade tools, handle authentication, and access
- [Set your API key](https://docs.arcade.dev/en/home/oai-agents/user-auth-interrupts.md): This documentation page provides a comprehensive guide on managing user authorization for Arcade tools within OpenAI Agents applications. It outlines the steps to set up an Arcade API key, handle authorization errors, and implement authorization flows, ensuring users can effectively manage tool access and permissions

## Quickstart

- [Arcade Quickstart](https://docs.arcade.dev/en/home/quickstart.md): The Arcade Quickstart documentation provides users with a step-by-step guide to install the Arcade client, authenticate real-world tools, and execute their first tool call, enabling the development of AI agents that can perform actions across various platforms. It outlines prerequisites, installation

## Registry Early Access

- [The Arcade Registry](https://docs.arcade.dev/en/home/registry-early-access.md): The Arcade Registry documentation page provides an overview of the Arcade Registry, a platform for developers to share and monetize their tools for agentic applications. It explains how users can gain early access to the registry, which combines runtime capabilities with a comprehensive tool library,

## Serve Tools

- [Deploying to the cloud with Arcade Deploy](https://docs.arcade.dev/en/home/serve-tools/arcade-deploy.md): This documentation page provides a step-by-step guide for deploying a worker using Arcade Deploy, including prerequisites such as Python version and Arcade account setup. Users will learn how to create a deployment configuration file, execute the deployment command, and list their deployed workers.

## Use Tools

- [Get Formatted Tool Definitions](https://docs.arcade.dev/en/home/use-tools/get-tool-definitions.md): This documentation page provides guidance on retrieving formatted tool definitions using the Arcade Client, enabling users to obtain single or multiple tool definitions in a specific model provider's format. It also covers converting tool definitions into Zod schemas for type safety and validation, along with
- [Tool error handling](https://docs.arcade.dev/en/home/use-tools/error-handling.md): This documentation page provides guidance on effectively handling errors when using tools with Arcade's Tool Development Kit (TDK). It outlines the error handling philosophy, describes various error types, and offers best practices for implementing robust error management in applications. Users will learn how
- [Types of Tools](https://docs.arcade.dev/en/home/use-tools/types-of-tools.md): This documentation page explains the two types of tools offered by Arcade: Optimized tools and Starter tools. It highlights the differences in design and functionality, emphasizing that Optimized tools are specifically tailored for AI-powered chat interfaces to improve performance and reliability, while Starter
- [What are tools?](https://docs.arcade.dev/en/home/use-tools/tools-overview.md): This documentation page provides an overview of tool calling in language models, explaining how users can leverage external tools through the Arcade platform to enhance the capabilities of AI models. It outlines practical applications, such as analyzing documents and scheduling meetings, while detailing the process of

## Vercelai

- [page](https://docs.arcade.dev/en/home/vercelai/using-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools with the Vercel AI SDK, enabling users to enhance their AI applications with features like real-time streaming responses and easy switching between AI providers. It includes step-by-step instructions for setting up dependencies
