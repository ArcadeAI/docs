# Arcade

> Arcade is an AI Tool-calling Platform. For the first time, AI can securely act on behalf of users through Arcade's authenticated integrations, or "tools" in AI lingo. Connect AI to email, files, calendars, and APIs to build assistants that don't just chat - they get work done. Start building in minutes with our pre-built connectors or custom SDK.

Arcade enables your AI agent to securely take real-world actions through user-specific permissions, pre-built MCP Servers for Gmail, Slack, GitHub, and more. You can also build your own agentic tools and MCP servers with our authoring and testing suite. Arcade is your tool engine, registry, and runtime.

## Getting Started

- [page](https://docs.arcade.dev/en/home.md): The Arcade Docs page serves as a comprehensive resource for users, providing essential information and guidance about Arcade. It aims to help users understand and utilize the features and functionalities of the Arcade platform effectively.

## Agentic Development

- [Agentic Development](https://docs.arcade.dev/en/home/agentic-development.md): This documentation page provides guidance on enhancing development efficiency by integrating AI capabilities into IDEs using Arcade.dev's resources. Users can learn how to utilize the LLMs.txt file format and the Context7 MCP server to enable AI IDEs like Claude Code and

## Api Keys

- [Getting Your API Key](https://docs.arcade.dev/en/home/api-keys.md): This documentation page provides a step-by-step guide for users to obtain and manage their Arcade API key, either through the Arcade dashboard or the CLI. It emphasizes the importance of securely storing the API key, as it serves as an administrator credential for accessing Arcade

## API Reference

- [Arcade API Reference](https://docs.arcade.dev/en/references/api.md): The Arcade API Reference documentation provides users with essential information about the Arcade API, including its base URL and usage guidelines. It facilitates access to the API through a Swagger interface, allowing users to explore and understand the available endpoints and functionalities. Users are also informed
- [Arcade MCP (MCP Server SDK) - Python Overview](https://docs.arcade.dev/en/references/mcp/python/overview.md): This documentation page provides an overview of the Arcade MCP (MCP Server SDK) for Python, detailing its minimal API designed for programmatically building MCP servers. Users will learn how to configure server settings, manage tools, and utilize the `MCPApp
- [Claude Desktop](https://docs.arcade.dev/en/references/mcp/python/clients/claude-desktop.md): This documentation page provides a comprehensive guide for setting up and configuring the Claude Desktop application to work with Arcade MCP servers. It outlines prerequisites, quick setup methods, manual configuration steps, and troubleshooting tips to help users effectively manage multiple servers and optimize their development environment
- [Cursor IDE](https://docs.arcade.dev/en/references/mcp/python/clients/cursor.md): This documentation page provides a comprehensive guide for integrating the Cursor IDE with Arcade MCP servers, enabling enhanced development capabilities. Users will learn how to configure their MCP server settings, set up their development environment, and utilize various integration features, including tool usage and debugging
- [Errors](https://docs.arcade.dev/en/references/mcp/python/errors.md): This documentation page provides an overview of domain-specific error types associated with the MCP server and its components, detailing the MCP exception hierarchy for improved error handling and debugging. Users can learn about various exceptions, such as `MCPError`, `ServerError`,
- [MCP Inspector](https://docs.arcade.dev/en/references/mcp/python/clients/mcp-inspector.md): The MCP Inspector documentation provides users with a comprehensive guide to installing and utilizing a powerful debugging and testing tool for MCP servers. It covers features such as interactive testing, protocol monitoring, and resource browsing, enabling users to efficiently test tools, monitor protocol messages,
- [Middleware](https://docs.arcade.dev/en/references/mcp/python/middleware.md): This documentation page provides an overview of the Middleware component in the Arcade MCP Server SDK for Python, detailing how users can intercept and modify MCP requests and responses through a series of customizable handlers. It outlines the base classes, methods, and built-in middleware options
- [Server](https://docs.arcade.dev/en/references/mcp/python/server.md): This documentation page provides a reference for the `MCPServer` class in the Arcade MCP Python library, detailing its purpose as a low-level server for hosting Arcade tools over MCP. Users can learn about the server's features, including middleware support, context
- [Settings](https://docs.arcade.dev/en/references/mcp/python/settings.md): This documentation page provides an overview of the global configuration and environment-driven settings for the Arcade MCP Server, detailing various settings containers such as MCPSettings, ServerSettings, and NotificationSettings. Users will learn how to create settings from environment variables, convert them to
- [Sharing your MCP server](https://docs.arcade.dev/en/references/mcp/python/sharing.md): This documentation page guides users on how to share their MCP server with others by creating secure tunnels and registering the server with Arcade. It provides step-by-step instructions for running the server, establishing a secure tunnel using various options, registering the server in the Arcade
- [Transport Modes](https://docs.arcade.dev/en/references/mcp/python/transports.md): This documentation page provides an overview of the two transport modes—stdio and HTTP—available for MCP servers, detailing their characteristics, usage scenarios, and configuration options. Users will learn how to choose the appropriate transport mode based on their application needs, whether for
- [Types](https://docs.arcade.dev/en/references/mcp/python/types.md): This documentation page provides an overview of core Pydantic models and enums used in the MCP protocol, specifically detailing the `CallToolResult` and `SessionMessage` types. It includes instance attributes and examples for constructing JSON-RPC requests and responses,
- [Visual Studio Code](https://docs.arcade.dev/en/references/mcp/python/clients/visual-studio-code.md): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with Visual Studio Code, detailing various methods such as terminal integration, task runners, and launch configurations. It includes prerequisites, project setup recommendations, debugging tips, and best practices to enhance the development

## Arcade Cli

- [The Arcade CLI](https://docs.arcade.dev/en/home/arcade-cli.md): The Arcade CLI documentation provides users with instructions on how to install and utilize the Arcade command-line tool for managing deployments, generating and testing toolkits, and more. It includes detailed installation steps for various Python environments and offers guidance on using specific commands within the

## Auth

- [Authorized Tool Calling](https://docs.arcade.dev/en/home/auth/auth-tool-calling.md): The "Authorized Tool Calling" documentation page provides a comprehensive guide for developers on how to securely authorize and call external services using Arcade's authorization system, which supports OAuth 2.0, API keys, and user tokens. It outlines the steps for initializing
- [Checking Tool Authorization Status](https://docs.arcade.dev/en/home/auth/tool-auth-status.md): This documentation page provides a comprehensive guide on how to check the authorization status of tools before execution, helping users understand the necessary permissions and tool availability. It includes instructions for initializing the client, checking the authorization status for all tools or specific tools, and interpreting
- [Direct Third-Party API Call](https://docs.arcade.dev/en/home/auth/call-third-party-apis-directly.md): This documentation page provides a comprehensive guide on how to obtain an authorization token for directly calling third-party APIs, specifically using Arcade with the Gmail API as an example. Users will learn to manage user authentication flows, handle authorization requests, and utilize tokens to access
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/en/home/auth/how-arcade-helps.md): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services, such as Gmail and Google Calendar. It details the challenges of authentication and how Arcade's authorization system enables AI agents to securely act on behalf of users
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/en/home/auth/how-arcade-helps.md): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details the challenges of authentication and how Arcade's system supports OAuth 2.0, enabling AI agents to securely act on behalf of users for
- [Secure and Brand the Auth Flow in Production](https://docs.arcade.dev/en/home/auth/secure-auth-production.md): This documentation page guides users on how to secure and customize their authentication flows using Arcade.dev in production environments. It outlines the use of the default Arcade user verifier for development and provides instructions for implementing a custom user verifier to enhance user experience and security in production

## Auth Providers

- [Asana](https://docs.arcade.dev/en/home/auth-providers/asana.md): This documentation page provides guidance on using the Asana authentication provider within the Arcade platform, enabling users to call Asana APIs on behalf of their applications. It outlines how to quickly set up the default Asana auth provider, as well as how to configure
- [Atlassian](https://docs.arcade.dev/en/home/auth-providers/atlassian.md): This documentation page provides guidance on configuring a custom Atlassian Auth Provider for use with Arcade, enabling users to authenticate and call Atlassian APIs on behalf of their applications. It outlines the steps to create an Atlassian app, set up OAuth
- [Auth Providers](https://docs.arcade.dev/en/home/auth-providers.md): The "Auth Providers" documentation page serves as a comprehensive registry of available authentication providers within the Arcade ecosystem, enabling users to securely grant access to their data for Arcade tools. It outlines the benefits of using Arcade's built-in auth providers versus configuring custom ones
- [ClickUp](https://docs.arcade.dev/en/home/auth-providers/clickup.md): This documentation page provides guidance on configuring and using the ClickUp authentication provider within the Arcade platform, enabling users to call the ClickUp API on behalf of their users. It outlines the steps for creating a ClickUp app, setting up the auth provider in
- [Discord](https://docs.arcade.dev/en/home/auth-providers/discord.md): This documentation page provides guidance on configuring a custom Discord authentication provider within the Arcade platform, enabling users to integrate Discord API calls into their applications and tools. It outlines the necessary steps to create a Discord app, set up OAuth 2.0 credentials,
- [Dropbox](https://docs.arcade.dev/en/home/auth-providers/dropbox.md): This documentation page provides guidance on configuring a custom Dropbox authentication provider within the Arcade platform, enabling users to call the Dropbox API on behalf of their applications. It outlines the necessary steps to create a Dropbox app, set up OAuth 2.0 credentials,
- [Figma](https://docs.arcade.dev/en/home/auth-providers/figma.md): This documentation page provides guidance on configuring Figma authentication using OAuth 2.0 for tools and applications that interact with the Figma API. It outlines the steps for creating a Figma app, setting up OAuth credentials, and integrating the Figma auth
- [GitHub](https://docs.arcade.dev/en/home/auth-providers/github.md): This documentation page provides guidance on configuring GitHub authentication for tools and agents using the Arcade platform, enabling them to interact with GitHub APIs on behalf of users. It outlines the steps to create a GitHub app, set up necessary permissions, and integrate
- [Google](https://docs.arcade.dev/en/home/auth-providers/google.md): This documentation page provides guidance on how to configure and utilize the Google auth provider within Arcade, enabling users to call Google/Google Workspace APIs on behalf of users. It outlines steps for creating a Google app, configuring OAuth credentials, and integrating Google authentication into
- [Hubspot](https://docs.arcade.dev/en/home/auth-providers/hubspot.md): This documentation page provides guidance on using and configuring the Hubspot authentication provider within the Arcade platform, enabling users to call Hubspot APIs on behalf of their applications. It outlines the steps for utilizing Arcade's default Hubspot auth provider or configuring custom app credentials
- [Linear](https://docs.arcade.dev/en/home/auth-providers/linear.md): This documentation page provides guidance on configuring and using the Linear authentication provider with Arcade, enabling users to call Linear APIs on behalf of users through their applications or custom tools. It outlines the steps for creating a Linear app, setting up OAuth2 credentials, and
- [LinkedIn](https://docs.arcade.dev/en/home/auth-providers/linkedin.md): This documentation page provides guidance on configuring and using the LinkedIn authentication provider with Arcade, enabling users to call LinkedIn APIs through their applications and custom tools. It outlines the steps for creating a LinkedIn app, setting up app credentials, and utilizing the
- [Microsoft](https://docs.arcade.dev/en/home/auth-providers/microsoft.md): This documentation page provides instructions for configuring a custom Microsoft Auth Provider in Arcade, enabling users to authenticate and access Microsoft Graph APIs. It outlines the steps for creating a Microsoft app, setting necessary permissions, and integrating the app credentials into Arcade for use in application
- [Notion](https://docs.arcade.dev/en/home/auth-providers/notion.md): This documentation page provides guidance on configuring the Notion authentication provider for use with Arcade, enabling applications and custom tools to interact with the Notion API on behalf of users. It outlines the steps to create a Notion app, set up OAuth credentials,
- [OAuth 2.0](https://docs.arcade.dev/en/home/auth-providers/oauth2.md): This documentation page provides guidance on configuring OAuth 2.0 to authorize tools and agents with any OAuth 2.0-compatible API using Arcade. It details the setup process for both the Arcade Cloud Engine and self-hosted environments, including steps for integrating
- [Reddit](https://docs.arcade.dev/en/home/auth-providers/reddit.md): This documentation page provides guidance on configuring a custom Reddit authentication provider within the Arcade platform, enabling users to call the Reddit API on behalf of users. It outlines the steps to create a Reddit app, set up OAuth credentials, and integrate Reddit auth into both
- [Salesforce](https://docs.arcade.dev/en/home/auth-providers/salesforce.md): This documentation page provides guidance on configuring the Salesforce auth provider for use with Arcade, enabling users to call Salesforce APIs through their applications and custom tools. It outlines the steps to create a Connected App in Salesforce, including necessary settings and permissions, as well as
- [Slack](https://docs.arcade.dev/en/home/auth-providers/slack.md): This documentation page provides guidance on configuring the Slack authentication provider within the Arcade platform, enabling users to integrate Slack APIs into their applications or tools. It outlines the steps for creating a Slack app, setting up app credentials, and configuring Slack auth using the Arcade
- [Spotify](https://docs.arcade.dev/en/home/auth-providers/spotify.md): This documentation page guides users on how to create and configure a custom Spotify Auth Provider within the Arcade platform, enabling applications and tools to access the Spotify API on behalf of users. It outlines the necessary steps for registering a Spotify app, entering credentials in the
- [TickTick](https://docs.arcade.dev/en/home/auth-providers/ticktick.md): This documentation page provides guidance on configuring the TickTick authentication provider to enable applications and agents to access TickTick APIs using OAuth 2.0. It outlines the steps for creating a TickTick app, setting up OAuth settings, and integrating the authentication within
- [Twitch](https://docs.arcade.dev/en/home/auth-providers/twitch.md): This documentation page provides guidance on configuring a custom Twitch authentication provider within the Arcade platform, enabling users to call the Twitch API on behalf of their applications. It outlines the steps to create a Twitch app, set up OAuth credentials, and integrate Twitch authentication into
- [X](https://docs.arcade.dev/en/home/auth-providers/x.md): This documentation page provides guidance on configuring and using the X (Twitter) authentication provider within the Arcade platform, enabling users to call the X API on behalf of their applications. It outlines the steps for creating an X app, setting up OAuth credentials, and
- [Zendesk](https://docs.arcade.dev/en/home/auth-providers/zendesk.md): This documentation page provides guidance on configuring a custom Zendesk authentication provider for use with Arcade, enabling tools and agents to access Zendesk APIs on behalf of users. It outlines the necessary steps to create a Zendesk app, set up OAuth credentials, and
- [Zoho](https://docs.arcade.dev/en/home/auth-providers/zoho.md): This documentation page provides guidance on configuring the Zoho authentication provider for use with Arcade, enabling users to access Zoho APIs via OAuth 2.0. It outlines the steps for creating a Zoho app, setting up necessary credentials, and integrating Zo
- [Zoom](https://docs.arcade.dev/en/home/auth-providers/zoom.md): This documentation page provides guidance on configuring a custom Zoom authentication provider within the Arcade platform, enabling users to call the Zoom API on behalf of their application or custom tools. It outlines the steps to create a Zoom app, set up OAuth credentials, and integrate

## Build Tools

- [Add user authorization to your MCP tools](https://docs.arcade.dev/en/home/build-tools/create-a-tool-with-auth.md): This documentation page guides users on how to implement user authorization in custom MCP tools using Arcade, focusing on integrating OAuth and various auth providers like Reddit. It provides step-by-step instructions for creating tools that require user authentication, detailing the necessary prerequisites and code examples
- [Call tools from MCP clients](https://docs.arcade.dev/en/home/build-tools/call-tools-from-mcp-clients.md): This documentation page provides guidance on configuring MCP clients to call tools from an MCP server, detailing the necessary prerequisites and outcomes. Users will learn how to set up their clients using the `arcade configure` command, customize transport types, and manage configuration options
- [Create an MCP tool with secrets](https://docs.arcade.dev/en/home/build-tools/create-a-tool-with-secrets.md): This documentation page guides users on how to create custom MCP tools that securely handle sensitive information, known as secrets, using the Arcade platform. It covers the process of reading secrets from various sources, such as environment variables and the Arcade Dashboard, and emphasizes best
- [Creating an MCP Server with Arcade](https://docs.arcade.dev/en/home/build-tools/create-a-mcp-server.md): This documentation page provides a comprehensive guide on how to create, test, deploy, and publish a custom MCP Server using the Arcade tools. Users will learn to install the necessary packages, scaffold a new server project, run the server, and connect it to
- [Logging tool activity](https://docs.arcade.dev/en/home/build-tools/logging-mcp-tool-activity.md): This documentation page provides guidance on how to log tool activity in an MCP server, detailing various logging levels and patterns for effective debugging and monitoring. Users will learn best practices for structured logging, error handling, and tracking long-running operations, along with example code
- [Organize your MCP server and tools](https://docs.arcade.dev/en/home/build-tools/organize-mcp-server-tools.md): This documentation page provides best practices for organizing your MCP server and tools, including how to define and import tools from separate files and other packages. Users will learn to maintain a clean project structure by keeping tools in a dedicated directory and using decorators effectively. The
- [Providing useful tool errors](https://docs.arcade.dev/en/home/build-tools/providing-useful-tool-errors.md): This documentation page provides guidance on effectively handling errors when building tools with Arcade MCP, emphasizing the importance of robust error management. It explains the automatic error adaptation process, outlines when to raise specific errors explicitly, and details common error scenarios that developers may encounter.
- [RetryableToolError in Arcade](https://docs.arcade.dev/en/home/build-tools/retry-tools-with-improved-prompt.md): This documentation page explains how to utilize the `RetryableToolError` in the Arcade Tool SDK to enhance tool call outcomes by providing additional context for input parameters. It outlines when to raise this error and includes an example of its application in a Slack messaging
- [Understanding `Context` and tools](https://docs.arcade.dev/en/home/build-tools/tool-context.md): This documentation page explains the `Context` class in Arcade, which manages authorization and user information for authenticated tools. It details how to utilize various runtime features such as logging, secrets management, user context, and progress reporting through the `Context` object.

## Changelog

- [Changelog](https://docs.arcade.dev/en/home/changelog.md): The Changelog documentation page provides users with a comprehensive overview of the latest updates and features at Arcade.dev, including new toolkits, enhancements to MCP Servers, and improvements to documentation clarity and navigation. Users can learn about the release of `arcade-m

## Compare Server Types

- [Compare MCP Server Types](https://docs.arcade.dev/en/home/compare-server-types.md): This documentation page provides a comprehensive comparison of different MCP server types, detailing their functionalities based on transport methods and deployment options. Users can learn about the capabilities of each server type, including support for various tools and authentication methods. The comparison table helps users choose

## Contact Us

- [Contact Us](https://docs.arcade.dev/en/home/contact-us.md): This documentation page provides users with information on how to connect with the Arcade team for support through various channels. It emphasizes the team's commitment to assisting users and their agents in achieving success.

## Crewai

- [page](https://docs.arcade.dev/en/home/crewai/use-arcade-tools.md): This documentation page guides users on how to integrate Arcade tools into their CrewAI applications, providing step-by-step instructions for setup and configuration. It covers prerequisites, environment setup, API key configuration, and the process of authorizing and using tools within a Crew
- [Provide the tool manager callback to the ArcadeToolManager](https://docs.arcade.dev/en/home/crewai/custom-auth-flow.md): This documentation page guides users on how to implement a custom authentication flow for the ArcadeToolManager within their CrewAI agent teams. It outlines the necessary prerequisites, setup steps, and code snippets needed to tailor the authorization process for executing Arcade tools, providing flexibility

## Custom Mcp Server Quickstart

- [Build MCP Server QuickStart](https://docs.arcade.dev/en/home/custom-mcp-server-quickstart.md): The "Build MCP Server QuickStart" documentation provides users with step-by-step instructions to create a custom MCP Server using the Arcade MCP framework. It covers prerequisites, installation, server setup, and authentication processes, enabling users to build AI applications that can perform

## Deployment

- [Arcade Cloud Infrastructure](https://docs.arcade.dev/en/home/deployment/arcade-cloud-infra.md): This documentation page provides an overview of the infrastructure supporting Arcade Cloud, detailing essential information such as egress IP addresses and the availability of VPC Peering for enterprise customers. Users can learn how to manage network traffic and request additional services to enhance their cloud
- [Engine Configuration](https://docs.arcade.dev/en/home/deployment/engine-configuration.md): This documentation page provides enterprise customers with guidance on configuring the Arcade Engine, specifically for self-hosted environments. It details the installation process, the purpose and customization of the `engine.yaml` and `engine.env` files, and advanced configuration options for managing
- [On-premise MCP Servers](https://docs.arcade.dev/en/home/deployment/on-prem-mcp.md): This documentation page provides guidance on deploying on-premises MCP servers within a hybrid architecture, enabling users to utilize Arcade's cloud infrastructure while maintaining control over their private resources and data security. Users will learn how to set up their MCP server, create a secure

## Evaluate Tools

- [Evaluate tools](https://docs.arcade.dev/en/home/evaluate-tools/create-an-evaluation-suite.md): This documentation page provides a comprehensive guide on how to create and run an evaluation suite for tools using the Arcade framework. Users will learn to define evaluation cases, utilize various critics to assess tool performance, and execute evaluations to ensure AI models effectively use the specified
- [Run evaluations with the Arcade CLI](https://docs.arcade.dev/en/home/evaluate-tools/run-evaluations.md): This documentation page provides a comprehensive guide on how to run evaluations of tool-enabled language models using the Arcade CLI. It details the usage of the `arcade evals` command, including options for customizing evaluations, executing evaluation suites, and displaying results in
- [Why evaluate tools?](https://docs.arcade.dev/en/home/evaluate-tools/why-evaluate-tools.md): This documentation page emphasizes the importance of evaluating tools used in language models with tool-calling capabilities to ensure their effectiveness and reliability in production environments. It outlines a comprehensive evaluation framework that assesses tool utilization and intent understanding, helping users validate the model's performance in

## Faq

- [Frequently Asked Questions](https://docs.arcade.dev/en/home/faq.md): This documentation page provides answers to common questions about the Arcade platform, helping users understand how to create and contribute tools, differentiate between various API keys, and manage OAuth authentication. It guides users in building their own tools, collaborating effectively with project API keys,

## Glossary

- [Arcade Glossary](https://docs.arcade.dev/en/home/glossary.md): The Arcade Glossary provides definitions and explanations of key terms and concepts related to the Arcade platform, including agents, tools, and transport modes. It serves as a reference for users to understand how to build, test, and deploy applications utilizing the Arcade framework

## Google Adk

- [Arcade with Google ADK](https://docs.arcade.dev/en/home/google-adk/overview.md): This documentation page provides a comprehensive guide for integrating the Arcade platform with the Google ADK library, enabling users to enhance their AI agents with various tools like Google Mail and GitHub. It covers installation, key features, basic usage, and user authentication processes
- [Initialize the Arcade client](https://docs.arcade.dev/en/home/google-adk/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into Google ADK applications, detailing the necessary prerequisites, environment setup, API key configuration, and agent management. Users will learn how to authorize tools, run agents with user context, and explore various

## Hosting Overview

- [Hosting Options](https://docs.arcade.dev/en/home/hosting-overview.md): This documentation page provides an overview of the various hosting options available for the Arcade platform, including the default Arcade Cloud service and on-premise deployment options. Users can learn how to quickly set up Arcade Cloud for immediate use or configure on-premise deployments to

## Langchain

- [Fetch the "ScrapeUrl" tool from the "Firecrawl" MCP Server](https://docs.arcade.dev/en/home/langchain/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into LangGraph applications, including setup instructions, API key configuration, and code examples in Python and JavaScript. Users will learn how to create and manage Arcade tools, set up language models, and
- [Import necessary classes and modules](https://docs.arcade.dev/en/home/langchain/user-auth-interrupts.md): This documentation page guides users in creating a LangGraph workflow that incorporates user authorization for accessing specific Arcade tools. It outlines the necessary prerequisites, installation steps, and code configurations required to set up the environment, define workflow functions, and compile the LangGraph.
- [page](https://docs.arcade.dev/en/home/langchain/auth-langchain-tools.md): This documentation page provides a step-by-step guide for users to authorize existing LangChain tools, such as `GmailToolkit`, using the Arcade platform. It outlines the necessary prerequisites, installation of required packages, and detailed instructions for initializing the Arcade client and

## Mastra

- [Create a new Mastra project](https://docs.arcade.dev/en/home/mastra/use-arcade-tools.md): This documentation page provides a step-by-step guide for integrating Arcade tools into a new Mastra project, enabling users to leverage these tools within their Mastra applications. It covers prerequisites, project setup, API key configuration, and agent interaction methods, ensuring users
- [page](https://docs.arcade.dev/en/home/mastra/overview.md): This documentation page guides users on integrating Arcade's tool ecosystem with Mastra applications, enabling enhanced functionality for AI agents. It outlines how to access a variety of pre-built tools, simplifies tool management, and details the mechanisms for seamless integration, including tool discovery
- [page](https://docs.arcade.dev/en/home/mastra/user-auth-interrupts.md): This documentation page provides guidance on managing user-specific authorization for Arcade tools within Mastra applications, enabling dynamic tool loading and personalized authentication flows for multiple users. It outlines the steps to set up Mastra configurations, create API endpoints for tool access, and enhance

## Mcp Clients

- [Use Arcade in Cursor](https://docs.arcade.dev/en/home/mcp-clients/cursor.md): This documentation page provides a step-by-step guide for connecting Cursor to an Arcade MCP Gateway, enabling users to utilize Arcade tools within the Cursor environment. It outlines the prerequisites for setup, including creating an Arcade account and obtaining an API key, followed by detailed
- [Use Arcade in Visual Studio Code](https://docs.arcade.dev/en/home/mcp-clients/visual-studio-code.md): This documentation page provides a step-by-step guide for connecting Visual Studio Code to an Arcade MCP Gateway, enabling users to integrate and utilize Arcade services within their development environment. It outlines the prerequisites, including creating an Arcade account and obtaining an API key, as
- [Use Arcade with Claude Desktop](https://docs.arcade.dev/en/home/mcp-clients/claude-desktop.md): This documentation page provides a step-by-step guide for connecting Claude Desktop to a local Arcade server, enabling users to access Arcade tools within the application. It outlines the prerequisites, including creating an Arcade account and obtaining an API key, as well as detailed instructions

## Mcp Gateways

- [MCP Gateways](https://docs.arcade.dev/en/home/mcp-gateways.md): This documentation page provides a comprehensive guide on configuring and using MCP Gateways, which facilitate the connection of multiple MCP Servers to streamline management and access to various tools within a single project. Users can learn how to set up an MCP Gateway, select specific tools

## MCP Servers

- [page](https://docs.arcade.dev/en/mcp-servers.md): This documentation page provides a comprehensive registry of all MCP Servers available within the Arcade ecosystem, helping users easily locate and access the various toolkits available for their projects.

## MCP Servers - Contribute A Server

- [How to contribute a MCP Server](https://docs.arcade.dev/en/mcp-servers/contribute-a-server.md): This documentation page provides a step-by-step guide for developers on how to contribute their MCP Server to the Arcade documentation, enhancing visibility and accessibility for other users. It outlines prerequisites, submission procedures via a pull request, and the review process to ensure successful integration

## MCP Servers - Customer Support

- [FreshserviceApi](https://docs.arcade.dev/en/mcp-servers/customer-support/freshservice-api.md): The FreshserviceApi documentation provides tools and endpoints for programmatically interacting with the Freshservice platform, enabling users to manage various aspects such as organizational data, assets, software, service catalogs, users, tickets, and more. It facilitates automation of ITSM
- [Zendesk](https://docs.arcade.dev/en/mcp-servers/customer-support/zendesk.md): This documentation page provides users with tools and instructions for integrating and managing customer support operations through Zendesk. It outlines functionalities such as listing tickets, retrieving comments, adding comments, marking tickets as solved, and searching knowledge base articles, all aimed at streamlining
- [Zendesk Reference](https://docs.arcade.dev/en/mcp-servers/customer-support/zendesk/reference.md): The Zendesk Reference documentation provides a comprehensive list of enumerations used in the Zendesk MCP Server, including ticket statuses, sorting orders, and article sorting criteria. Users can refer to this page to understand the specific values and options available for managing tickets and

## MCP Servers - Databases

- [Clickhouse](https://docs.arcade.dev/en/mcp-servers/databases/clickhouse.md): This documentation page provides users with a comprehensive guide to the Arcade Clickhouse MCP Server, which enables agents to interact with Clickhouse databases in a read-only capacity. Users can learn how to discover database schemas, explore table structures, and execute safe SELECT queries
- [Clickhouse](https://docs.arcade.dev/en/mcp-servers/databases/postgres/clickhouse.md): This documentation page provides users with a comprehensive guide on using the Arcade Clickhouse MCP Server, which enables read-only interaction with Clickhouse databases. Users can learn to discover database schemas, explore table structures, and execute SELECT queries safely, while also understanding key
- [MongoDB](https://docs.arcade.dev/en/mcp-servers/databases/mongodb.md): This documentation page provides an overview of the Arcade MongoDB MCP Server, which allows users to interact with MongoDB databases in a read-only capacity. It outlines key features such as database discovery, collection exploration, schema inference, and safe query execution, while
- [MongoDB](https://docs.arcade.dev/en/mcp-servers/databases/postgres/mongodb.md): This documentation page provides a comprehensive overview of the Arcade MongoDB MCP Server, which enables agents to interact with MongoDB databases in a read-only capacity. Users can learn how to discover databases and collections, explore document structures, and execute safe queries, while
- [Postgres](https://docs.arcade.dev/en/mcp-servers/databases/postgres.md): This documentation page provides users with a comprehensive guide to the Arcade Postgres MCP Server, which enables agents to interact with PostgreSQL databases in a read-only capacity. Users can learn how to discover database schemas, explore table structures, and execute SELECT queries safely
- [WeaviateApi](https://docs.arcade.dev/en/mcp-servers/databases/weaviate-api.md): The WeaviateApi documentation provides users with essential tools and guidance for managing and interacting with the Weaviate vector search engine via its API. It covers authentication requirements, details on obtaining API keys, and a comprehensive list of available API endpoints for various

## MCP Servers - Development

- [ArcadeEngineApi](https://docs.arcade.dev/en/mcp-servers/development/arcade-engine-api.md): The ArcadeEngineApi documentation provides users with a comprehensive guide to utilizing the EngineApi MCP Server, which facilitates interactions between language models and the engine API. It outlines various tools available for managing authentication providers, secrets, and worker configurations, enabling users to perform
- [Brightdata](https://docs.arcade.dev/en/mcp-servers/development/brightdata.md): The Brightdata documentation page provides users with tools and guidance for scraping, crawling, and extracting structured data from various websites at scale without facing blocking issues. It details specific functionalities, including scraping web pages into Markdown, conducting advanced searches across major search engines,
- [CursorAgentsApi](https://docs.arcade.dev/en/mcp-servers/development/cursor-agents-api.md): The CursorAgentsApi documentation provides users with tools to manage and inspect background agents, including functionalities for listing, retrieving status, deleting agents, and accessing conversation history. It also allows users to verify authentication details and fetch recommended models and accessible GitHub repositories.
- [DatadogApi](https://docs.arcade.dev/en/mcp-servers/development/datadog-api.md): The DatadogApi documentation provides users with tools and guidance for interacting with the Datadog API, enabling them to manage datastores, application keys, and action connections effectively. It includes detailed instructions on authentication, as well as a comprehensive list
- [E2B](https://docs.arcade.dev/en/mcp-servers/development/e2b.md): The E2B documentation page provides users with the necessary information to utilize the Arcade E2B MCP Server, which enables the execution of code in a sandboxed environment and the creation of static matplotlib charts. It outlines available tools, authentication requirements, and
- [Firecrawl](https://docs.arcade.dev/en/mcp-servers/development/firecrawl.md): The Firecrawl documentation page provides users with tools and guidance for building agents and AI applications that can scrape, crawl, and map websites. It details various functionalities, including scraping URLs, crawling entire websites, retrieving crawl statuses, and managing ongoing crawls,
- [GitHub](https://docs.arcade.dev/en/mcp-servers/development/github.md): This documentation page provides users with tools and guidance for integrating and interacting with GitHub repositories, issues, and pull requests through the Arcade GitHub MCP Server. It outlines available functionalities, such as creating issues, managing pull requests, and accessing repository information,
- [Reference for Firecrawl Toolkit](https://docs.arcade.dev/en/mcp-servers/development/firecrawl/reference.md): This documentation page provides a reference for the Firecrawl Toolkit, detailing the various output formats available for scraped web pages, including Markdown, HTML, raw HTML, links, and screenshot options. Users can learn how to customize their scraping results based on their specific
- [Reference for GitHub Toolkit](https://docs.arcade.dev/en/mcp-servers/development/github/reference.md): The "Reference for GitHub Toolkit" documentation page provides users with detailed specifications for sorting and filtering pull requests, review comments, and repository activities on GitHub. It outlines various properties, states, and types that can be utilized to customize queries, enabling
- [VercelApi](https://docs.arcade.dev/en/mcp-servers/development/vercel-api.md): The VercelApi documentation provides users with a comprehensive guide to tools that enable interaction with the Vercel API for managing projects, domains, and integrations. It outlines various functionalities, such as creating and updating access groups, managing deployments, and handling
- [ZohoCreatorApi](https://docs.arcade.dev/en/mcp-servers/development/zoho-creator-api.md): The ZohoCreatorApi documentation provides tools and guidance for developers to interact with the Zoho Creator API, enabling them to manage and manipulate application data effectively. Users can learn how to perform various actions such as fetching records, updating data, and managing application

## MCP Servers - Entertainment

- [Imgflip](https://docs.arcade.dev/en/mcp-servers/entertainment/imgflip.md): The Imgflip documentation page provides users with tools to create and manage memes using the Imgflip API. It outlines functionalities such as searching for meme templates, retrieving popular memes, and creating custom memes, along with detailed parameters and examples for implementation. This resource
- [Imgflip](https://docs.arcade.dev/en/mcp-servers/entertainment/spotify/imgflip.md): The Imgflip documentation page provides users with tools and guidance for creating and managing memes using the Imgflip API. It outlines functionalities such as searching for meme templates, retrieving popular memes, and creating custom memes with specific text and formatting options. Users can also
- [Spotify](https://docs.arcade.dev/en/mcp-servers/entertainment/spotify.md): This documentation page provides a comprehensive guide for using the Arcade Spotify MCP Server, which enables developers to create agents and AI applications that interact with Spotify tracks. Users can learn how to retrieve track information, control playback, and search the Spotify catalog through various available
- [Twitch auth provider](https://docs.arcade.dev/en/mcp-servers/entertainment/twitch.md): This documentation page provides guidance on creating and configuring a custom Twitch Auth Provider for use with Arcade, enabling users to authenticate and interact with the Twitch API. It outlines the necessary steps to set up a Twitch application, configure OAuth settings in the Arcade Dashboard,

## MCP Servers - Payments

- [Stripe](https://docs.arcade.dev/en/mcp-servers/payments/stripe.md): This documentation page provides users with tools to interact with the Stripe API, enabling the creation and management of customers, products, invoices, and payment links. It outlines various functionalities available through the Arcade Stripe MCP Server, including detailed descriptions and examples for each tool
- [StripeApi](https://docs.arcade.dev/en/mcp-servers/payments/stripe_api.md): The StripeApi documentation provides tools that enable users to interact programmatically with the Stripe API, allowing for comprehensive management of accounts, customers, payments, billing, and other Stripe resources. It details various operations such as retrieving account details, managing payments, and
- [ZohoBooksApi](https://docs.arcade.dev/en/mcp-servers/payments/zoho-books-api.md): The ZohoBooksApi documentation provides users with tools to manage financial transactions and accounting within Zoho Books, enabling actions such as creating, updating, and deleting bank accounts and transactions. It outlines various functionalities, including importing bank statements, categorizing transactions,

## MCP Servers - Productivity

- [Asana](https://docs.arcade.dev/en/mcp-servers/productivity/asana.md): This documentation page provides a comprehensive guide for using the Arcade Asana MCP Server, which enables users to build agents and AI applications that interact with Asana tasks, projects, and workspaces. It outlines available tools for managing teams, creating and updating tasks
- [Asana Reference](https://docs.arcade.dev/en/mcp-servers/productivity/asana/reference.md): The Asana Reference documentation provides a comprehensive list of enumerations related to tag colors, task sorting options, and sort orders used in the Asana MCP Server. It helps users understand and utilize various parameters effectively when working with Asana tools. This reference
- [BoxApi](https://docs.arcade.dev/en/mcp-servers/productivity/box-api.md): The BoxApi documentation provides a comprehensive guide for using tools that enable interaction with the Box API, allowing users to manage content, metadata, security, and collaboration within Box. It outlines key capabilities such as file management, document generation, and enterprise operations,
- [Clickup](https://docs.arcade.dev/en/mcp-servers/productivity/clickup.md): This documentation page provides users with the necessary tools and guidance to interact with ClickUp workspaces, enabling the creation, modification, and management of tasks, comments, and user assignments through an OAuth2 authentication process. It outlines various functionalities, including task retrieval
- [Clickup Reference](https://docs.arcade.dev/en/mcp-servers/productivity/clickup/reference.md): The Clickup Reference documentation provides users with a comprehensive list of enumerations for various tools within the Clickup MCP Server, including task priorities, filter scopes, task ordering, and comment resolutions. This reference helps users understand the predefined values they can use when
- [Close.io](https://docs.arcade.dev/en/mcp-servers/productivity/closeio.md): This documentation page introduces Close.io, a CRM tool designed to help users manage leads, contacts, and deals effectively. Although the content is marked as "Coming Soon," it aims to provide guidance on utilizing the features of Close.io for streamlined customer relationship management
- [Confluence](https://docs.arcade.dev/en/mcp-servers/productivity/confluence.md): This documentation page provides a comprehensive guide for using the Arcade Confluence MCP Server, which enables users to build agents and AI applications that interact with Confluence. It outlines various tools available for managing pages, spaces, and attachments, as well as searching for
- [Dropbox](https://docs.arcade.dev/en/mcp-servers/productivity/dropbox.md): This documentation page provides users with tools to interact with Dropbox, enabling them to browse, search, and download files and folders easily. It outlines the available functionalities, including listing items in a folder, searching for specific files, and downloading files, along with
- [FigmaApi](https://docs.arcade.dev/en/mcp-servers/productivity/figma-api.md): The FigmaApi documentation provides users with a comprehensive set of tools for interacting with Figma files and projects, enabling efficient management of design assets and collaboration. Users can perform various actions such as retrieving files, managing comments, and handling components and styles through
- [Gmail](https://docs.arcade.dev/en/mcp-servers/productivity/gmail.md): This documentation page provides a comprehensive overview of the Arcade Gmail MCP Server, which enables users to build agents and AI applications that can send, read, and manage emails through the Gmail API. It details the available tools for various email operations, such as composing
- [Gmail Reference](https://docs.arcade.dev/en/mcp-servers/productivity/gmail/reference.md): The Gmail Reference documentation provides a list of enumerations used in the Gmail MCP Server, specifically detailing options for reply recipients and date ranges. Users can refer to this page to understand the specific values and their corresponding identifiers for configuring tools within the Gmail environment.
- [Google Calendar](https://docs.arcade.dev/en/mcp-servers/productivity/google-calendar.md): This documentation page provides an overview of the Arcade Google Calendar MCP Server, which enables users to build applications that interact with Google Calendar through various tools. Users can discover accessible calendars, manage events (create, update, list, and delete), and find available
- [Google Contacts](https://docs.arcade.dev/en/mcp-servers/productivity/google-contacts.md): This documentation page provides a comprehensive guide for developers on how to use the Arcade Google Contacts MCP Server to interact with Google Contacts. It outlines available tools for creating new contacts and searching for existing ones by name or email, along with example code snippets in Python
- [Google Docs](https://docs.arcade.dev/en/mcp-servers/productivity/google-docs.md): This documentation page provides a comprehensive overview of the Arcade Google Docs MCP Server, which enables users to build agents and AI applications that interact with Google Docs. It outlines various tools available for creating, updating, and managing documents, as well as retrieving user information
- [Google Drive](https://docs.arcade.dev/en/mcp-servers/productivity/google-drive.md): This documentation page provides users with tools for interacting with Google Drive through the GoogleDrive MCP Server, enabling efficient file management and access. Users can retrieve their file structure, generate a Google File Picker URL for secure file selection, and search for specific files within
- [Google Sheets](https://docs.arcade.dev/en/mcp-servers/productivity/google-sheets.md): This documentation page provides a comprehensive guide for using the Arcade Google Sheets MCP Server, enabling users to build agents and AI applications that interact with Google Sheets. It outlines various tools available for creating, reading, and updating spreadsheets, as well as retrieving metadata and
- [Google Slides](https://docs.arcade.dev/en/mcp-servers/productivity/google-slides.md): This documentation page provides a comprehensive guide for users to interact with Google Slides through a set of tools, enabling actions such as creating presentations, adding slides, commenting, and converting content to markdown. It outlines the available functionalities, including detailed descriptions and code examples
- [GoogleCalendar Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-calendar/reference.md): The GoogleCalendar Reference documentation provides a comprehensive list of enumerations related to event visibility, update options for sending notifications, and managing Google Meet settings within the GoogleCalendar MCP Server. Users can refer to this page to understand the specific options available for configuring events
- [GoogleDocs Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-docs/reference.md): The GoogleDocs Reference documentation provides a comprehensive list of enumerations related to ordering and document formats used in the GoogleDocs MCP Server. Users can learn how to effectively sort and format documents by utilizing the specified enumerations for various attributes such as creation time,
- [GoogleDrive Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-drive/reference.md): The GoogleDrive Reference documentation provides a comprehensive list of enumerations for sorting and categorizing files within the GoogleDrive MCP Server. Users can learn about various order options for file retrieval, such as by creation time or modification time, as well as the different
- [GoogleSheets Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-sheets/reference.md): The GoogleSheets Reference documentation provides a comprehensive list of enumerations used in the GoogleSheets MCP Server, specifically focusing on various sorting options available for organizing data. Users can learn about different order criteria such as creation time, modification time, and name, along
- [Jira](https://docs.arcade.dev/en/mcp-servers/productivity/jira.md): This documentation page provides a comprehensive overview of the Jira MCP Server, which enables users and AI applications to efficiently manage Jira issues and projects through various functionalities such as creating, updating, and searching for issues, as well as managing labels and attachments. It also
- [Jira Environment Variables](https://docs.arcade.dev/en/mcp-servers/productivity/jira/environment-variables.md): This documentation page provides information on configuring key environment variables for optimizing interactions with the Jira API in Arcade tools. Users can learn how to set limits on concurrent requests, manage API request timeouts, and control caching behavior to enhance performance during tool execution. Each
- [Jira Reference](https://docs.arcade.dev/en/mcp-servers/productivity/jira/reference.md): This documentation page provides a reference for enumerations used in the Jira MCP Server, specifically detailing the various sprint states, priority scheme ordering, and issue comment ordering options available through the Jira API. Users can learn how to effectively filter sprints and sort issues
- [Linear](https://docs.arcade.dev/en/mcp-servers/productivity/linear.md): This documentation page provides users with tools to interact with Linear's issue tracking and team management features through the Arcade Linear MCP Server. Users can retrieve detailed information about specific issues and access comprehensive team data without making modifications. It also includes guidance on authentication and examples
- [Notion](https://docs.arcade.dev/en/mcp-servers/productivity/notion.md): This documentation page provides users with a comprehensive guide to the Arcade Notion MCP Server, which enables the creation of agents and AI applications that interact with Notion. Users can learn how to utilize various tools to manage Notion pages, including retrieving content,
- [Obsidian](https://docs.arcade.dev/en/mcp-servers/productivity/obsidian.md): This documentation page provides an overview of the Arcade Obsidian Toolkit, a community-contributed MCP Server verified by the Arcade team. It directs users to the GitHub repository for further information and resources related to the toolkit.
- [Outlook Calendar](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-calendar.md): This documentation page provides users with tools and instructions for managing calendar events in Outlook using the Arcade Outlook Calendar MCP Server. Users can learn how to create, list, and retrieve events from their Outlook Calendar, as well as access user information related to their calendar
- [Outlook Mail](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-mail.md): This documentation page provides users with tools and guidance for interacting with Outlook Mail through the Arcade Outlook Mail MCP Server, enabling them to read, write, and send emails using the Outlook API. Users can access various functionalities, such as creating drafts, sending emails
- [OutlookMail Reference](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-mail/reference.md): The OutlookMail Reference documentation provides a comprehensive list of enumerations, folder names, email filter properties, and filter operators used in the OutlookMail MCP Server. It helps users understand and utilize these elements effectively for managing emails and implementing filtering criteria. This reference
- [page](https://docs.arcade.dev/en/mcp-servers/productivity/dropbox/reference.md): This documentation page provides a comprehensive list of item categories used in Dropbox, including types such as image, document, PDF, spreadsheet, presentation, audio, video, folder, and paper. It helps users understand the classification of different file types within the Dropbox
- [Sharepoint](https://docs.arcade.dev/en/mcp-servers/productivity/sharepoint.md): This documentation page provides a comprehensive guide for users to enable agents to interact with SharePoint through various tools. It outlines functionalities such as retrieving lists, items, pages, and metadata from SharePoint sites, as well as searching and managing SharePoint resources efficiently
- [TicktickApi](https://docs.arcade.dev/en/mcp-servers/productivity/ticktick-api.md): The TicktickApi documentation provides a set of tools for users to manage tasks and projects within the Ticktick application using OAuth2 authentication. It enables users to create, update, delete, and retrieve detailed information about tasks and projects, facilitating efficient task management
- [XeroApi](https://docs.arcade.dev/en/mcp-servers/productivity/xero-api.md): The XeroApi documentation provides tools for developers to interact with Xero's accounting data via the Xero API, enabling the management of various accounting entities such as invoices, payments, and reports. Users can access, create, and manage resources, retrieve

## MCP Servers - Sales

- [Hubspot](https://docs.arcade.dev/en/mcp-servers/sales/hubspot.md): This documentation page provides an overview of the Hubspot MCP Server, detailing pre-built tools that enable agents to interact with HubSpot CRM for automating updates, logging interactions, and querying data. Users can learn how to utilize various tools for managing users,
- [Hubspot Reference](https://docs.arcade.dev/en/mcp-servers/sales/hubspot/reference.md): The Hubspot Reference documentation provides a comprehensive list of enumerations related to various tools within the Hubspot MCP Server, including call directions, email statuses, meeting outcomes, communication channels, activity types, sort orders, deal types, and deal priorities. This
- [Salesforce CRM](https://docs.arcade.dev/en/mcp-servers/sales/salesforce.md): This documentation page provides guidance on using the Arcade Salesforce CRM MCP Server, which enables users to interact with Salesforce data such as accounts, leads, and contacts through a set of pre-built tools. It outlines the requirements for self-hosting the Arcade Engine and

## MCP Servers - Search

- [Google Finance](https://docs.arcade.dev/en/mcp-servers/search/google_finance.md): This documentation page provides users with the tools to access real-time and historical stock data through the Arcade Google Finance MCP Server. It outlines how to retrieve stock summaries and historical data using specific API calls, along with necessary parameters and examples in Python and JavaScript
- [Google Flights](https://docs.arcade.dev/en/mcp-servers/search/google_flights.md): This documentation page provides users with the tools and instructions to integrate the Arcade Google Flights API, enabling them to search for one-way flights effortlessly. It outlines the required parameters for flight searches, available options for sorting and filtering results, and includes code examples for
- [Google Hotels](https://docs.arcade.dev/en/mcp-servers/search/google_hotels.md): The Google Hotels documentation page provides users with the tools and instructions needed to integrate hotel search functionality into their applications using the Arcade platform. It details the parameters for the GoogleHotels.SearchHotels API, enabling users to retrieve hotel search results based on various criteria such
- [Google Jobs](https://docs.arcade.dev/en/mcp-servers/search/google_jobs.md): This documentation page provides users with tools to integrate and search for job openings using Google Jobs through the Arcade Google Jobs MCP Server. It outlines the available functionalities, including parameters for job searches, authentication requirements, and default settings for language and pagination. Users can
- [Google Maps](https://docs.arcade.dev/en/mcp-servers/search/google_maps.md): This documentation page provides tools for integrating Google Maps functionality into agents and AI applications, specifically enabling users to obtain directions between two locations using either addresses or latitude/longitude coordinates. It outlines the available tools, their parameters, and includes example code snippets for implementation
- [Google News](https://docs.arcade.dev/en/mcp-servers/search/google_news.md): This documentation page provides users with tools to search for news stories using the Google News API through the Arcade platform. It outlines how to utilize the `GoogleNews.SearchNews` tool, including parameters for customizing search queries by keywords, country, and language.
- [Google Search](https://docs.arcade.dev/en/mcp-servers/search/google_search.md): This documentation page provides users with the tools and instructions needed to perform Google searches using the Arcade Search MCP Server and SerpAPI. It outlines how to implement the GoogleSearch.Search tool, including required parameters and authentication details. Users can easily build agents and
- [Google Shopping Search](https://docs.arcade.dev/en/mcp-servers/search/google_shopping.md): The Google Shopping Search documentation provides users with tools and guidance for integrating product search capabilities from Google Shopping into their agents and AI applications. It details how to utilize the GoogleShopping.SearchProducts tool, including required parameters and authentication methods, while also offering options for
- [Walmart Search](https://docs.arcade.dev/en/mcp-servers/search/walmart.md): The Walmart Search documentation provides tools for developers to integrate product search and details retrieval from Walmart into their applications using an API. Users can learn how to utilize the `Walmart.SearchProducts` and `Walmart.GetProductDetails` tools, including parameters for
- [YouTube Search](https://docs.arcade.dev/en/mcp-servers/search/youtube.md): The YouTube Search documentation page provides users with tools to enable agents and AI applications to search for videos on YouTube and retrieve video details using the Arcade YouTube Search MCP Server. It outlines the available tools, their parameters, and example code snippets for

## MCP Servers - Social Communication

- [Arcade for Slack](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/install.md): The documentation page for Arcade for Slack provides users with guidance on integrating Arcade's AI tools into their Slack workspace, enabling enhanced communication and efficiency. It outlines the installation process, features such as message generation and information retrieval, and emphasizes the importance of reviewing AI
- [Arcade for Zoom](https://docs.arcade.dev/en/mcp-servers/social-communication/zoom/install.md): The "Arcade for Zoom" documentation page guides users on integrating Arcade's AI tools with their Zoom accounts to enhance meeting management and information retrieval. It outlines the functionalities available, such as listing upcoming meetings and retrieving participant details, while also providing instructions for
- [Discord](https://docs.arcade.dev/en/mcp-servers/social-communication/discord.md): This documentation page provides instructions on how to configure and use the Discord authentication provider with Arcade, enabling users to call the Discord API on behalf of users. It guides users through creating a Discord application, setting up OAuth credentials in the Arcade Dashboard, and integrating
- [Environment Variables](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/environment-variables.md): This documentation page provides guidance on configuring environment variables for optimizing interactions with the Slack API, specifically focusing on controlling the maximum number of concurrent requests, pagination size, and timeout settings. Users can learn how to adjust these variables to enhance performance and manage API response
- [LinkedIn](https://docs.arcade.dev/en/mcp-servers/social-communication/linkedin.md): This documentation page provides an overview of the Arcade LinkedIn MCP Server, which enables users to build agents and AI applications that interact with LinkedIn, specifically allowing them to create text posts. It includes details on available tools, authentication requirements, and example code
- [Microsoft Teams](https://docs.arcade.dev/en/mcp-servers/social-communication/microsoft-teams.md): This documentation page provides a comprehensive overview of the Microsoft Teams MCP Server, enabling users to efficiently manage teams, channels, and chats within Microsoft Teams. It outlines various tools and functionalities, such as retrieving user information, sending messages, and searching for teams and
- [MicrosoftTeams Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/microsoft-teams/reference.md): The MicrosoftTeams Reference documentation provides a comprehensive overview of enumerations related to matching types and team membership within the MicrosoftTeams MCP Server. It helps users understand the different match types (exact and partial) and team membership classifications, facilitating the effective use of these
- [Reddit](https://docs.arcade.dev/en/mcp-servers/social-communication/reddit.md): This documentation page provides a comprehensive guide for developers on how to utilize the Arcade Reddit MCP Server to build agents and AI applications that interact with Reddit. Users can learn to perform various actions such as submitting posts, commenting, retrieving posts and comments, and checking
- [Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/reference.md): This documentation page provides a reference for enumerations related to conversation types used in the Slack MCP Server, including definitions for public channels, private channels, multi-person direct messages, and direct messages. Users can utilize this information to understand and implement these conversation types
- [Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/twilio/reference.md): This documentation page provides a reference for the `arcade_twilio` package, which enables users to integrate Twilio for sending SMS and WhatsApp messages. It includes installation instructions, a brief description of the package, and detailed parameters for the `Send
- [Slack](https://docs.arcade.dev/en/mcp-servers/social-communication/slack.md): This documentation page provides an overview of the Slack MCP Server, which enables agents and AI applications to interact with the Slack platform effectively. Users can learn how to manage conversations, retrieve user information, send messages, and access conversation metadata, thereby enhancing communication and
- [SlackApi](https://docs.arcade.dev/en/mcp-servers/social-communication/slack_api.md): The SlackApi documentation provides a comprehensive guide for administrators and developers to manage and automate various aspects of Slack workspaces, including user management, messaging, channel operations, and file sharing. Users can learn how to utilize specific tools for tasks such as creating teams
- [SlackApi](https://docs.arcade.dev/en/mcp-servers/social-communication/slack-api.md): The SlackApi documentation provides a comprehensive guide for administrators and applications to effectively manage and automate various aspects of Slack workspaces, including user management, messaging, channel operations, and file sharing. It outlines key functionalities such as creating teams, managing user profiles,
- [Teams Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/teams/reference.md): The Teams Reference documentation provides a comprehensive overview of enumerations related to match types and team membership used in the Teams MCP Server. Users can learn about different matching criteria, such as exact and partial matches, as well as the types of team memberships available.
- [Twilio](https://docs.arcade.dev/en/mcp-servers/social-communication/twilio.md): This documentation page provides users with a guide to set up and utilize a server for sending SMS and WhatsApp messages through Twilio. It outlines the necessary prerequisites, configuration steps, and offers usage examples to demonstrate the functionality of the service. Users will learn
- [X (formerly Twitter)](https://docs.arcade.dev/en/mcp-servers/social-communication/x.md): This documentation page provides a comprehensive guide for using the Arcade X MCP Server, enabling users to build agents and AI applications that interact with X (formerly Twitter). It outlines available tools for actions such as posting, replying to, deleting tweets, and searching for
- [Zoom](https://docs.arcade.dev/en/mcp-servers/social-communication/zoom.md): This documentation page provides an overview of the Arcade Zoom MCP Server, enabling users to build agents and AI applications that interact with Zoom by listing upcoming meetings and retrieving meeting invitation details. It outlines the available tools, their functionalities, and authentication requirements, facilitating seamless

## Oai Agents

- [Arcade with OpenAI Agents](https://docs.arcade.dev/en/home/oai-agents/overview.md): This documentation page provides a comprehensive guide for integrating Arcade with the OpenAI Agents library, enabling users to enhance their AI agents with various tools such as Gmail, LinkedIn, and GitHub. It covers installation, key features, basic usage examples, and
- [Or set it directly when initializing the client](https://docs.arcade.dev/en/home/oai-agents/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into OpenAI Agents applications, including setup, configuration, and usage instructions. Users will learn how to obtain an Arcade API key, set up their environment, create and manage Arcade tools, and run
- [Set your API key](https://docs.arcade.dev/en/home/oai-agents/user-auth-interrupts.md): This documentation page guides users on managing user authorization for Arcade tools within OpenAI Agents applications. It provides step-by-step instructions for setting up an API key, handling authorization errors, and implementing a complete authorization flow. Users will learn how to ensure smooth tool

## Quickstart

- [Arcade's Hosted Tools Quickstart](https://docs.arcade.dev/en/home/quickstart.md): The "Arcade's Hosted Tools Quickstart" documentation page guides users through the initial setup and usage of Arcade's Hosted Tools, enabling AI agents to perform tasks like sending emails and messaging on Slack. Users will learn how to install the Arcade client,

## Registry Early Access

- [The Arcade Registry](https://docs.arcade.dev/en/home/registry-early-access.md): The Arcade Registry documentation provides an overview of a platform where developers can share and monetize their tools for agentic applications, similar to HuggingFace or Pypi. It explains how the registry integrates runtime metrics and user feedback to enhance tool development and usability

## Security

- [Security Research Program](https://docs.arcade.dev/en/home/security.md): The Security Research Program documentation page outlines how users can report security vulnerabilities in Arcade's tools and services, emphasizing the importance of community involvement in enhancing security. It details the scope of issues covered, the reporting process, and guidelines for responsible disclosure. Additionally,

## Serve Tools

- [page](https://docs.arcade.dev/en/home/serve-tools/arcade-deploy.md): This documentation page provides guidance on deploying a worker using Arcade Deploy, highlighting upcoming improvements to the `arcade deploy` command for enhanced usability. In the interim, it directs users to deploy on-premises MCP servers to share their tools effectively.

## Use Tools

- [Get Formatted Tool Definitions](https://docs.arcade.dev/en/home/use-tools/get-tool-definitions.md): This documentation page provides guidance on retrieving formatted tool definitions using the Arcade Client, enabling users to obtain both single and multiple tool definitions in specific model provider formats. It also covers converting tool definitions into Zod schemas for enhanced type safety and validation, as well
- [Tool error handling](https://docs.arcade.dev/en/home/use-tools/error-handling.md): This documentation page provides guidance on effectively handling errors when using tools with Arcade's Tool Development Kit (TDK). It outlines the error handling philosophy, offers examples for client error management in Python and JavaScript, and shares best practices for creating robust applications.
- [Types of Tools](https://docs.arcade.dev/en/home/use-tools/types-of-tools.md): This documentation page explains the two types of tools offered by Arcade: Optimized tools and Starter tools. It details how Optimized tools are specifically designed to align with AI-powered chat interfaces for improved performance, while Starter tools provide more flexibility but are less tailored
- [What are tools?](https://docs.arcade.dev/en/home/use-tools/tools-overview.md): This documentation page provides an overview of tool calling in language models, explaining how users can leverage tools to enhance the capabilities of AI models for tasks like data retrieval and scheduling. It outlines practical applications using the Arcade platform, including integration with services like Google Docs

## Vercelai

- [page](https://docs.arcade.dev/en/home/vercelai/using-arcade-tools.md): This documentation page guides users on integrating Arcade tools with the Vercel AI SDK to enhance their AI applications. It provides step-by-step instructions for setting up dependencies, obtaining API keys, and utilizing Arcade's Gmail MCP Server to create an AI agent for
