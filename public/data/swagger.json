{
  "schemes": ["https"],
  "swagger": "2.0",
  "info": {
    "description": "Reference Documentation for Arcade Engine API",
    "title": "Arcade API",
    "contact": {
      "name": "Arcade",
      "url": "https://arcade.dev",
      "email": "contact@arcade.dev"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://arcade.dev/license"
    },
    "version": "0.1.0"
  },
  "host": "api.arcade.dev",
  "basePath": "/",
  "paths": {
    "/v1/admin/auth_providers": {
      "get": {
        "description": "List a page of auth providers that are available to the caller",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "List auth providers",
        "operationId": "auth-providers-list",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_AuthProviderResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "post": {
        "description": "Create a new auth provider",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Create an auth provider",
        "operationId": "auth-providers-create",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "The auth provider to create",
            "name": "authProviderConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.AuthProviderCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.AuthProviderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/auth_providers/{id}": {
      "get": {
        "description": "Get the details of a specific auth provider",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Get an auth provider",
        "operationId": "auth-providers-get",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the auth provider to get",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.AuthProviderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific auth provider",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Delete an auth provider",
        "operationId": "auth-providers-delete",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the auth provider to delete",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.AuthProviderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "patch": {
        "description": "Patch an existing auth provider",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Patch an auth provider",
        "operationId": "auth-providers-update",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "The auth provider to update",
            "name": "authProviderConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.AuthProviderPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.AuthProviderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/secrets": {
      "get": {
        "description": "List all secrets that are visible to the caller",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "List secrets",
        "operationId": "secrets-list",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_StoredSecretResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/secrets/{secret_id}": {
      "delete": {
        "description": "Delete a secret by its ID",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Delete secret",
        "operationId": "secrets-delete",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the secret to delete",
            "name": "secret_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/secrets/{secret_key}": {
      "post": {
        "description": "Create or update a secret",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Upsert secret",
        "operationId": "secrets-upsert",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "The key of the secret to upsert",
            "name": "secret_key",
            "in": "path",
            "required": true
          },
          {
            "description": "The secret to upsert",
            "name": "secretConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.UpsertStoredSecretRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.StoredSecretResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/settings/session_verification": {
      "get": {
        "description": "Get the current session verification settings for the caller",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Get session verification settings",
        "operationId": "session-verification-settings-get",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.SessionVerificationSettingsResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "put": {
        "description": "Update session verification settings for the caller",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Update session verification settings",
        "operationId": "session-verification-settings-update",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "The settings to update",
            "name": "settings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.UpdateSessionVerificationSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.SessionVerificationSettingsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/user_connections": {
      "get": {
        "description": "List all auth connections",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "List auth connections",
        "operationId": "auth-connections-list",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Provider ID",
            "name": "provider.id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "user.id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_UserAuthProviderConnectionResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/admin/user_connections/{id}": {
      "delete": {
        "description": "Delete a user/auth provider connection",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Delete auth connection",
        "operationId": "auth-connections-delete",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Connection ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/auth/authorize": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Starts the authorization process for given authorization requirements",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Initiate Authorization",
        "operationId": "initiate-authorization",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Authorization request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.AuthorizationInitiationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/auth.AuthorizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/auth/confirm_user": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Confirms a user's details during an authorization flow",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Confirm User Authorization",
        "operationId": "confirm-user-auth-flow",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "User confirmation request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.AuthorizationConfirmUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.AuthorizationConfirmUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/auth/status": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Checks the status of an ongoing authorization process for a specific tool.\nIf 'wait' param is present, does not respond until either the auth status becomes completed or the timeout is reached.",
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Check Authorization Status",
        "operationId": "auth-status",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Authorization ID",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Timeout in seconds (max 59)",
            "name": "wait",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/auth.AuthorizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "description": "Interact with language models via OpenAI's chat completions API",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["LLM"],
        "summary": "Language model chat",
        "operationId": "llm-chat",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Request Data",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.ChatRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.ChatResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/config": {
      "get": {
        "description": "Get the Engine configuration",
        "produces": ["application/json"],
        "tags": ["Operations"],
        "summary": "Get Engine config",
        "operationId": "engine-config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.EngineConfigResponse"
            }
          }
        }
      }
    },
    "/v1/formatted_tools": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a page of tools from the engine configuration, optionally filtered by toolkit, formatted for a specific provider",
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "List Formatted Static Tools",
        "operationId": "tools-list-formatted",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Toolkit name",
            "name": "toolkit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of items to return (default: 25, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset from the start of the list (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Provider format",
            "name": "format",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-any"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/formatted_tools/{name}": {
      "get": {
        "description": "Returns the formatted tool specification for a specific tool, given a provider",
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "Get Formatted Tool Specification",
        "operationId": "tool-spec-formatted",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Tool name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Provider format",
            "name": "format",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/health": {
      "get": {
        "description": "Check if Arcade Engine is healthy",
        "produces": ["application/json"],
        "tags": ["Operations"],
        "summary": "Engine health check",
        "operationId": "arcade-health",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.HealthSchema"
            }
          }
        }
      }
    },
    "/v1/mcp": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Model Context Protocol endpoint supporting Streamable HTTP transport",
        "consumes": ["application/json"],
        "produces": ["application/json", "text/event-stream"],
        "tags": ["MCP"],
        "summary": "MCP Endpoint",
        "operationId": "mcp-endpoint",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "202": {
            "description": "Accepted",
            "schema": {}
          },
          "204": {
            "description": "No Content",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Model Context Protocol endpoint supporting Streamable HTTP transport",
        "consumes": ["application/json"],
        "produces": ["application/json", "text/event-stream"],
        "tags": ["MCP"],
        "summary": "MCP Endpoint",
        "operationId": "mcp-endpoint",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "202": {
            "description": "Accepted",
            "schema": {}
          },
          "204": {
            "description": "No Content",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Model Context Protocol endpoint supporting Streamable HTTP transport",
        "consumes": ["application/json"],
        "produces": ["application/json", "text/event-stream"],
        "tags": ["MCP"],
        "summary": "MCP Endpoint",
        "operationId": "mcp-endpoint",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "202": {
            "description": "Accepted",
            "schema": {}
          },
          "204": {
            "description": "No Content",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "description": "Returns all projects the caller has access to",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Project Management"],
        "summary": "List Projects",
        "operationId": "list-projects",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (JWT)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "default": 25,
            "description": "Maximum number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of items to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_ProjectResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/projects/{project_id}": {
      "get": {
        "description": "Returns project details",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Project Management"],
        "summary": "Get Project",
        "operationId": "get-project",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (JWT)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Project ID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.ProjectResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/scheduled_tools": {
      "get": {
        "description": "Returns a page of scheduled tool executions",
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "List scheduled tool executions",
        "operationId": "tool-scheduled-list",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of items to return (default: 25, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset from the start of the list (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_ToolExecutionListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/scheduled_tools/{id}": {
      "get": {
        "description": "Returns the details for a specific scheduled tool execution",
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "Get scheduled tool execution details",
        "operationId": "tool-scheduled-get",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Scheduled execution ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.ToolExecutionDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/tools": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a page of tools from the engine configuration, optionally filtered by toolkit",
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "List Static Tools",
        "operationId": "tools-list-static",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Toolkit name",
            "name": "toolkit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of items to return (default: 25, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset from the start of the list (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": ["arcade", "openai", "anthropic"],
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Comma separated tool formats that will be included in the response.",
            "name": "include_format",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_ToolResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/tools/authorize": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Authorizes a user for a specific tool by name",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "Authorize Tool",
        "operationId": "tool-authorize",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Tool authorization request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.AuthorizeToolRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/auth.AuthorizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/tools/execute": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Executes a tool by name and arguments",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "Execute Tool",
        "operationId": "tool-execute",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Tool execution request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.ExecuteToolRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.ExecuteToolResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/tools/{name}": {
      "get": {
        "description": "Returns the arcade tool specification for a specific tool",
        "produces": ["application/json"],
        "tags": ["Tools"],
        "summary": "Get Arcade Tool Specification",
        "operationId": "tool-spec",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Tool name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "enum": ["arcade", "openai", "anthropic"],
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Comma separated tool formats that will be included in the response.",
            "name": "include_format",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.ToolResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/workers": {
      "get": {
        "description": "List all workers with their definitions",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "List all workers",
        "operationId": "workers-list",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of items to return (default: 25, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset from the start of the list (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_WorkerResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "post": {
        "description": "Create a worker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Create a worker",
        "operationId": "workers-create",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Worker configuration to create",
            "name": "workerConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.CreateWorkerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/schemas.WorkerResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/workers/test": {
      "post": {
        "description": "Test a worker connection before adding it to the system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Test a worker connection",
        "operationId": "workers-test",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Minimal worker configuration to test",
            "name": "testConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.WorkerTestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.WorkerTestResponse"
            }
          },
          "400": {
            "description": "Invalid request body or URI",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/workers/{id}": {
      "get": {
        "description": "Get a worker by ID",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Get a worker by ID",
        "operationId": "workers-get",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Worker ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.WorkerResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a worker",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Delete a worker",
        "operationId": "workers-delete",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Worker ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      },
      "patch": {
        "description": "Update a worker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Update a worker",
        "operationId": "workers-update",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Worker ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Worker configuration to update",
            "name": "workerConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemas.UpdateWorkerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.WorkerResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/workers/{id}/health": {
      "get": {
        "description": "Get the health of a worker",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "Get the health of a worker",
        "operationId": "workers-health",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API key or API token)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Worker ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.WorkerHealthResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    },
    "/v1/workers/{id}/tools": {
      "get": {
        "description": "Returns a page of tools",
        "produces": ["application/json"],
        "tags": ["Admin"],
        "summary": "List Tools",
        "operationId": "tools-list",
        "parameters": [
          {
            "type": "string",
            "description": "Bearer (API Key)",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Worker ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of items to return (default: 25, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset from the start of the list (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schemas.OffsetPage-schemas_ToolResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schemas.Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "auth.AuthorizationContext": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "user_info": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "auth.AuthorizationRequirement": {
      "type": "object",
      "properties": {
        "id": {
          "description": "one of ID or ProviderID must be set",
          "type": "string"
        },
        "oauth2": {
          "$ref": "#/definitions/auth.OAuth2AuthorizationRequirement"
        },
        "provider_id": {
          "description": "one of ID or ProviderID must be set",
          "type": "string"
        },
        "provider_type": {
          "type": "string"
        }
      }
    },
    "auth.AuthorizationResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/auth.AuthorizationContext"
        },
        "id": {
          "type": "string"
        },
        "provider_id": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "default": "pending",
          "allOf": [
            {
              "$ref": "#/definitions/auth.AuthorizationStatus"
            }
          ]
        },
        "url": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "auth.AuthorizationStatus": {
      "type": "string",
      "enum": ["not_started", "pending", "completed", "failed"],
      "x-enum-varnames": [
        "StatusNotStarted",
        "StatusPending",
        "StatusCompleted",
        "StatusFailed"
      ]
    },
    "auth.OAuth2AuthorizationRequirement": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "auth.Status": {
      "type": "string",
      "enum": ["active", "inactive"],
      "x-enum-varnames": ["StatusActive", "StatusInactive"]
    },
    "identity.BindingType": {
      "type": "string",
      "enum": ["static", "tenant", "project", "account"],
      "x-enum-varnames": [
        "StaticBindingType",
        "TenantBindingType",
        "ProjectBindingType",
        "AccountBindingType"
      ]
    },
    "schemas.AuthProviderCreateRequest": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "external_id": {
          "description": "The unique external ID for the auth provider",
          "type": "string",
          "maxLength": 50
        },
        "id": {
          "type": "string",
          "maxLength": 100
        },
        "oauth2": {
          "$ref": "#/definitions/schemas.OAuth2ConfigCreateRequest"
        },
        "provider_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schemas.AuthProviderPatchRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "id": {
          "type": "string",
          "maxLength": 100
        },
        "oauth2": {
          "$ref": "#/definitions/schemas.OAuth2ConfigPatchRequest"
        },
        "provider_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schemas.AuthProviderResponse": {
      "type": "object",
      "properties": {
        "binding": {
          "$ref": "#/definitions/schemas.BindingResponse"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "oauth2": {
          "$ref": "#/definitions/schemas.OAuth2ConfigResponse"
        },
        "provider_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schemas.AuthorizationConfirmUserRequest": {
      "type": "object",
      "required": ["flow_id", "user_id"],
      "properties": {
        "flow_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "schemas.AuthorizationConfirmUserResponse": {
      "type": "object",
      "required": ["auth_id"],
      "properties": {
        "auth_id": {
          "type": "string"
        },
        "next_uri": {
          "type": "string"
        }
      }
    },
    "schemas.AuthorizationInitiationRequest": {
      "type": "object",
      "required": ["auth_requirement", "user_id"],
      "properties": {
        "auth_requirement": {
          "$ref": "#/definitions/auth.AuthorizationRequirement"
        },
        "next_uri": {
          "description": "Optional: if provided, the user will be redirected to this URI after authorization",
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "schemas.AuthorizationRequirement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "oauth2": {
          "$ref": "#/definitions/schemas.OAuth2AuthorizationRequirement"
        },
        "provider_id": {
          "type": "string"
        },
        "provider_type": {
          "type": "string"
        },
        "status": {
          "default": "disabled",
          "allOf": [
            {
              "$ref": "#/definitions/auth.Status"
            }
          ]
        },
        "status_reason": {
          "type": "string"
        },
        "token_status": {
          "$ref": "#/definitions/auth.AuthorizationStatus"
        }
      }
    },
    "schemas.AuthorizeToolRequest": {
      "type": "object",
      "required": ["tool_name"],
      "properties": {
        "next_uri": {
          "description": "Optional: if provided, the user will be redirected to this URI after authorization",
          "type": "string"
        },
        "tool_name": {
          "type": "string"
        },
        "tool_version": {
          "description": "Optional: if not provided, any version is used",
          "type": "string"
        },
        "user_id": {
          "description": "Required only when calling with an API key",
          "type": "string"
        }
      }
    },
    "schemas.BindingResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/identity.BindingType"
        }
      }
    },
    "schemas.BundleToolkitMetadata": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "schemas.ChatMessage": {
      "type": "object",
      "required": ["content", "role"],
      "properties": {
        "content": {
          "description": "The content of the message.",
          "type": "string"
        },
        "name": {
          "description": "tool Name",
          "type": "string"
        },
        "role": {
          "description": "The role of the author of this message. One of system, user, tool, or assistant.",
          "type": "string"
        },
        "tool_call_id": {
          "description": "tool_call_id",
          "type": "string"
        },
        "tool_calls": {
          "description": "tool calls if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ModelToolCall"
          }
        }
      }
    },
    "schemas.ChatRequest": {
      "type": "object",
      "properties": {
        "frequency_penalty": {
          "type": "number"
        },
        "logit_bias": {
          "description": "LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.\nincorrect: `\"logit_bias\":{\"You\": 6}`, correct: `\"logit_bias\":{\"1639\": 6}`\nrefs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias",
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "logprobs": {
          "description": "LogProbs indicates whether to return log probabilities of the output tokens or not.\nIf true, returns the log probabilities of each output token returned in the content of message.\nThis option is currently not available on the gpt-4-vision-preview model.",
          "type": "boolean"
        },
        "max_tokens": {
          "type": "integer"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ChatMessage"
          }
        },
        "model": {
          "type": "string"
        },
        "n": {
          "type": "integer"
        },
        "parallel_tool_calls": {
          "description": "Disable the default behavior of parallel tool calls by setting it: false.",
          "type": "boolean"
        },
        "presence_penalty": {
          "type": "number"
        },
        "response_format": {
          "$ref": "#/definitions/schemas.ResponseFormat"
        },
        "seed": {
          "type": "integer"
        },
        "stop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stream": {
          "type": "boolean"
        },
        "stream_options": {
          "description": "Options for streaming response. Only set this when you set stream: true.",
          "allOf": [
            {
              "$ref": "#/definitions/schemas.StreamOptions"
            }
          ]
        },
        "temperature": {
          "type": "number"
        },
        "tool_choice": {
          "description": "This can be either a string or an ToolChoice object."
        },
        "tools": {},
        "top_logprobs": {
          "description": "TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each\ntoken position, each with an associated log probability.\nlogprobs must be set to true if this parameter is used.",
          "type": "integer"
        },
        "top_p": {
          "type": "number"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "schemas.ChatResponse": {
      "type": "object",
      "properties": {
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.Choice"
          }
        },
        "created": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "system_fingerprint": {
          "type": "string"
        },
        "usage": {
          "$ref": "#/definitions/schemas.Usage"
        }
      }
    },
    "schemas.Choice": {
      "type": "object",
      "properties": {
        "finish_reason": {
          "type": "string"
        },
        "index": {
          "type": "integer"
        },
        "logprobs": {},
        "message": {
          "$ref": "#/definitions/schemas.ChatMessage"
        },
        "tool_authorizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth.AuthorizationResponse"
          }
        },
        "tool_messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ChatMessage"
          }
        }
      }
    },
    "schemas.CreateModelRequest": {
      "type": "object",
      "required": ["config", "id", "model_provider_type"],
      "properties": {
        "config": {},
        "id": {
          "type": "string"
        },
        "model_provider_type": {
          "type": "string"
        }
      }
    },
    "schemas.CreateWorkerRequest": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "http": {
          "$ref": "#/definitions/schemas.HTTPWorkerConfigRequest"
        },
        "id": {
          "type": "string",
          "maxLength": 100
        },
        "mcp": {
          "$ref": "#/definitions/schemas.MCPWorkerConfigCreateRequest"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schemas.DashboardConfigResponse": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "coordinatorUri": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        }
      }
    },
    "schemas.DeploymentLogsResponse": {
      "type": "object",
      "properties": {
        "line": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "schemas.DeploymentStatusResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "schemas.DirectorConfigResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "maxTools": {
          "type": "integer"
        }
      }
    },
    "schemas.EngineConfigResponse": {
      "type": "object",
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/schemas.DashboardConfigResponse"
        },
        "directors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.DirectorConfigResponse"
          }
        },
        "oauth2": {
          "$ref": "#/definitions/schemas.EngineOAuth2ConfigResponse"
        }
      }
    },
    "schemas.EngineOAuth2ConfigResponse": {
      "type": "object",
      "properties": {
        "callback_url_template": {
          "type": "string"
        }
      }
    },
    "schemas.Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "schemas.ExecuteToolRequest": {
      "type": "object",
      "required": ["tool_name"],
      "properties": {
        "include_error_stacktrace": {
          "description": "Whether to include the error stacktrace in the response. If not provided, the error stacktrace is not included.",
          "type": "boolean"
        },
        "input": {
          "description": "JSON input to the tool, if any",
          "allOf": [
            {
              "$ref": "#/definitions/tool.RawInputs"
            }
          ]
        },
        "run_at": {
          "description": "The time at which the tool should be run (optional). If not provided, the tool is run immediately. Format ISO 8601: YYYY-MM-DDTHH:MM:SS",
          "type": "string"
        },
        "tool_name": {
          "type": "string"
        },
        "tool_version": {
          "description": "The tool version to use (optional). If not provided, any version is used",
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "schemas.ExecuteToolResponse": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "number"
        },
        "execution_id": {
          "type": "string"
        },
        "execution_type": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "output": {
          "$ref": "#/definitions/tool.ResponseOutput"
        },
        "run_at": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "description": "Whether the request was successful.\nFor immediately-executed requests, this will be true if the tool call succeeded.\nFor scheduled requests, this will be true if the request was scheduled successfully.",
          "type": "boolean"
        }
      }
    },
    "schemas.HTTPWorkerConfigRequest": {
      "type": "object",
      "required": ["retry", "secret", "timeout", "uri"],
      "properties": {
        "retry": {
          "type": "integer",
          "maximum": 10,
          "minimum": 0
        },
        "secret": {
          "type": "string",
          "maxLength": 100
        },
        "timeout": {
          "type": "integer",
          "maximum": 4000,
          "minimum": 1
        },
        "uri": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "schemas.HTTPWorkerConfigResponse": {
      "type": "object",
      "properties": {
        "retry": {
          "type": "integer"
        },
        "secret": {
          "$ref": "#/definitions/schemas.SecretResponse"
        },
        "timeout": {
          "type": "integer"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "schemas.HTTPWorkerConfigUpdate": {
      "type": "object",
      "properties": {
        "retry": {
          "type": "integer",
          "maximum": 10,
          "minimum": 0
        },
        "secret": {
          "type": "string",
          "maxLength": 100
        },
        "timeout": {
          "type": "integer",
          "maximum": 4000,
          "minimum": 1
        },
        "uri": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "schemas.HTTPWorkerTestConfig": {
      "type": "object",
      "required": ["uri"],
      "properties": {
        "uri": {
          "type": "string",
          "maxLength": 256
        }
      }
    },
    "schemas.HealthSchema": {
      "type": "object",
      "properties": {
        "healthy": {
          "type": "boolean"
        }
      }
    },
    "schemas.Input": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/schemas.Parameter"
          }
        }
      }
    },
    "schemas.MCPWorkerConfigCreateRequest": {
      "type": "object",
      "required": ["retry", "timeout", "uri"],
      "properties": {
        "retry": {
          "type": "integer",
          "maximum": 10,
          "minimum": 0
        },
        "timeout": {
          "type": "integer",
          "maximum": 4000,
          "minimum": 1
        },
        "uri": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "schemas.MCPWorkerConfigPatchRequest": {
      "type": "object",
      "properties": {
        "retry": {
          "type": "integer",
          "maximum": 10,
          "minimum": 0
        },
        "timeout": {
          "type": "integer",
          "maximum": 4000,
          "minimum": 1
        },
        "uri": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "schemas.MCPWorkerConfigResponse": {
      "type": "object",
      "properties": {
        "retry": {
          "type": "integer"
        },
        "timeout": {
          "type": "integer"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "schemas.MCPWorkerTestConfig": {
      "type": "object",
      "required": ["uri"],
      "properties": {
        "uri": {
          "type": "string",
          "maxLength": 256
        }
      }
    },
    "schemas.ModelResponse": {
      "type": "object",
      "properties": {
        "binding": {
          "$ref": "#/definitions/schemas.BindingResponse"
        },
        "config": {},
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schemas.ModelToolCall": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/schemas.ToolFunctionCall"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/schemas.ToolType"
        }
      }
    },
    "schemas.OAuth2AuthorizationRequirement": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "schemas.OAuth2ConfigCreateRequest": {
      "type": "object",
      "required": ["client_id"],
      "properties": {
        "authorize_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigCreateRequest"
        },
        "client_id": {
          "type": "string",
          "maxLength": 1000
        },
        "client_secret": {
          "type": "string",
          "maxLength": 1000
        },
        "pkce": {
          "$ref": "#/definitions/schemas.PKCEConfigCreateRequest"
        },
        "refresh_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigCreateRequest"
        },
        "scope_delimiter": {
          "type": "string",
          "enum": [",", " "]
        },
        "token_introspection_request": {
          "$ref": "#/definitions/schemas.TokenIntrospectionCreateRequest"
        },
        "token_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigCreateRequest"
        },
        "user_info_request": {
          "$ref": "#/definitions/schemas.UserInfoRequestConfigCreateRequest"
        }
      }
    },
    "schemas.OAuth2ConfigPatchRequest": {
      "type": "object",
      "properties": {
        "authorize_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigPatchRequest"
        },
        "client_id": {
          "type": "string",
          "maxLength": 1000
        },
        "client_secret": {
          "type": "string",
          "maxLength": 1000
        },
        "pkce": {
          "$ref": "#/definitions/schemas.PKCEConfigPatchRequest"
        },
        "refresh_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigPatchRequest"
        },
        "scope_delimiter": {
          "type": "string",
          "enum": [",", " "]
        },
        "token_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigPatchRequest"
        },
        "user_info_request": {
          "$ref": "#/definitions/schemas.UserInfoRequestConfigPatchRequest"
        }
      }
    },
    "schemas.OAuth2ConfigResponse": {
      "type": "object",
      "properties": {
        "authorize_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigResponse"
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "$ref": "#/definitions/schemas.SecretResponse"
        },
        "pkce": {
          "$ref": "#/definitions/schemas.PKCEConfigResponse"
        },
        "redirect_uri": {
          "description": "The redirect URI required for this provider.",
          "type": "string"
        },
        "refresh_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigResponse"
        },
        "scope_delimiter": {
          "type": "string"
        },
        "token_introspection_request": {
          "$ref": "#/definitions/schemas.TokenIntrospectionRequestConfigResponse"
        },
        "token_request": {
          "$ref": "#/definitions/schemas.OAuth2RequestConfigResponse"
        },
        "user_info_request": {
          "$ref": "#/definitions/schemas.UserInfoRequestConfigResponse"
        }
      }
    },
    "schemas.OAuth2RequestConfigCreateRequest": {
      "type": "object",
      "required": ["endpoint"],
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "maxLength": 1000
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "schemas.OAuth2RequestConfigPatchRequest": {
      "type": "object",
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "maxLength": 1000
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "schemas.OAuth2RequestConfigResponse": {
      "type": "object",
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "expiration_format": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string"
        },
        "response_content_type": {
          "type": "string"
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "schemas.OffsetPage-any": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {}
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_AuthProviderResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.AuthProviderResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_ModelResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ModelResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_ProjectResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ProjectResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_StoredSecretResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.StoredSecretResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_ToolExecutionListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ToolExecutionListResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_ToolResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ToolResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_UserAuthProviderConnectionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.UserAuthProviderConnectionResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.OffsetPage-schemas_WorkerResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.WorkerResponse"
          }
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "page_count": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "schemas.Output": {
      "type": "object",
      "properties": {
        "available_modes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "value_schema": {
          "$ref": "#/definitions/schemas.ValueSchema"
        }
      }
    },
    "schemas.PKCEConfigCreateRequest": {
      "type": "object",
      "properties": {
        "code_challenge_method": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "schemas.PKCEConfigPatchRequest": {
      "type": "object",
      "properties": {
        "code_challenge_method": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "schemas.PKCEConfigResponse": {
      "type": "object",
      "properties": {
        "code_challenge_method": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "schemas.PackageToolkitMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "schemas.Parameter": {
      "type": "object",
      "required": ["name", "value_schema"],
      "properties": {
        "description": {
          "type": "string"
        },
        "inferrable": {
          "type": "boolean",
          "default": true
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "value_schema": {
          "$ref": "#/definitions/schemas.ValueSchema"
        }
      }
    },
    "schemas.ProjectResponse": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "schemas.Requirements": {
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/schemas.AuthorizationRequirement"
        },
        "met": {
          "type": "boolean",
          "default": false
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.SecretRequirement"
          }
        }
      }
    },
    "schemas.ResponseFormat": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/schemas.ResponseFormatType"
        }
      }
    },
    "schemas.ResponseFormatType": {
      "type": "string",
      "enum": ["json_object", "text"],
      "x-enum-varnames": ["ResponseFormatJSON", "ResponseFormatText"]
    },
    "schemas.SecretRequirement": {
      "type": "object",
      "required": ["key"],
      "properties": {
        "key": {
          "type": "string"
        },
        "met": {
          "type": "boolean",
          "default": false
        },
        "status_reason": {
          "type": "string"
        }
      }
    },
    "schemas.SecretResponse": {
      "type": "object",
      "properties": {
        "binding": {
          "$ref": "#/definitions/identity.BindingType"
        },
        "editable": {
          "type": "boolean"
        },
        "exists": {
          "type": "boolean"
        },
        "hint": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "schemas.ServerInfoResponse": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "schemas.SessionVerificationSettingsResponse": {
      "type": "object",
      "properties": {
        "unsafe_skip_verification": {
          "type": "boolean"
        },
        "unsafe_skip_verification_choice_allowed": {
          "type": "boolean"
        },
        "verifier_url": {
          "description": "not omitempty because we want to show null values",
          "type": "string"
        }
      }
    },
    "schemas.StoredSecretResponse": {
      "type": "object",
      "properties": {
        "binding": {
          "$ref": "#/definitions/schemas.BindingResponse"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "last_accessed_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "schemas.StreamOptions": {
      "type": "object",
      "properties": {
        "include_usage": {
          "description": "If set, an additional chunk will be streamed before the data: [DONE] message.\nThe usage field on this chunk shows the token usage statistics for the entire request,\nand the choices field will always be an empty array.\nAll other chunks will also include a usage field, but with a null value.",
          "type": "boolean"
        }
      }
    },
    "schemas.TokenIntrospectionCreateRequest": {
      "type": "object",
      "required": ["endpoint", "triggers"],
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "maxLength": 1000
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggers": {
          "$ref": "#/definitions/schemas.TokenIntrospectionTriggersCreateRequest"
        }
      }
    },
    "schemas.TokenIntrospectionRequestConfigResponse": {
      "type": "object",
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "endpoint": {
          "type": "string"
        },
        "expiration_format": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string"
        },
        "response_content_type": {
          "type": "string"
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggers": {
          "$ref": "#/definitions/schemas.TokenIntrospectionRequestTriggersResponse"
        }
      }
    },
    "schemas.TokenIntrospectionRequestTriggersResponse": {
      "type": "object",
      "properties": {
        "on_token_grant": {
          "type": "boolean"
        },
        "on_token_refresh": {
          "type": "boolean"
        }
      }
    },
    "schemas.TokenIntrospectionTriggersCreateRequest": {
      "type": "object",
      "properties": {
        "on_token_grant": {
          "type": "boolean"
        },
        "on_token_refresh": {
          "type": "boolean"
        }
      }
    },
    "schemas.ToolExecutionAttemptResponse": {
      "type": "object",
      "properties": {
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "output": {
          "$ref": "#/definitions/tool.ResponseOutput"
        },
        "started_at": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "system_error_message": {
          "type": "string"
        }
      }
    },
    "schemas.ToolExecutionDetailResponse": {
      "type": "object",
      "properties": {
        "attempts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.ToolExecutionAttemptResponse"
          }
        },
        "created_at": {
          "type": "string"
        },
        "execution_status": {
          "type": "string"
        },
        "execution_type": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "input": {
          "$ref": "#/definitions/tool.RawInputs"
        },
        "run_at": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "tool_name": {
          "type": "string"
        },
        "toolkit_name": {
          "type": "string"
        },
        "toolkit_version": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "schemas.ToolExecutionListResponse": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "execution_status": {
          "type": "string"
        },
        "execution_type": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "run_at": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "tool_name": {
          "type": "string"
        },
        "toolkit_name": {
          "type": "string"
        },
        "toolkit_version": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "schemas.ToolFunctionCall": {
      "type": "object",
      "properties": {
        "arguments": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "schemas.ToolResponse": {
      "type": "object",
      "required": [
        "fully_qualified_name",
        "input",
        "name",
        "qualified_name",
        "toolkit"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "formatted_schema": {
          "type": "object",
          "additionalProperties": {}
        },
        "fully_qualified_name": {
          "type": "string"
        },
        "input": {
          "$ref": "#/definitions/schemas.Input"
        },
        "name": {
          "type": "string"
        },
        "output": {
          "$ref": "#/definitions/schemas.Output"
        },
        "qualified_name": {
          "type": "string"
        },
        "requirements": {
          "$ref": "#/definitions/schemas.Requirements"
        },
        "toolkit": {
          "$ref": "#/definitions/schemas.ToolkitResponse"
        }
      }
    },
    "schemas.ToolType": {
      "type": "string",
      "enum": ["function"],
      "x-enum-varnames": ["ToolTypeFunction"]
    },
    "schemas.ToolkitMetadata": {
      "type": "object",
      "properties": {
        "bundles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.BundleToolkitMetadata"
          }
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemas.PackageToolkitMetadata"
          }
        }
      }
    },
    "schemas.ToolkitResponse": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "schemas.UpdateDeploymentRequest": {
      "type": "object",
      "required": ["toolkits"],
      "properties": {
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secrets": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "toolkits": {
          "$ref": "#/definitions/schemas.ToolkitMetadata"
        }
      }
    },
    "schemas.UpdateModelConfigRequest": {
      "type": "object",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/schemas.UpdateSecretRequest"
        }
      }
    },
    "schemas.UpdateModelRequest": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/schemas.UpdateModelConfigRequest"
        }
      }
    },
    "schemas.UpdateSecretRequest": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "schemas.UpdateSessionVerificationSettingsRequest": {
      "type": "object",
      "properties": {
        "unsafe_skip_verification": {
          "type": "boolean"
        },
        "verifier_url": {
          "type": "string"
        }
      }
    },
    "schemas.UpdateWorkerRequest": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "http": {
          "$ref": "#/definitions/schemas.HTTPWorkerConfigUpdate"
        },
        "mcp": {
          "$ref": "#/definitions/schemas.MCPWorkerConfigPatchRequest"
        }
      }
    },
    "schemas.UpsertStoredSecretRequest": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "maxLength": 1000
        }
      }
    },
    "schemas.Usage": {
      "type": "object",
      "properties": {
        "completion_tokens": {
          "type": "integer"
        },
        "prompt_tokens": {
          "type": "integer"
        },
        "total_tokens": {
          "type": "integer"
        }
      }
    },
    "schemas.UserAuthProviderConnectionResponse": {
      "type": "object",
      "properties": {
        "connection_id": {
          "type": "string"
        },
        "connection_status": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "provider_description": {
          "type": "string"
        },
        "provider_id": {
          "type": "string"
        },
        "provider_user_info": {},
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "schemas.UserInfoRequestConfigCreateRequest": {
      "type": "object",
      "required": ["endpoint", "triggers"],
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "maxLength": 1000
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggers": {
          "$ref": "#/definitions/schemas.UserInfoRequestTriggersCreateRequest"
        }
      }
    },
    "schemas.UserInfoRequestConfigPatchRequest": {
      "type": "object",
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "maxLength": 1000
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_content_type": {
          "type": "string",
          "enum": ["application/x-www-form-urlencoded", "application/json"]
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggers": {
          "$ref": "#/definitions/schemas.UserInfoRequestTriggersPatchRequest"
        }
      }
    },
    "schemas.UserInfoRequestConfigResponse": {
      "type": "object",
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "expiration_format": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_content_type": {
          "type": "string"
        },
        "response_content_type": {
          "type": "string"
        },
        "response_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggers": {
          "$ref": "#/definitions/schemas.UserInfoRequestTriggersResponse"
        }
      }
    },
    "schemas.UserInfoRequestTriggersCreateRequest": {
      "type": "object",
      "properties": {
        "on_token_grant": {
          "type": "boolean"
        },
        "on_token_refresh": {
          "type": "boolean"
        }
      }
    },
    "schemas.UserInfoRequestTriggersPatchRequest": {
      "type": "object",
      "properties": {
        "on_token_grant": {
          "type": "boolean"
        },
        "on_token_refresh": {
          "type": "boolean"
        }
      }
    },
    "schemas.UserInfoRequestTriggersResponse": {
      "type": "object",
      "properties": {
        "on_token_grant": {
          "type": "boolean"
        },
        "on_token_refresh": {
          "type": "boolean"
        }
      }
    },
    "schemas.ValueSchema": {
      "type": "object",
      "required": ["val_type"],
      "properties": {
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inner_val_type": {
          "type": "string"
        },
        "val_type": {
          "type": "string"
        }
      }
    },
    "schemas.WorkerHealthResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "healthy": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "schemas.WorkerResponse": {
      "type": "object",
      "properties": {
        "binding": {
          "$ref": "#/definitions/schemas.BindingResponse"
        },
        "enabled": {
          "type": "boolean"
        },
        "http": {
          "$ref": "#/definitions/schemas.HTTPWorkerConfigResponse"
        },
        "id": {
          "type": "string"
        },
        "managed": {
          "type": "boolean"
        },
        "mcp": {
          "$ref": "#/definitions/schemas.MCPWorkerConfigResponse"
        },
        "type": {
          "$ref": "#/definitions/schemas.WorkerType"
        }
      }
    },
    "schemas.WorkerTestRequest": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "http": {
          "$ref": "#/definitions/schemas.HTTPWorkerTestConfig"
        },
        "mcp": {
          "$ref": "#/definitions/schemas.MCPWorkerTestConfig"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "schemas.WorkerTestResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "serverInfo": {
          "$ref": "#/definitions/schemas.ServerInfoResponse"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "schemas.WorkerType": {
      "type": "string",
      "enum": ["http", "mcp", "unknown"],
      "x-enum-varnames": [
        "WorkerTypeHTTP",
        "WorkerTypeMCP",
        "WorkerTypeUnknown"
      ]
    },
    "tool.Error": {
      "type": "object",
      "required": ["can_retry", "kind", "message"],
      "properties": {
        "additional_prompt_content": {
          "type": "string"
        },
        "can_retry": {
          "type": "boolean"
        },
        "developer_message": {
          "type": "string"
        },
        "extra": {
          "type": "object",
          "additionalProperties": true
        },
        "kind": {
          "$ref": "#/definitions/tool.ErrorKind"
        },
        "message": {
          "type": "string"
        },
        "retry_after_ms": {
          "type": "integer"
        },
        "stacktrace": {
          "type": "string"
        },
        "status_code": {
          "type": "integer"
        }
      }
    },
    "tool.ErrorKind": {
      "type": "string",
      "enum": [
        "TOOLKIT_LOAD_FAILED",
        "TOOL_DEFINITION_BAD_DEFINITION",
        "TOOL_DEFINITION_BAD_INPUT_SCHEMA",
        "TOOL_DEFINITION_BAD_OUTPUT_SCHEMA",
        "TOOL_REQUIREMENTS_NOT_MET",
        "TOOL_RUNTIME_BAD_INPUT_VALUE",
        "TOOL_RUNTIME_BAD_OUTPUT_VALUE",
        "TOOL_RUNTIME_RETRY",
        "TOOL_RUNTIME_CONTEXT_REQUIRED",
        "TOOL_RUNTIME_FATAL",
        "UPSTREAM_RUNTIME_BAD_REQUEST",
        "UPSTREAM_RUNTIME_AUTH_ERROR",
        "UPSTREAM_RUNTIME_NOT_FOUND",
        "UPSTREAM_RUNTIME_VALIDATION_ERROR",
        "UPSTREAM_RUNTIME_RATE_LIMIT",
        "UPSTREAM_RUNTIME_SERVER_ERROR",
        "UPSTREAM_RUNTIME_UNMAPPED",
        "UNKNOWN"
      ],
      "x-enum-varnames": [
        "ErrorKindToolkitLoadFailed",
        "ErrorKindToolDefinitionBadDefinition",
        "ErrorKindToolDefinitionBadInputSchema",
        "ErrorKindToolDefinitionBadOutputSchema",
        "ErrorKindToolRequirementsNotMet",
        "ErrorKindToolRuntimeBadInputValue",
        "ErrorKindToolRuntimeBadOutputValue",
        "ErrorKindToolRuntimeRetry",
        "ErrorKindToolRuntimeContextRequired",
        "ErrorKindToolRuntimeFatal",
        "ErrorKindUpstreamRuntimeBadRequest",
        "ErrorKindUpstreamRuntimeAuthError",
        "ErrorKindUpstreamRuntimeNotFound",
        "ErrorKindUpstreamRuntimeValidationError",
        "ErrorKindUpstreamRuntimeRateLimit",
        "ErrorKindUpstreamRuntimeServerError",
        "ErrorKindUpstreamRuntimeUnmapped",
        "ErrorKindUnknown"
      ]
    },
    "tool.Log": {
      "type": "object",
      "required": ["level", "message"],
      "properties": {
        "level": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        }
      }
    },
    "tool.RawInputs": {
      "type": "object",
      "additionalProperties": true
    },
    "tool.ResponseOutput": {
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/auth.AuthorizationResponse"
        },
        "error": {
          "$ref": "#/definitions/tool.Error"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tool.Log"
          }
        },
        "value": {}
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "externalDocs": {
    "description": "Documentation",
    "url": "https://docs.arcade.dev"
  }
}
